
CARD_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  000008ae  00000942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  008001d4  008001d4  00000ab6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ac2  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001007  00000000  00000000  000038ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000196b  00000000  00000000  000048d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  00006240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ef4  00000000  00000000  000068a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a20  00000000  00000000  00007798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000091b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3d       	cpi	r26, 0xD4	; 212
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a4 ed       	ldi	r26, 0xD4	; 212
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 30       	cpi	r26, 0x07	; 7
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cc 02 	call	0x598	; 0x598 <main>
  8a:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
* 											Function Implementation
************************************************************************************************************/

void APP_Init(void)
{
	(void)HUSART_enInit();
  92:	0e 94 b2 02 	call	0x564	; 0x564 <HUSART_enInit>
	HSPI_SlaveInit();
  96:	0e 94 70 02 	call	0x4e0	; 0x4e0 <HSPI_SlaveInit>
	eeprom_init();
  9a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <eeprom_init>
	sei();
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <APP_Start>:

void APP_Start(void)
{
	// 	APP_terminalPanGet(pan_arr);
	// 	HUSART_sendSTRING(pan_arr);
	switch(u8_g_CardState)
  a2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <__data_end>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	09 f4       	brne	.+2      	; 0xac <APP_Start+0xa>
  aa:	4a c0       	rjmp	.+148    	; 0x140 <APP_Start+0x9e>
  ac:	28 f4       	brcc	.+10     	; 0xb8 <APP_Start+0x16>
  ae:	88 23       	and	r24, r24
  b0:	51 f0       	breq	.+20     	; 0xc6 <APP_Start+0x24>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	c1 f1       	breq	.+112    	; 0x126 <APP_Start+0x84>
  b6:	08 95       	ret
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <APP_Start+0x1c>
  bc:	53 c0       	rjmp	.+166    	; 0x164 <APP_Start+0xc2>
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	09 f4       	brne	.+2      	; 0xc4 <APP_Start+0x22>
  c2:	63 c0       	rjmp	.+198    	; 0x18a <APP_Start+0xe8>
  c4:	08 95       	ret
	{
		case CardGetMode:
		{
			u8_g_EepromFlag = eeprom_read_byte(FLAG_PAGE);
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 02 02 	call	0x404	; 0x404 <eeprom_read_byte>
  ce:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <u8_g_EepromFlag>
			if(u8_g_EepromFlag == 0xFF) u8_g_CardState = CardProgMode_GetPan;
  d2:	8f 3f       	cpi	r24, 0xFF	; 255
  d4:	21 f4       	brne	.+8      	; 0xde <APP_Start+0x3c>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
  dc:	08 95       	ret
			else
			{
				HUSART_sendSTRING("\n\rPlease press 1 for entering user mode and 2 for programming mode:");
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
				while(HUSART_enRecieveData(&u8_gs_ModeSelect));
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	0e 94 bc 02 	call	0x578	; 0x578 <HUSART_enRecieveData>
  ee:	81 11       	cpse	r24, r1
  f0:	fa cf       	rjmp	.-12     	; 0xe6 <APP_Start+0x44>
				HUSART_enSendData(u8_gs_ModeSelect);
  f2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <u8_gs_ModeSelect>
  f6:	0e 94 b7 02 	call	0x56e	; 0x56e <HUSART_enSendData>
				HUSART_enSendData('\n\r');
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	0e 94 b7 02 	call	0x56e	; 0x56e <HUSART_enSendData>
				if('1' == u8_gs_ModeSelect)	u8_g_CardState = CardUserMode;
 100:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <u8_gs_ModeSelect>
 104:	81 33       	cpi	r24, 0x31	; 49
 106:	21 f4       	brne	.+8      	; 0x110 <APP_Start+0x6e>
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
 10e:	08 95       	ret
				else if('2' == u8_gs_ModeSelect) u8_g_CardState = CardProgMode_GetPan;
 110:	82 33       	cpi	r24, 0x32	; 50
 112:	21 f4       	brne	.+8      	; 0x11c <APP_Start+0x7a>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
 11a:	08 95       	ret
				else HUSART_sendSTRING("Invalid Choice, ");
 11c:	84 eb       	ldi	r24, 0xB4	; 180
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
 124:	08 95       	ret
			}
			break;
		}
		case CardProgMode_GetPan:
		{
			u8_g_PanValid = APP_terminalPanGet(pan_arr);
 126:	85 ed       	ldi	r24, 0xD5	; 213
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 0c 01 	call	0x218	; 0x218 <APP_terminalPanGet>
 12e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <u8_g_PanValid>
			if(PANGET_OK == u8_g_PanValid) u8_g_CardState = CardProgMode_GetPin;
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	09 f0       	breq	.+2      	; 0x138 <APP_Start+0x96>
 136:	45 c0       	rjmp	.+138    	; 0x1c2 <APP_Start+0x120>
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
 13e:	08 95       	ret
			break;
		}
		case CardProgMode_GetPin:
		{
			if(CARD_MatchPINs() == PIN_Match_OK)
 140:	0e 94 94 01 	call	0x328	; 0x328 <CARD_MatchPINs>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	51 f4       	brne	.+20     	; 0x15c <APP_Start+0xba>
			{
				SaveCardData(pan_arr,pin_arr);
 148:	69 ee       	ldi	r22, 0xE9	; 233
 14a:	71 e0       	ldi	r23, 0x01	; 1
 14c:	85 ed       	ldi	r24, 0xD5	; 213
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 36 01 	call	0x26c	; 0x26c <SaveCardData>
				u8_g_CardState = CardUserMode;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
 15a:	08 95       	ret
			}
			else u8_g_CardState = CardProgMode_GetPin;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
 162:	08 95       	ret
			break;
		}
		case CardUserMode:
		{
			HUSART_sendSTRING("\n\r------------- User Mode -------------\n");
 164:	85 ec       	ldi	r24, 0xC5	; 197
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
			//_delay_ms(5000);
			/* Trigger ATM */
			
			
			/* Get PIN from EEPROM to prepare data in SPI buffer */
			ReadCardData(pan_arr,pin_arr);
 16c:	69 ee       	ldi	r22, 0xE9	; 233
 16e:	71 e0       	ldi	r23, 0x01	; 1
 170:	85 ed       	ldi	r24, 0xD5	; 213
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 6e 01 	call	0x2dc	; 0x2dc <ReadCardData>
			HSPI_SlaveRequest(pin_arr, PIN_LENGTH);
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	89 ee       	ldi	r24, 0xE9	; 233
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 9e 02 	call	0x53c	; 0x53c <HSPI_SlaveRequest>
			u8_g_CardState = CardCommMode;
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end>
			break;
 188:	08 95       	ret
		}
		case CardCommMode:
		{
			if(CARD_PIN_REQUEST == u8_g_SlaveReceive)
 18a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <u8_g_SlaveReceive>
 18e:	80 35       	cpi	r24, 0x50	; 80
 190:	41 f4       	brne	.+16     	; 0x1a2 <APP_Start+0x100>
			{
				u8_g_SlaveReceive = 0;
 192:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pin_arr, PIN_LENGTH);
 196:	65 e0       	ldi	r22, 0x05	; 5
 198:	89 ee       	ldi	r24, 0xE9	; 233
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 a9 02 	call	0x552	; 0x552 <HSPI_SlaveSetData>
 1a0:	08 95       	ret
			}
			else if(CARD_PAN_REQUEST == u8_g_SlaveReceive)
 1a2:	87 34       	cpi	r24, 0x47	; 71
 1a4:	41 f4       	brne	.+16     	; 0x1b6 <APP_Start+0x114>
			{
				u8_g_SlaveReceive = 0;
 1a6:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pan_arr, PAN_LENGTH);
 1aa:	64 e1       	ldi	r22, 0x14	; 20
 1ac:	85 ed       	ldi	r24, 0xD5	; 213
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 a9 02 	call	0x552	; 0x552 <HSPI_SlaveSetData>
 1b4:	08 95       	ret
			}
			else if(ATM_REQUEST_EJECTED == u8_g_SlaveReceive)
 1b6:	85 34       	cpi	r24, 0x45	; 69
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <APP_Start+0x120>
			{
				u8_g_SlaveReceive = 0;
 1ba:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <u8_g_SlaveReceive>
				u8_g_CardState = CardGetMode;
 1be:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <__data_end>
 1c2:	08 95       	ret

000001c4 <APP_terminalPinGet>:
 * FUNCTION			: APP_terminalPinGet
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	8c 01       	movw	r16, r24
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, 5);
 1cc:	65 e0       	ldi	r22, 0x05	; 5
 1ce:	0e 94 c9 02 	call	0x592	; 0x592 <HUSART_receiveSTRING>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 1d2:	c0 e0       	ldi	r28, 0x00	; 0
	HUSART_receiveSTRING(arr, 5);
	while(arr[counter] != null)
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <APP_terminalPinGet+0x2a>
	{
		if(arr[counter] >= '0' && arr[counter] <= '9')
 1d6:	80 53       	subi	r24, 0x30	; 48
 1d8:	8a 30       	cpi	r24, 0x0A	; 10
 1da:	10 f4       	brcc	.+4      	; 0x1e0 <APP_terminalPinGet+0x1c>
		{
			counter++;
 1dc:	cf 5f       	subi	r28, 0xFF	; 255
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <APP_terminalPinGet+0x2a>
		}
		else
		{
			HUSART_sendSTRING( (Uchar8_t*) "\rNot numeric ");
 1e0:	8e ee       	ldi	r24, 0xEE	; 238
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
			flag = 1;
 1e8:	91 e0       	ldi	r25, 0x01	; 1
			errorStatus = PINGET_NOK;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1ec:	08 c0       	rjmp	.+16     	; 0x1fe <APP_terminalPinGet+0x3a>
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, 5);
	while(arr[counter] != null)
 1ee:	f8 01       	movw	r30, r16
 1f0:	ec 0f       	add	r30, r28
 1f2:	f1 1d       	adc	r31, r1
 1f4:	80 81       	ld	r24, Z
 1f6:	81 11       	cpse	r24, r1
 1f8:	ee cf       	rjmp	.-36     	; 0x1d6 <APP_terminalPinGet+0x12>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
			flag = 1;
			errorStatus = PINGET_NOK;
			break;
		}
	}
	if(counter < 4 && flag == 0)
 1fe:	c4 30       	cpi	r28, 0x04	; 4
 200:	38 f4       	brcc	.+14     	; 0x210 <APP_terminalPinGet+0x4c>
 202:	91 11       	cpse	r25, r1
 204:	05 c0       	rjmp	.+10     	; 0x210 <APP_terminalPinGet+0x4c>
	{
		HUSART_sendSTRING( (Uchar8_t*) "\rbelow 4 dig ");
 206:	8c ef       	ldi	r24, 0xFC	; 252
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
		errorStatus = PINGET_NOK;
 20e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return errorStatus;
}
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <APP_terminalPanGet>:
 * FUNCTION			: APP_terminalPanGet
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
 21e:	8a e0       	ldi	r24, 0x0A	; 10
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
	HUSART_receiveSTRING(arr,20);
 226:	64 e1       	ldi	r22, 0x14	; 20
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 c9 02 	call	0x592	; 0x592 <HUSART_receiveSTRING>
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
 22e:	90 e0       	ldi	r25, 0x00	; 0
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 230:	0b c0       	rjmp	.+22     	; 0x248 <APP_terminalPanGet+0x30>
	{
		if(arr[loc_counter] >= '0' && arr[loc_counter] <= '9')
 232:	80 53       	subi	r24, 0x30	; 48
 234:	8a 30       	cpi	r24, 0x0A	; 10
 236:	10 f4       	brcc	.+4      	; 0x23c <APP_terminalPanGet+0x24>
		{
			loc_counter++;
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	06 c0       	rjmp	.+12     	; 0x248 <APP_terminalPanGet+0x30>
		}
		else
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain Numbers only");
 23c:	8e e1       	ldi	r24, 0x1E	; 30
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
			return PANGET_NOK;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0f c0       	rjmp	.+30     	; 0x266 <APP_terminalPanGet+0x4e>
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 248:	fe 01       	movw	r30, r28
 24a:	e9 0f       	add	r30, r25
 24c:	f1 1d       	adc	r31, r1
 24e:	80 81       	ld	r24, Z
 250:	81 11       	cpse	r24, r1
 252:	ef cf       	rjmp	.-34     	; 0x232 <APP_terminalPanGet+0x1a>
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain Numbers only");
			return PANGET_NOK;
		}
	}
	if(loc_counter<16)
 254:	90 31       	cpi	r25, 0x10	; 16
 256:	30 f4       	brcc	.+12     	; 0x264 <APP_terminalPanGet+0x4c>
	{
	 HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain at least 16 numbers");
 258:	8f e4       	ldi	r24, 0x4F	; 79
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
	 return PANGET_NOK;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	01 c0       	rjmp	.+2      	; 0x266 <APP_terminalPanGet+0x4e>
	}
	return PANGET_OK;
 264:	81 e0       	ldi	r24, 0x01	; 1
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <SaveCardData>:
 * \param Uchar8_t *CardPan :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Contain User Pan String
 * \param Uchar8_t *CardPin :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Contain User Pin String
 * \return EN_TerminalDataState : This Is Enum For Terminal Data State
 */
EN_TerminalDataState SaveCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
	EN_TerminalDataState ret = DATA_NSAVED; 
	if(CardPan == null || CardPin == null) // Check If The Pointers Is Equal Null Or Not Equal
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	71 f1       	breq	.+92     	; 0x2d0 <SaveCardData+0x64>
 274:	61 15       	cp	r22, r1
 276:	71 05       	cpc	r23, r1
 278:	69 f1       	breq	.+90     	; 0x2d4 <SaveCardData+0x68>
 27a:	eb 01       	movw	r28, r22
 27c:	bc 01       	movw	r22, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	8f e4       	ldi	r24, 0x4F	; 79
 280:	93 ec       	ldi	r25, 0xC3	; 195
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <SaveCardData+0x16>
 286:	00 c0       	rjmp	.+0      	; 0x288 <SaveCardData+0x1c>
 288:	00 00       	nop
		ret = DATA_NSAVED; // If Equal Null Then Return DATA_NSAVED From Terminal Data State Enum
	}
	else
	{
		_delay_ms(200);
		eeprom_write_string(PAN_PAGE,CardPan);// Call This Function To Write In The EEPROM And Give To It The Address & Pointer Point To The Pan Array 
 28a:	80 e6       	ldi	r24, 0x60	; 96
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 1f 02 	call	0x43e	; 0x43e <eeprom_write_string>
 292:	8f e4       	ldi	r24, 0x4F	; 79
 294:	93 ec       	ldi	r25, 0xC3	; 195
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <SaveCardData+0x2a>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <SaveCardData+0x30>
 29c:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(PIN_PAGE,CardPin);// Call This Function To Write In The EEPROM And Give To It The Address & Pointer Point To The Pin Array
 29e:	be 01       	movw	r22, r28
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 1f 02 	call	0x43e	; 0x43e <eeprom_write_string>
 2a8:	8f e4       	ldi	r24, 0x4F	; 79
 2aa:	93 ec       	ldi	r25, 0xC3	; 195
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <SaveCardData+0x40>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <SaveCardData+0x46>
 2b2:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(FLAG_PAGE, (Uchar8_t*)"1");// Call This Function To Write In The EEPROM And Give To It The Address & The Data 
 2b4:	67 e8       	ldi	r22, 0x87	; 135
 2b6:	71 e0       	ldi	r23, 0x01	; 1
 2b8:	80 e2       	ldi	r24, 0x20	; 32
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 1f 02 	call	0x43e	; 0x43e <eeprom_write_string>
 2c0:	8f e4       	ldi	r24, 0x4F	; 79
 2c2:	93 ec       	ldi	r25, 0xC3	; 195
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <SaveCardData+0x58>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <SaveCardData+0x5e>
 2ca:	00 00       	nop
		_delay_ms(200);
		ret = DATA_SAVED;//Return DATA_NSAVED From Terminal Data State 
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <SaveCardData+0x6a>
EN_TerminalDataState SaveCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
	EN_TerminalDataState ret = DATA_NSAVED; 
	if(CardPan == null || CardPin == null) // Check If The Pointers Is Equal Null Or Not Equal
	{
		ret = DATA_NSAVED; // If Equal Null Then Return DATA_NSAVED From Terminal Data State Enum
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <SaveCardData+0x6a>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
		_delay_ms(200);
		ret = DATA_SAVED;//Return DATA_NSAVED From Terminal Data State 
	}
	
	return ret;
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <ReadCardData>:
 * \param Uchar8_t *CardPan :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Function Will Return User Pan String In It
 * \param Uchar8_t *CardPin :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Function Will Return User Pin String In It
 * \return EN_TerminalDataState : This Is Enum For Terminal Data State 
 */
EN_TerminalDataState ReadCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)// Check If The Pointers Is Equal Null Or Not Equal
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	e1 f0       	breq	.+56     	; 0x31c <ReadCardData+0x40>
 2e4:	61 15       	cp	r22, r1
 2e6:	71 05       	cpc	r23, r1
 2e8:	d9 f0       	breq	.+54     	; 0x320 <ReadCardData+0x44>
 2ea:	eb 01       	movw	r28, r22
 2ec:	bc 01       	movw	r22, r24
		{
			ret = DATA_NREAD;// If Equal Null Then Return DATA_NREAD From Terminal Data State Enum
		}
		else
		{			
			eeprom_read_string(PAN_PAGE , CardPan);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pan Array 
 2ee:	80 e6       	ldi	r24, 0x60	; 96
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_read_string>
 2f6:	8f e4       	ldi	r24, 0x4F	; 79
 2f8:	93 ec       	ldi	r25, 0xC3	; 195
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <ReadCardData+0x1e>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <ReadCardData+0x24>
 300:	00 00       	nop
			_delay_ms(200);
			eeprom_read_string(PIN_PAGE , CardPin);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pin Array
 302:	be 01       	movw	r22, r28
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 4a 02 	call	0x494	; 0x494 <eeprom_read_string>
 30c:	8f e4       	ldi	r24, 0x4F	; 79
 30e:	93 ec       	ldi	r25, 0xC3	; 195
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <ReadCardData+0x34>
 314:	00 c0       	rjmp	.+0      	; 0x316 <ReadCardData+0x3a>
 316:	00 00       	nop
			_delay_ms(200);
			ret = DATA_READ;//Return DATA_READ From Terminal Data State 
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	03 c0       	rjmp	.+6      	; 0x322 <ReadCardData+0x46>
{
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)// Check If The Pointers Is Equal Null Or Not Equal
		{
			ret = DATA_NREAD;// If Equal Null Then Return DATA_NREAD From Terminal Data State Enum
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	01 c0       	rjmp	.+2      	; 0x322 <ReadCardData+0x46>
 320:	83 e0       	ldi	r24, 0x03	; 3
			eeprom_read_string(PIN_PAGE , CardPin);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pin Array
			_delay_ms(200);
			ret = DATA_READ;//Return DATA_READ From Terminal Data State 
		}
		return ret;
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <CARD_MatchPINs>:

en_CardPinMatchError_t CARD_MatchPINs()
{
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	2a 97       	sbiw	r28, 0x0a	; 10
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
	Uchar8_t PIN_Confirm[10], u8_l_PINiterator;
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\n\rEnter your PIN : ");
 33e:	89 e8       	ldi	r24, 0x89	; 137
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
	u8_l_ValidatePIN = APP_terminalPinGet(pin_arr);
 346:	89 ee       	ldi	r24, 0xE9	; 233
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <APP_terminalPinGet>
 34e:	18 2f       	mov	r17, r24
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 350:	88 23       	and	r24, r24
 352:	71 f1       	breq	.+92     	; 0x3b0 <CARD_MatchPINs+0x88>
	/* Get PIN again for Confirmation */
	HUSART_sendSTRING((Uchar8_t *)"\n\rConfirm Your PIN : ");
 354:	8d e9       	ldi	r24, 0x9D	; 157
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <APP_terminalPinGet>
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
 364:	11 30       	cpi	r17, 0x01	; 1
 366:	31 f5       	brne	.+76     	; 0x3b4 <CARD_MatchPINs+0x8c>
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	c9 f0       	breq	.+50     	; 0x39e <CARD_MatchPINs+0x76>
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	23 c0       	rjmp	.+70     	; 0x3b6 <CARD_MatchPINs+0x8e>
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
		{
			if(pin_arr[u8_l_PINiterator] != PIN_Confirm[u8_l_PINiterator])
 370:	82 2f       	mov	r24, r18
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	fc 01       	movw	r30, r24
 376:	e7 51       	subi	r30, 0x17	; 23
 378:	fe 4f       	sbci	r31, 0xFE	; 254
 37a:	30 81       	ld	r19, Z
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ec 0f       	add	r30, r28
 382:	fd 1f       	adc	r31, r29
 384:	e8 0f       	add	r30, r24
 386:	f9 1f       	adc	r31, r25
 388:	80 81       	ld	r24, Z
 38a:	38 17       	cp	r19, r24
 38c:	31 f0       	breq	.+12     	; 0x39a <CARD_MatchPINs+0x72>
			{
				HUSART_sendSTRING((Uchar8_t *)"\n\rPin Not Matched");
 38e:	83 eb       	ldi	r24, 0xB3	; 179
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
				return PIN_Match_NOK;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e c0       	rjmp	.+28     	; 0x3b6 <CARD_MatchPINs+0x8e>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
 39a:	2f 5f       	subi	r18, 0xFF	; 255
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <CARD_MatchPINs+0x78>
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	25 30       	cpi	r18, 0x05	; 5
 3a2:	30 f3       	brcs	.-52     	; 0x370 <CARD_MatchPINs+0x48>
				HUSART_sendSTRING((Uchar8_t *)"\n\rPin Not Matched");
				return PIN_Match_NOK;
			}
		}
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
 3a4:	85 ec       	ldi	r24, 0xC5	; 197
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 c6 02 	call	0x58c	; 0x58c <HUSART_sendSTRING>
		return PIN_Match_OK;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <CARD_MatchPINs+0x8e>
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\n\rEnter your PIN : ");
	u8_l_ValidatePIN = APP_terminalPinGet(pin_arr);
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <CARD_MatchPINs+0x8e>
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
}
 3b6:	2a 96       	adiw	r28, 0x0a	; 10
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	08 95       	ret

000003ca <eeprom_init>:
*
* \return void
*/
void eeprom_init(void)
{
	i2c_init_master(); // call function that init I2c Master
 3ca:	0e 94 51 03 	call	0x6a2	; 0x6a2 <i2c_init_master>
 3ce:	08 95       	ret

000003d0 <eeprom_write_byte>:
*		 : Uchar8_t data : This Is Data That Will Be Write	
*
* \return void
*/
void eeprom_write_byte(Uint16_t address, Uchar8_t data)  
{
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	d8 2f       	mov	r29, r24
 3d8:	19 2f       	mov	r17, r25
 3da:	c6 2f       	mov	r28, r22
	
	i2c_start(); // Send Start Bit On I2c
 3dc:	0e 94 5f 03 	call	0x6be	; 0x6be <i2c_start>
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
 3e0:	80 e5       	ldi	r24, 0x50	; 80
 3e2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <i2c_send_slave_address_with_write_req>
	i2c_write_byte(address >> 8); // Write Byte Contain Device Address Shifted By 8 On I2c
 3e6:	81 2f       	mov	r24, r17
 3e8:	0e 94 91 03 	call	0x722	; 0x722 <i2c_write_byte>
	i2c_write_byte(address); // Write Byte Contain Device Address On I2c
 3ec:	8d 2f       	mov	r24, r29
 3ee:	0e 94 91 03 	call	0x722	; 0x722 <i2c_write_byte>
	i2c_write_byte(data); // Write Byte Contain Data On I2c
 3f2:	8c 2f       	mov	r24, r28
 3f4:	0e 94 91 03 	call	0x722	; 0x722 <i2c_write_byte>
	i2c_stop(); // Send Stop Bit On I2c
 3f8:	0e 94 a0 03 	call	0x740	; 0x740 <i2c_stop>
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	1f 91       	pop	r17
 402:	08 95       	ret

00000404 <eeprom_read_byte>:
* \param : Uint16_t address : This Is Device Address	
*
* \return Uchar8_t : Function Will Return Uchar8_t Contain The Data
*/
Uchar8_t eeprom_read_byte(Uint16_t address)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	c8 2f       	mov	r28, r24
 40a:	d9 2f       	mov	r29, r25
	Uchar8_t data = 0;
	i2c_start();// Send Start Bit On I2c
 40c:	0e 94 5f 03 	call	0x6be	; 0x6be <i2c_start>
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
 410:	80 e5       	ldi	r24, 0x50	; 80
 412:	0e 94 73 03 	call	0x6e6	; 0x6e6 <i2c_send_slave_address_with_write_req>
	i2c_write_byte(address >> 8);// Write Byte Contain Device Address Shifted By 8 On I2c
 416:	8d 2f       	mov	r24, r29
 418:	0e 94 91 03 	call	0x722	; 0x722 <i2c_write_byte>
	i2c_write_byte(address & 0xFF);// Write Byte Contain Device Address On I2c
 41c:	8c 2f       	mov	r24, r28
 41e:	0e 94 91 03 	call	0x722	; 0x722 <i2c_write_byte>
	i2c_repeated_start();// Send Repeated Start Bit On I2c
 422:	0e 94 69 03 	call	0x6d2	; 0x6d2 <i2c_repeated_start>
	i2c_send_slave_address_with_read_req(0x50);// Send Slave Address With Read Bit On I2c
 426:	80 e5       	ldi	r24, 0x50	; 80
 428:	0e 94 82 03 	call	0x704	; 0x704 <i2c_send_slave_address_with_read_req>
	data = i2c_read_byte_nack();// Read Byte Contain Data On I2c With No Ack
 42c:	0e 94 a3 03 	call	0x746	; 0x746 <i2c_read_byte_nack>
 430:	c8 2f       	mov	r28, r24
	i2c_stop();// Send Stop Bit On I2c
 432:	0e 94 a0 03 	call	0x740	; 0x740 <i2c_stop>
	return data;//Return The Data That Been Read 
}
 436:	8c 2f       	mov	r24, r28
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <eeprom_write_string>:
* \param : Uint16_t address : This Is Device Address
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars
* \return  Void
*/
void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
 43e:	ef 92       	push	r14
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	7b 01       	movw	r14, r22
	Uchar8_t i = 0;
 44a:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0') // Loop Until The End Of The String
 44c:	0e c0       	rjmp	.+28     	; 0x46a <eeprom_write_string+0x2c>
 44e:	a3 ed       	ldi	r26, 0xD3	; 211
 450:	b0 e3       	ldi	r27, 0x30	; 48
 452:	11 97       	sbiw	r26, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <eeprom_write_string+0x14>
 456:	00 c0       	rjmp	.+0      	; 0x458 <eeprom_write_string+0x1a>
 458:	00 00       	nop
	{
		_delay_ms(50);
		eeprom_write_byte(Copy_u8Address++,str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
 45a:	cf 5f       	subi	r28, 0xFF	; 255
 45c:	8c 01       	movw	r16, r24
 45e:	0f 5f       	subi	r16, 0xFF	; 255
 460:	1f 4f       	sbci	r17, 0xFF	; 255
 462:	60 81       	ld	r22, Z
 464:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <eeprom_write_byte>
 468:	c8 01       	movw	r24, r16
* \return  Void
*/
void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
	Uchar8_t i = 0;
	while(str[i] != '\0') // Loop Until The End Of The String
 46a:	f7 01       	movw	r30, r14
 46c:	ec 0f       	add	r30, r28
 46e:	f1 1d       	adc	r31, r1
 470:	20 81       	ld	r18, Z
 472:	21 11       	cpse	r18, r1
 474:	ec cf       	rjmp	.-40     	; 0x44e <eeprom_write_string+0x10>
 476:	e3 ed       	ldi	r30, 0xD3	; 211
 478:	f0 e3       	ldi	r31, 0x30	; 48
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <eeprom_write_string+0x3c>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <eeprom_write_string+0x42>
 480:	00 00       	nop
	{
		_delay_ms(50);
		eeprom_write_byte(Copy_u8Address++,str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
	}
	_delay_ms(50);
	eeprom_write_byte(Copy_u8Address++,'\0');//Call This Function To Write Null After The Last Char Of The String To Know Where The String Is End
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <eeprom_write_byte>
}
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	08 95       	ret

00000494 <eeprom_read_string>:
* \param : Uint16_t address : This Is Device Address
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars That Will Return String In It
* \return  Void
*/
void eeprom_read_string(Uint16_t Copy_u8Address, Uchar8_t* str)
{
 494:	cf 92       	push	r12
 496:	df 92       	push	r13
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	6b 01       	movw	r12, r22
	Uchar8_t len = 0;
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	e3 ed       	ldi	r30, 0xD3	; 211
 4a8:	f0 e3       	ldi	r31, 0x30	; 48
 4aa:	31 97       	sbiw	r30, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <eeprom_read_string+0x16>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <eeprom_read_string+0x1c>
 4b0:	00 00       	nop
	do
	{
		_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 4b2:	76 01       	movw	r14, r12
 4b4:	ec 0e       	add	r14, r28
 4b6:	f1 1c       	adc	r15, r1
 4b8:	8c 01       	movw	r16, r24
 4ba:	0f 5f       	subi	r16, 0xFF	; 255
 4bc:	1f 4f       	sbci	r17, 0xFF	; 255
 4be:	0e 94 02 02 	call	0x404	; 0x404 <eeprom_read_byte>
 4c2:	28 2f       	mov	r18, r24
 4c4:	f7 01       	movw	r30, r14
 4c6:	80 83       	st	Z, r24
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 4c8:	cf 5f       	subi	r28, 0xFF	; 255
{
	Uchar8_t len = 0;
	do
	{
		_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 4ca:	c8 01       	movw	r24, r16
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 4cc:	21 11       	cpse	r18, r1
 4ce:	eb cf       	rjmp	.-42     	; 0x4a6 <eeprom_read_string+0x12>
}
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	08 95       	ret

000004e0 <HSPI_SlaveInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;
}
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	8d e0       	ldi	r24, 0x0D	; 13
 4e4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_s8SETPinDir>
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	8f e0       	ldi	r24, 0x0F	; 15
 4ec:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_s8SETPinDir>
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	8c e0       	ldi	r24, 0x0C	; 12
 4f4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_s8SETPinDir>
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	8c e0       	ldi	r24, 0x0C	; 12
 4fc:	0e 94 11 03 	call	0x622	; 0x622 <DIO_s8SETPinVal>
 500:	61 e0       	ldi	r22, 0x01	; 1
 502:	8e e0       	ldi	r24, 0x0E	; 14
 504:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_s8SETPinDir>
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	88 e0       	ldi	r24, 0x08	; 8
 50c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <DIO_s8SETPinDir>
 510:	0e 94 ae 03 	call	0x75c	; 0x75c <SPI_SlaveInit>
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	8c e0       	ldi	r24, 0x0C	; 12
 518:	0e 94 11 03 	call	0x622	; 0x622 <DIO_s8SETPinVal>
 51c:	08 95       	ret

0000051e <HSPI_MasterTrigger>:
}

void HSPI_MasterTrigger(void)
{
	/* Send Request to Master */
	DIO_s8SETPinVal(SLAVE_SEND_REQUEST_PIN, HIGH);
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	0e 94 11 03 	call	0x622	; 0x622 <DIO_s8SETPinVal>
 526:	83 ec       	ldi	r24, 0xC3	; 195
 528:	99 e0       	ldi	r25, 0x09	; 9
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <HSPI_MasterTrigger+0xc>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <HSPI_MasterTrigger+0x12>
 530:	00 00       	nop
	_delay_ms(10);
	DIO_s8SETPinVal(SLAVE_SEND_REQUEST_PIN, LOW);
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	88 e0       	ldi	r24, 0x08	; 8
 536:	0e 94 11 03 	call	0x622	; 0x622 <DIO_s8SETPinVal>
 53a:	08 95       	ret

0000053c <HSPI_SlaveRequest>:
 * \return void
 */
void HSPI_SlaveRequest(Uchar8_t* pu8_a_dataPtr, Uchar8_t u8_a_DataSize)
{
	/* Reset transmission data index */
	u8_g_SlaveTxIndex = 0;
 53c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <u8_g_SlaveTxIndex>
	
	/* Set global transmission data ptr to point to given data */
	pu8_g_SlaveTxPtr = pu8_a_dataPtr;
 540:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <pu8_g_SlaveTxPtr+0x1>
 544:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <pu8_g_SlaveTxPtr>
	
	u8_g_SlaveTxLen = u8_a_DataSize;
 548:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <u8_g_SlaveTxLen>
	/* Set the Data register with value */
	//SPI_SetValue(pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++]);

	/* Send Request to Master */
	//DIO_s8TOGPinVal(SLAVE_SEND_REQUEST_PIN);
HSPI_MasterTrigger();
 54c:	0e 94 8f 02 	call	0x51e	; 0x51e <HSPI_MasterTrigger>
 550:	08 95       	ret

00000552 <HSPI_SlaveSetData>:
}

void HSPI_SlaveSetData(Uchar8_t* pu8_a_dataPtr, Uchar8_t u8_a_DataSize)
{
	/* Reset transmission data index */
	u8_g_SlaveTxIndex = 0;
 552:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <u8_g_SlaveTxIndex>
	
	/* Set global transmission data ptr to point to given data */
	pu8_g_SlaveTxPtr = pu8_a_dataPtr;
 556:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <pu8_g_SlaveTxPtr+0x1>
 55a:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <pu8_g_SlaveTxPtr>
	
	u8_g_SlaveTxLen = u8_a_DataSize;
 55e:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <u8_g_SlaveTxLen>
 562:	08 95       	ret

00000564 <HUSART_enInit>:
#include "husart.h"


EN_USART_ERROR HUSART_enInit(void)
{
	if(USART_init())return USART_NOT_OK;
 564:	0e 94 09 04 	call	0x812	; 0x812 <USART_init>
 568:	81 11       	cpse	r24, r1
 56a:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
 56c:	08 95       	ret

0000056e <HUSART_enSendData>:
EN_USART_ERROR HUSART_enSendData(Uchar8_t Copy_u8DataH)
{
	if(USART_sendData(Copy_u8DataH))return USART_NOT_OK;
 56e:	0e 94 15 04 	call	0x82a	; 0x82a <USART_sendData>
 572:	81 11       	cpse	r24, r1
 574:	81 e0       	ldi	r24, 0x01	; 1
	return USART_OK;
}
 576:	08 95       	ret

00000578 <HUSART_enRecieveData>:
EN_USART_ERROR HUSART_enRecieveData(Uchar8_t* Ref_u8DataH)
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	ec 01       	movw	r28, r24
	*Ref_u8DataH = USART_receiveData();
 57e:	0e 94 1a 04 	call	0x834	; 0x834 <USART_receiveData>
 582:	88 83       	st	Y, r24
	return USART_OK;
}
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <HUSART_sendSTRING>:

void HUSART_sendSTRING(Uchar8_t * Hstr)
{
	USART_sendSTRING(Hstr);
 58c:	0e 94 1e 04 	call	0x83c	; 0x83c <USART_sendSTRING>
 590:	08 95       	ret

00000592 <HUSART_receiveSTRING>:
}
void HUSART_receiveSTRING(Uchar8_t * Hstr ,Uchar8_t Hsize )
{
	USART_receiveSTRING(Hstr,Hsize);
 592:	0e 94 31 04 	call	0x862	; 0x862 <USART_receiveSTRING>
 596:	08 95       	ret

00000598 <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
int main(void)
{
	APP_Init();
 598:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
    while (1) 
    {
      APP_Start();
 59c:	0e 94 51 00 	call	0xa2	; 0xa2 <APP_Start>
 5a0:	fd cf       	rjmp	.-6      	; 0x59c <main+0x4>

000005a2 <DIO_s8SETPinDir>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortDir< DIR_INVALID)
 5a2:	80 32       	cpi	r24, 0x20	; 32
 5a4:	c0 f5       	brcc	.+112    	; 0x616 <DIO_s8SETPinDir+0x74>
 5a6:	62 30       	cpi	r22, 0x02	; 2
 5a8:	c0 f5       	brcc	.+112    	; 0x61a <DIO_s8SETPinDir+0x78>
	{
		portID = enPinCopy/8;
 5aa:	e8 2f       	mov	r30, r24
 5ac:	e6 95       	lsr	r30
 5ae:	e6 95       	lsr	r30
 5b0:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 5b2:	87 70       	andi	r24, 0x07	; 7

		if (enPortDir == INPUT)
 5b4:	61 11       	cpse	r22, r1
 5b6:	17 c0       	rjmp	.+46     	; 0x5e6 <DIO_s8SETPinDir+0x44>
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	ee 0f       	add	r30, r30
 5bc:	ff 1f       	adc	r31, r31
 5be:	e0 5a       	subi	r30, 0xA0	; 160
 5c0:	ff 4f       	sbci	r31, 0xFF	; 255
 5c2:	01 90       	ld	r0, Z+
 5c4:	f0 81       	ld	r31, Z
 5c6:	e0 2d       	mov	r30, r0
 5c8:	40 81       	ld	r20, Z
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_s8SETPinDir+0x34>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_s8SETPinDir+0x30>
 5da:	cb 01       	movw	r24, r22
 5dc:	80 95       	com	r24
 5de:	84 23       	and	r24, r20
 5e0:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	08 95       	ret

		if (enPortDir == INPUT)
		{
			CLEAR_BIT(*ddrReg[portID],pinID);
		}
		else if(enPortDir == OUTPUT)
 5e6:	61 30       	cpi	r22, 0x01	; 1
 5e8:	d1 f4       	brne	.+52     	; 0x61e <DIO_s8SETPinDir+0x7c>
		{
			SET_BIT(*ddrReg[portID],pinID);
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	e0 5a       	subi	r30, 0xA0	; 160
 5f2:	ff 4f       	sbci	r31, 0xFF	; 255
 5f4:	01 90       	ld	r0, Z+
 5f6:	f0 81       	ld	r31, Z
 5f8:	e0 2d       	mov	r30, r0
 5fa:	40 81       	ld	r20, Z
 5fc:	21 e0       	ldi	r18, 0x01	; 1
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	b9 01       	movw	r22, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_s8SETPinDir+0x66>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	8a 95       	dec	r24
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_s8SETPinDir+0x62>
 60c:	cb 01       	movw	r24, r22
 60e:	84 2b       	or	r24, r20
 610:	80 83       	st	Z, r24



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	08 95       	ret
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	08 95       	ret



Uchar8_t DIO_s8SETPinDir (enu_pin enPinCopy, enu_dir enPortDir)
{
	Uchar8_t errStatus = E_OK;
 61e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 620:	08 95       	ret

00000622 <DIO_s8SETPinVal>:
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;

	if (enPinCopy < PIN_INVALID && enPortVal< VAL_INVALID)
 622:	80 32       	cpi	r24, 0x20	; 32
 624:	c0 f5       	brcc	.+112    	; 0x696 <DIO_s8SETPinVal+0x74>
 626:	62 30       	cpi	r22, 0x02	; 2
 628:	c0 f5       	brcc	.+112    	; 0x69a <DIO_s8SETPinVal+0x78>
	{
		portID = enPinCopy/8;
 62a:	e8 2f       	mov	r30, r24
 62c:	e6 95       	lsr	r30
 62e:	e6 95       	lsr	r30
 630:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
 632:	87 70       	andi	r24, 0x07	; 7

		if (enPortVal == LOW)
 634:	61 11       	cpse	r22, r1
 636:	17 c0       	rjmp	.+46     	; 0x666 <DIO_s8SETPinVal+0x44>
		{
			CLEAR_BIT(*portReg[portID],pinID);
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	ee 0f       	add	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	e8 59       	subi	r30, 0x98	; 152
 640:	ff 4f       	sbci	r31, 0xFF	; 255
 642:	01 90       	ld	r0, Z+
 644:	f0 81       	ld	r31, Z
 646:	e0 2d       	mov	r30, r0
 648:	40 81       	ld	r20, Z
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	b9 01       	movw	r22, r18
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_s8SETPinVal+0x34>
 652:	66 0f       	add	r22, r22
 654:	77 1f       	adc	r23, r23
 656:	8a 95       	dec	r24
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_s8SETPinVal+0x30>
 65a:	cb 01       	movw	r24, r22
 65c:	80 95       	com	r24
 65e:	84 23       	and	r24, r20
 660:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret

		if (enPortVal == LOW)
		{
			CLEAR_BIT(*portReg[portID],pinID);
		}
		else if(enPortVal == HIGH)
 666:	61 30       	cpi	r22, 0x01	; 1
 668:	d1 f4       	brne	.+52     	; 0x69e <DIO_s8SETPinVal+0x7c>
		{
			SET_BIT(*portReg[portID],pinID);
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	e8 59       	subi	r30, 0x98	; 152
 672:	ff 4f       	sbci	r31, 0xFF	; 255
 674:	01 90       	ld	r0, Z+
 676:	f0 81       	ld	r31, Z
 678:	e0 2d       	mov	r30, r0
 67a:	40 81       	ld	r20, Z
 67c:	21 e0       	ldi	r18, 0x01	; 1
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	b9 01       	movw	r22, r18
 682:	02 c0       	rjmp	.+4      	; 0x688 <DIO_s8SETPinVal+0x66>
 684:	66 0f       	add	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	8a 95       	dec	r24
 68a:	e2 f7       	brpl	.-8      	; 0x684 <DIO_s8SETPinVal+0x62>
 68c:	cb 01       	movw	r24, r22
 68e:	84 2b       	or	r24, r20
 690:	80 83       	st	Z, r24
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	08 95       	ret
			/* do nothing */
		}
	}
	else
	{
		errStatus = E_NOK;
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	08 95       	ret
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	08 95       	ret
}


Uchar8_t DIO_s8SETPinVal (enu_pin enPinCopy, enu_val enPortVal)
{
	Uchar8_t errStatus = E_OK;
 69e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		errStatus = E_NOK;
	}
	return errStatus;
}
 6a0:	08 95       	ret

000006a2 <i2c_init_master>:
	SET_BIT(TWCR, TWEN);
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
	/* Waiting if this condition becoming true */
	while ( (TWSR & 0xF8) != SLAVE_BYTE_TRANSMITTED );
}
 6a2:	81 b1       	in	r24, 0x01	; 1
 6a4:	8e 7f       	andi	r24, 0xFE	; 254
 6a6:	81 b9       	out	0x01, r24	; 1
 6a8:	81 b1       	in	r24, 0x01	; 1
 6aa:	8d 7f       	andi	r24, 0xFD	; 253
 6ac:	81 b9       	out	0x01, r24	; 1
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	80 b9       	out	0x00, r24	; 0
 6b2:	80 ea       	ldi	r24, 0xA0	; 160
 6b4:	82 b9       	out	0x02, r24	; 2
 6b6:	86 b7       	in	r24, 0x36	; 54
 6b8:	84 60       	ori	r24, 0x04	; 4
 6ba:	86 bf       	out	0x36, r24	; 54
 6bc:	08 95       	ret

000006be <i2c_start>:
 6be:	84 ea       	ldi	r24, 0xA4	; 164
 6c0:	86 bf       	out	0x36, r24	; 54
 6c2:	06 b6       	in	r0, 0x36	; 54
 6c4:	07 fe       	sbrs	r0, 7
 6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <i2c_start+0x4>
 6c8:	81 b1       	in	r24, 0x01	; 1
 6ca:	88 7f       	andi	r24, 0xF8	; 248
 6cc:	88 30       	cpi	r24, 0x08	; 8
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <i2c_start+0xa>
 6d0:	08 95       	ret

000006d2 <i2c_repeated_start>:
 6d2:	84 ea       	ldi	r24, 0xA4	; 164
 6d4:	86 bf       	out	0x36, r24	; 54
 6d6:	06 b6       	in	r0, 0x36	; 54
 6d8:	07 fe       	sbrs	r0, 7
 6da:	fd cf       	rjmp	.-6      	; 0x6d6 <i2c_repeated_start+0x4>
 6dc:	81 b1       	in	r24, 0x01	; 1
 6de:	88 7f       	andi	r24, 0xF8	; 248
 6e0:	80 31       	cpi	r24, 0x10	; 16
 6e2:	e1 f7       	brne	.-8      	; 0x6dc <i2c_repeated_start+0xa>
 6e4:	08 95       	ret

000006e6 <i2c_send_slave_address_with_write_req>:
 6e6:	88 0f       	add	r24, r24
 6e8:	83 b9       	out	0x03, r24	; 3
 6ea:	83 b1       	in	r24, 0x03	; 3
 6ec:	8e 7f       	andi	r24, 0xFE	; 254
 6ee:	83 b9       	out	0x03, r24	; 3
 6f0:	84 e8       	ldi	r24, 0x84	; 132
 6f2:	86 bf       	out	0x36, r24	; 54
 6f4:	06 b6       	in	r0, 0x36	; 54
 6f6:	07 fe       	sbrs	r0, 7
 6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <i2c_send_slave_address_with_write_req+0xe>
 6fa:	81 b1       	in	r24, 0x01	; 1
 6fc:	88 7f       	andi	r24, 0xF8	; 248
 6fe:	88 31       	cpi	r24, 0x18	; 24
 700:	e1 f7       	brne	.-8      	; 0x6fa <i2c_send_slave_address_with_write_req+0x14>
 702:	08 95       	ret

00000704 <i2c_send_slave_address_with_read_req>:
 704:	88 0f       	add	r24, r24
 706:	83 b9       	out	0x03, r24	; 3
 708:	83 b1       	in	r24, 0x03	; 3
 70a:	81 60       	ori	r24, 0x01	; 1
 70c:	83 b9       	out	0x03, r24	; 3
 70e:	84 e8       	ldi	r24, 0x84	; 132
 710:	86 bf       	out	0x36, r24	; 54
 712:	06 b6       	in	r0, 0x36	; 54
 714:	07 fe       	sbrs	r0, 7
 716:	fd cf       	rjmp	.-6      	; 0x712 <i2c_send_slave_address_with_read_req+0xe>
 718:	81 b1       	in	r24, 0x01	; 1
 71a:	88 7f       	andi	r24, 0xF8	; 248
 71c:	80 34       	cpi	r24, 0x40	; 64
 71e:	e1 f7       	brne	.-8      	; 0x718 <i2c_send_slave_address_with_read_req+0x14>
 720:	08 95       	ret

00000722 <i2c_write_byte>:
 722:	83 b9       	out	0x03, r24	; 3
 724:	86 b7       	in	r24, 0x36	; 54
 726:	80 68       	ori	r24, 0x80	; 128
 728:	86 bf       	out	0x36, r24	; 54
 72a:	86 b7       	in	r24, 0x36	; 54
 72c:	84 60       	ori	r24, 0x04	; 4
 72e:	86 bf       	out	0x36, r24	; 54
 730:	06 b6       	in	r0, 0x36	; 54
 732:	07 fe       	sbrs	r0, 7
 734:	fd cf       	rjmp	.-6      	; 0x730 <i2c_write_byte+0xe>
 736:	81 b1       	in	r24, 0x01	; 1
 738:	88 7f       	andi	r24, 0xF8	; 248
 73a:	88 32       	cpi	r24, 0x28	; 40
 73c:	e1 f7       	brne	.-8      	; 0x736 <i2c_write_byte+0x14>
 73e:	08 95       	ret

00000740 <i2c_stop>:
 740:	84 e9       	ldi	r24, 0x94	; 148
 742:	86 bf       	out	0x36, r24	; 54
 744:	08 95       	ret

00000746 <i2c_read_byte_nack>:


Uchar8_t i2c_read_byte_nack(void)
{
	/* Clear TWINT flag */
	SET_BIT(TWCR, TWINT);
 746:	86 b7       	in	r24, 0x36	; 54
 748:	80 68       	ori	r24, 0x80	; 128
 74a:	86 bf       	out	0x36, r24	; 54

	/* Enable I2C peripheral */
	SET_BIT(TWCR, TWEN);
 74c:	86 b7       	in	r24, 0x36	; 54
 74e:	84 60       	ori	r24, 0x04	; 4
 750:	86 bf       	out	0x36, r24	; 54
	
	/* Waiting for TWINT flag to be set */
	while ( !(GET_BIT(TWCR,TWINT)) );
 752:	06 b6       	in	r0, 0x36	; 54
 754:	07 fe       	sbrs	r0, 7
 756:	fd cf       	rjmp	.-6      	; 0x752 <i2c_read_byte_nack+0xc>

	return TWDR;
 758:	83 b1       	in	r24, 0x03	; 3
}
 75a:	08 95       	ret

0000075c <SPI_SlaveInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
 75c:	8d b1       	in	r24, 0x0d	; 13
 75e:	8f 7e       	andi	r24, 0xEF	; 239
 760:	8d b9       	out	0x0d, r24	; 13
 762:	8d b1       	in	r24, 0x0d	; 13
 764:	87 7f       	andi	r24, 0xF7	; 247
 766:	8d b9       	out	0x0d, r24	; 13
 768:	8d b1       	in	r24, 0x0d	; 13
 76a:	8b 7f       	andi	r24, 0xFB	; 251
 76c:	8d b9       	out	0x0d, r24	; 13
 76e:	8d b1       	in	r24, 0x0d	; 13
 770:	80 68       	ori	r24, 0x80	; 128
 772:	8d b9       	out	0x0d, r24	; 13
 774:	8d b1       	in	r24, 0x0d	; 13
 776:	80 64       	ori	r24, 0x40	; 64
 778:	8d b9       	out	0x0d, r24	; 13
 77a:	08 95       	ret

0000077c <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
 77c:	1f 92       	push	r1
 77e:	0f 92       	push	r0
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	0f 92       	push	r0
 784:	11 24       	eor	r1, r1
 786:	2f 93       	push	r18
 788:	3f 93       	push	r19
 78a:	8f 93       	push	r24
 78c:	9f 93       	push	r25
 78e:	ef 93       	push	r30
 790:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
 792:	8f b1       	in	r24, 0x0f	; 15
 794:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
 798:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <u8_g_SlaveRxIndex>
 79c:	9f 30       	cpi	r25, 0x0F	; 15
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__vector_12+0x28>
 7a0:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
 7a4:	83 32       	cpi	r24, 0x23	; 35
 7a6:	59 f0       	breq	.+22     	; 0x7be <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
 7a8:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <u8_g_SlaveRxIndex>
 7ac:	e9 2f       	mov	r30, r25
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	e2 51       	subi	r30, 0x12	; 18
 7b2:	fe 4f       	sbci	r31, 0xFE	; 254
 7b4:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
 7b6:	9f 5f       	subi	r25, 0xFF	; 255
 7b8:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <u8_g_SlaveRxIndex>
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
 7be:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <u8_g_SlaveRxIndex>
 7c2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != null))
 7c6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <u8_g_SlaveTxIndex>
 7ca:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <u8_g_SlaveTxLen>
 7ce:	89 17       	cp	r24, r25
 7d0:	88 f4       	brcc	.+34     	; 0x7f4 <__vector_12+0x78>
 7d2:	20 91 fd 01 	lds	r18, 0x01FD	; 0x8001fd <pu8_g_SlaveTxPtr>
 7d6:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <pu8_g_SlaveTxPtr+0x1>
 7da:	21 15       	cp	r18, r1
 7dc:	31 05       	cpc	r19, r1
 7de:	51 f0       	breq	.+20     	; 0x7f4 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
 7e0:	91 e0       	ldi	r25, 0x01	; 1
 7e2:	98 0f       	add	r25, r24
 7e4:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <u8_g_SlaveTxIndex>
 7e8:	f9 01       	movw	r30, r18
 7ea:	e8 0f       	add	r30, r24
 7ec:	f1 1d       	adc	r31, r1
 7ee:	80 81       	ld	r24, Z
 7f0:	8f b9       	out	0x0f, r24	; 15
 7f2:	04 c0       	rjmp	.+8      	; 0x7fc <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
 7f4:	89 17       	cp	r24, r25
 7f6:	10 f0       	brcs	.+4      	; 0x7fc <__vector_12+0x80>
	{
		SPDR = DATA_END;
 7f8:	83 e2       	ldi	r24, 0x23	; 35
 7fa:	8f b9       	out	0x0f, r24	; 15
	}
 7fc:	ff 91       	pop	r31
 7fe:	ef 91       	pop	r30
 800:	9f 91       	pop	r25
 802:	8f 91       	pop	r24
 804:	3f 91       	pop	r19
 806:	2f 91       	pop	r18
 808:	0f 90       	pop	r0
 80a:	0f be       	out	0x3f, r0	; 63
 80c:	0f 90       	pop	r0
 80e:	1f 90       	pop	r1
 810:	18 95       	reti

00000812 <USART_init>:
	CLEAR_BIT(UCSRB,UCSZ2);
	
	#elif USART_SET_DATA_SIZE == USART_DATA_SIZE_8
	SET_BIT(UCSRC,UCSZ0);
	SET_BIT(UCSRC,UCSZ1);
	CLEAR_BIT(UCSRB,UCSZ2);
 812:	8a b1       	in	r24, 0x0a	; 10
 814:	8b 7f       	andi	r24, 0xFB	; 251
	
	#endif
	
	/* select USART Speed (Normal,Double) */
	#if USART_SET_SPEED == USART_NORMAL_SPEED
	CLEAR_BIT(UCSRA,U2X);
 816:	9b b1       	in	r25, 0x0b	; 11
 818:	9d 7f       	andi	r25, 0xFD	; 253
 81a:	9b b9       	out	0x0b, r25	; 11
	return USART_NOT_OK;
	
	#endif
	/* Enable Transmit and receive bits in UCSRB*/
	SET_BIT(UCSRB,RXEN);
	SET_BIT(UCSRB,TXEN);
 81c:	88 61       	ori	r24, 0x18	; 24
 81e:	8a b9       	out	0x0a, r24	; 10
	
	/* assign UBRRL and UBRRH with calculated BAUD_PRESCALLER */
	UBRRL = BAUD_PRESCALLER;
 820:	83 e3       	ldi	r24, 0x33	; 51
 822:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALLER>>8);
 824:	10 bc       	out	0x20, r1	; 32
	
   return USART_OK;
}
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	08 95       	ret

0000082a <USART_sendData>:
EN_USART_ERROR USART_sendData(Uchar8_t data)
{
	// WAIT UNTIL ISEMPTY FLAG IS SET
	while(!GET_BIT(UCSRA,UDRE));
 82a:	5d 9b       	sbis	0x0b, 5	; 11
 82c:	fe cf       	rjmp	.-4      	; 0x82a <USART_sendData>
	
	// assign data to UDR register to be sent
	UDR = data;
 82e:	8c b9       	out	0x0c, r24	; 12
	
	return USART_OK;
}
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	08 95       	ret

00000834 <USART_receiveData>:
Uchar8_t USART_receiveData(void)
{
	// WAIT UNTIL Recieve FLAG IS SET
	while(!GET_BIT(UCSRA,RXC));
 834:	5f 9b       	sbis	0x0b, 7	; 11
 836:	fe cf       	rjmp	.-4      	; 0x834 <USART_receiveData>
	return UDR;
}
 838:	8c b1       	in	r24, 0x0c	; 12
 83a:	08 95       	ret

0000083c <USART_sendSTRING>:
void USART_sendSTRING(Uchar8_t * str)
{
 83c:	0f 93       	push	r16
 83e:	1f 93       	push	r17
 840:	cf 93       	push	r28
 842:	8c 01       	movw	r16, r24
	Uchar8_t COUNTER = 0;
 844:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[COUNTER] != null)
 846:	03 c0       	rjmp	.+6      	; 0x84e <USART_sendSTRING+0x12>
	{
		USART_sendData(str[COUNTER]);
 848:	0e 94 15 04 	call	0x82a	; 0x82a <USART_sendData>
		COUNTER++;
 84c:	cf 5f       	subi	r28, 0xFF	; 255
	return UDR;
}
void USART_sendSTRING(Uchar8_t * str)
{
	Uchar8_t COUNTER = 0;
	while(str[COUNTER] != null)
 84e:	f8 01       	movw	r30, r16
 850:	ec 0f       	add	r30, r28
 852:	f1 1d       	adc	r31, r1
 854:	80 81       	ld	r24, Z
 856:	81 11       	cpse	r24, r1
 858:	f7 cf       	rjmp	.-18     	; 0x848 <USART_sendSTRING+0xc>
	{
		USART_sendData(str[COUNTER]);
		COUNTER++;
	}
}
 85a:	cf 91       	pop	r28
 85c:	1f 91       	pop	r17
 85e:	0f 91       	pop	r16
 860:	08 95       	ret

00000862 <USART_receiveSTRING>:
void USART_receiveSTRING(Uchar8_t * str ,Uchar8_t size )
{
 862:	0f 93       	push	r16
 864:	1f 93       	push	r17
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	8c 01       	movw	r16, r24
 86c:	d6 2f       	mov	r29, r22
	Uchar8_t COUNTER = 0;
 86e:	c0 e0       	ldi	r28, 0x00	; 0
	while(COUNTER < size-1)
 870:	0b c0       	rjmp	.+22     	; 0x888 <USART_receiveSTRING+0x26>
	{
		
		str[COUNTER]= USART_receiveData();
 872:	0e 94 1a 04 	call	0x834	; 0x834 <USART_receiveData>
 876:	f8 01       	movw	r30, r16
 878:	ec 0f       	add	r30, r28
 87a:	f1 1d       	adc	r31, r1
 87c:	80 83       	st	Z, r24
		if(str[COUNTER] == ENTER_KEY)break;
 87e:	8d 30       	cpi	r24, 0x0D	; 13
 880:	59 f0       	breq	.+22     	; 0x898 <USART_receiveSTRING+0x36>
		USART_sendData(str[COUNTER]);
 882:	0e 94 15 04 	call	0x82a	; 0x82a <USART_sendData>
		COUNTER++;
 886:	cf 5f       	subi	r28, 0xFF	; 255
	}
}
void USART_receiveSTRING(Uchar8_t * str ,Uchar8_t size )
{
	Uchar8_t COUNTER = 0;
	while(COUNTER < size-1)
 888:	2c 2f       	mov	r18, r28
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	8d 2f       	mov	r24, r29
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	28 17       	cp	r18, r24
 894:	39 07       	cpc	r19, r25
 896:	6c f3       	brlt	.-38     	; 0x872 <USART_receiveSTRING+0x10>
		str[COUNTER]= USART_receiveData();
		if(str[COUNTER] == ENTER_KEY)break;
		USART_sendData(str[COUNTER]);
		COUNTER++;
	}
	str[COUNTER] = null;
 898:	f8 01       	movw	r30, r16
 89a:	ec 0f       	add	r30, r28
 89c:	f1 1d       	adc	r31, r1
 89e:	10 82       	st	Z, r1
}
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	08 95       	ret

000008aa <_exit>:
 8aa:	f8 94       	cli

000008ac <__stop_program>:
 8ac:	ff cf       	rjmp	.-2      	; 0x8ac <__stop_program>
