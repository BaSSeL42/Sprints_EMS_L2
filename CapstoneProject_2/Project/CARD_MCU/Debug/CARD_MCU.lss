
CARD_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000878  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000176  00800060  00000878  0000090c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  008001d6  008001d6  00000a82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a7c  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fd5  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000195c  00000000  00000000  00004821  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000654  00000000  00000000  00006180  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f28  00000000  00000000  000067d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019b9  00000000  00000000  000076fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000090b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 30       	cpi	r26, 0x09	; 9
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 02 	call	0x562	; 0x562 <main>
  8a:	0c 94 3a 04 	jmp	0x874	; 0x874 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
* 											Function Implementation
************************************************************************************************************/

void APP_Init(void)
{
	(void)HUSART_enInit();
  92:	0e 94 97 02 	call	0x52e	; 0x52e <HUSART_enInit>
	HSPI_SlaveInit();
  96:	0e 94 55 02 	call	0x4aa	; 0x4aa <HSPI_SlaveInit>
	eeprom_init();
  9a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <eeprom_init>
	sei();
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <APP_Start>:
}


void APP_Start(void)
{
	switch(u8_g_CardState)
  a2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	09 f4       	brne	.+2      	; 0xac <APP_Start+0xa>
  aa:	4b c0       	rjmp	.+150    	; 0x142 <APP_Start+0xa0>
  ac:	28 f4       	brcc	.+10     	; 0xb8 <APP_Start+0x16>
  ae:	88 23       	and	r24, r24
  b0:	51 f0       	breq	.+20     	; 0xc6 <APP_Start+0x24>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	c9 f1       	breq	.+114    	; 0x128 <APP_Start+0x86>
  b6:	08 95       	ret
  b8:	83 30       	cpi	r24, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <APP_Start+0x1c>
  bc:	56 c0       	rjmp	.+172    	; 0x16a <APP_Start+0xc8>
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	09 f4       	brne	.+2      	; 0xc4 <APP_Start+0x22>
  c2:	66 c0       	rjmp	.+204    	; 0x190 <APP_Start+0xee>
  c4:	08 95       	ret
	{
		case CardGetMode:
		{
			/* Check whether the card is already programmed */
			u8_g_EepromFlag = eeprom_read_byte(FLAG_PAGE);
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
  ce:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <u8_g_EepromFlag>
			if(u8_g_EepromFlag == 0xFF) u8_g_CardState = CardProgMode_GetPan;
  d2:	8f 3f       	cpi	r24, 0xFF	; 255
  d4:	21 f4       	brne	.+8      	; 0xde <APP_Start+0x3c>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
  dc:	08 95       	ret
			else
			{
				HUSART_sendSTRING((Uchar8_t*) "\n\rPlease press 1 for entering user mode and 2 for programming mode:");
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
				while(HUSART_enRecieveData(&u8_gs_ModeSelect));
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	0e 94 a1 02 	call	0x542	; 0x542 <HUSART_enRecieveData>
  ee:	81 11       	cpse	r24, r1
  f0:	fa cf       	rjmp	.-12     	; 0xe6 <APP_Start+0x44>
				HUSART_enSendData(u8_gs_ModeSelect);
  f2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <u8_gs_ModeSelect>
  f6:	0e 94 9c 02 	call	0x538	; 0x538 <HUSART_enSendData>
				HUSART_sendSTRING((Uchar8_t*) "\n\r");
  fa:	84 eb       	ldi	r24, 0xB4	; 180
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
				if('1' == u8_gs_ModeSelect)	u8_g_CardState = CardUserMode;
 102:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <u8_gs_ModeSelect>
 106:	81 33       	cpi	r24, 0x31	; 49
 108:	21 f4       	brne	.+8      	; 0x112 <APP_Start+0x70>
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
 110:	08 95       	ret
				else if('2' == u8_gs_ModeSelect) u8_g_CardState = CardProgMode_GetPan;
 112:	82 33       	cpi	r24, 0x32	; 50
 114:	21 f4       	brne	.+8      	; 0x11e <APP_Start+0x7c>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
 11c:	08 95       	ret
				else HUSART_sendSTRING((Uchar8_t*) "Invalid Choice, ");
 11e:	87 eb       	ldi	r24, 0xB7	; 183
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
 126:	08 95       	ret
			break;
		}
		case CardProgMode_GetPan:
		{
			/* Get and validate PAN number from user */
			u8_g_PanValid = APP_terminalPanGet(pan_arr);
 128:	87 ed       	ldi	r24, 0xD7	; 215
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 0f 01 	call	0x21e	; 0x21e <APP_terminalPanGet>
 130:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <u8_g_PanValid>
			if(PANGET_OK == u8_g_PanValid) u8_g_CardState = CardProgMode_GetPin;
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	09 f0       	breq	.+2      	; 0x13a <APP_Start+0x98>
 138:	47 c0       	rjmp	.+142    	; 0x1c8 <APP_Start+0x126>
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
 140:	08 95       	ret
			break;
		}
		case CardProgMode_GetPin:
		{
			if(CARD_MatchPINs(pin_arr) == PIN_Match_OK)
 142:	8b ee       	ldi	r24, 0xEB	; 235
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 97 01 	call	0x32e	; 0x32e <CARD_MatchPINs>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	51 f4       	brne	.+20     	; 0x162 <APP_Start+0xc0>
			{
				SaveCardData(pan_arr,pin_arr);
 14e:	6b ee       	ldi	r22, 0xEB	; 235
 150:	71 e0       	ldi	r23, 0x01	; 1
 152:	87 ed       	ldi	r24, 0xD7	; 215
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 39 01 	call	0x272	; 0x272 <SaveCardData>
				u8_g_CardState = CardUserMode;
 15a:	83 e0       	ldi	r24, 0x03	; 3
 15c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
 160:	08 95       	ret
			}
			else u8_g_CardState = CardProgMode_GetPin;
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
 168:	08 95       	ret
			break;
		}
		case CardUserMode:
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\r------------- User Mode -------------\n");
 16a:	88 ec       	ldi	r24, 0xC8	; 200
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>

			/* Get PIN from EEPROM to prepare data in SPI buffer */
			ReadCardData(pan_arr,pin_arr);
 172:	6b ee       	ldi	r22, 0xEB	; 235
 174:	71 e0       	ldi	r23, 0x01	; 1
 176:	87 ed       	ldi	r24, 0xD7	; 215
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <ReadCardData>
			
			/* Trigger the ATM */
			HSPI_SlaveRequest(pin_arr, PIN_LENGTH);
 17e:	65 e0       	ldi	r22, 0x05	; 5
 180:	8b ee       	ldi	r24, 0xEB	; 235
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 83 02 	call	0x506	; 0x506 <HSPI_SlaveRequest>
			u8_g_CardState = CardCommMode;
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
			break;
 18e:	08 95       	ret
		}
		case CardCommMode:
		{
			if(CARD_PIN_REQUEST == u8_g_SlaveReceive)
 190:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <u8_g_SlaveReceive>
 194:	80 35       	cpi	r24, 0x50	; 80
 196:	41 f4       	brne	.+16     	; 0x1a8 <APP_Start+0x106>
			{
				u8_g_SlaveReceive = 0;
 198:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pin_arr, PIN_LENGTH);
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	8b ee       	ldi	r24, 0xEB	; 235
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 8e 02 	call	0x51c	; 0x51c <HSPI_SlaveSetData>
 1a6:	08 95       	ret
			}
			else if(CARD_PAN_REQUEST == u8_g_SlaveReceive)
 1a8:	87 34       	cpi	r24, 0x47	; 71
 1aa:	41 f4       	brne	.+16     	; 0x1bc <APP_Start+0x11a>
			{
				u8_g_SlaveReceive = 0;
 1ac:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <u8_g_SlaveReceive>
				HSPI_SlaveSetData(pan_arr, MAX_PAN_LENGTH);
 1b0:	64 e1       	ldi	r22, 0x14	; 20
 1b2:	87 ed       	ldi	r24, 0xD7	; 215
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 8e 02 	call	0x51c	; 0x51c <HSPI_SlaveSetData>
 1ba:	08 95       	ret
			}
			else if(ATM_REQUEST_EJECTED == u8_g_SlaveReceive)
 1bc:	85 34       	cpi	r24, 0x45	; 69
 1be:	21 f4       	brne	.+8      	; 0x1c8 <APP_Start+0x126>
			{
				u8_g_SlaveReceive = 0;
 1c0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <u8_g_SlaveReceive>
				u8_g_CardState = CardGetMode;
 1c4:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <__data_end>
 1c8:	08 95       	ret

000001ca <APP_terminalPinGet>:
 * FUNCTION			: APP_terminalPinGet
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	8c 01       	movw	r16, r24
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, PIN_LENGTH);
 1d2:	65 e0       	ldi	r22, 0x05	; 5
 1d4:	0e 94 ae 02 	call	0x55c	; 0x55c <HUSART_receiveSTRING>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
	HUSART_receiveSTRING(arr, PIN_LENGTH);
	while(arr[counter] != null)
 1da:	0c c0       	rjmp	.+24     	; 0x1f4 <APP_terminalPinGet+0x2a>
	{
		if(arr[counter] >= '0' && arr[counter] <= '9')
 1dc:	80 53       	subi	r24, 0x30	; 48
 1de:	8a 30       	cpi	r24, 0x0A	; 10
 1e0:	10 f4       	brcc	.+4      	; 0x1e6 <APP_terminalPinGet+0x1c>
		{
			counter++;
 1e2:	cf 5f       	subi	r28, 0xFF	; 255
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <APP_terminalPinGet+0x2a>
		}
		else
		{
			HUSART_sendSTRING( (Uchar8_t*) "\rNot numeric ");
 1e6:	81 ef       	ldi	r24, 0xF1	; 241
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
			flag = 1;
 1ee:	91 e0       	ldi	r25, 0x01	; 1
			errorStatus = PINGET_NOK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
			break;
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <APP_terminalPinGet+0x3a>
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
	HUSART_receiveSTRING(arr, PIN_LENGTH);
	while(arr[counter] != null)
 1f4:	f8 01       	movw	r30, r16
 1f6:	ec 0f       	add	r30, r28
 1f8:	f1 1d       	adc	r31, r1
 1fa:	80 81       	ld	r24, Z
 1fc:	81 11       	cpse	r24, r1
 1fe:	ee cf       	rjmp	.-36     	; 0x1dc <APP_terminalPinGet+0x12>
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;

	Uchar8_t counter = 0, flag = 0;
 200:	90 e0       	ldi	r25, 0x00	; 0
 * DESCRIPTION		: Get pin from User within terminal and doing some validation
 * RETURN			: en_terminalPinGetStatus_t {PINGET_NOK or PINGET_OK}
 */
en_terminalPinGetStatus_t APP_terminalPinGet(Uchar8_t* arr)
{
	en_terminalPinGetStatus_t errorStatus = PINGET_OK;
 202:	81 e0       	ldi	r24, 0x01	; 1
			flag = 1;
			errorStatus = PINGET_NOK;
			break;
		}
	}
	if(counter < PIN_LENGTH-1 && flag == 0)
 204:	c4 30       	cpi	r28, 0x04	; 4
 206:	38 f4       	brcc	.+14     	; 0x216 <APP_terminalPinGet+0x4c>
 208:	91 11       	cpse	r25, r1
 20a:	05 c0       	rjmp	.+10     	; 0x216 <APP_terminalPinGet+0x4c>
	{
		HUSART_sendSTRING( (Uchar8_t*) "\rbelow 4 dig ");
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
		errorStatus = PINGET_NOK;
 214:	80 e0       	ldi	r24, 0x00	; 0
	}
	return errorStatus;
}
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	08 95       	ret

0000021e <APP_terminalPanGet>:
 * FUNCTION			: APP_terminalPanGet
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ec 01       	movw	r28, r24
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
	HUSART_receiveSTRING(arr,20);
 22c:	64 e1       	ldi	r22, 0x14	; 20
 22e:	ce 01       	movw	r24, r28
 230:	0e 94 ae 02 	call	0x55c	; 0x55c <HUSART_receiveSTRING>
 * DESCRIPTION		: Get pan from User within terminal and doing some validation
 * RETURN			: en_terminalPanGetStatus_t {PANGET_NOK or PANGET_OK}
 */
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
 234:	90 e0       	ldi	r25, 0x00	; 0
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 236:	0b c0       	rjmp	.+22     	; 0x24e <APP_terminalPanGet+0x30>
	{
		if(arr[loc_counter] >= '0' && arr[loc_counter] <= '9')
 238:	80 53       	subi	r24, 0x30	; 48
 23a:	8a 30       	cpi	r24, 0x0A	; 10
 23c:	10 f4       	brcc	.+4      	; 0x242 <APP_terminalPanGet+0x24>
		{
			loc_counter++;
 23e:	9f 5f       	subi	r25, 0xFF	; 255
 240:	06 c0       	rjmp	.+12     	; 0x24e <APP_terminalPanGet+0x30>
		}
		else
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain Numbers only");
 242:	81 e2       	ldi	r24, 0x21	; 33
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
			return PANGET_NOK;
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0f c0       	rjmp	.+30     	; 0x26c <APP_terminalPanGet+0x4e>
en_terminalPanGetStatus_t APP_terminalPanGet(Uchar8_t* arr)
{
	Uchar8_t loc_counter=0;
	HUSART_sendSTRING((Uchar8_t*)"\n\rEnter Card Pan : ");
	HUSART_receiveSTRING(arr,20);
	while(arr[loc_counter] != null)
 24e:	fe 01       	movw	r30, r28
 250:	e9 0f       	add	r30, r25
 252:	f1 1d       	adc	r31, r1
 254:	80 81       	ld	r24, Z
 256:	81 11       	cpse	r24, r1
 258:	ef cf       	rjmp	.-34     	; 0x238 <APP_terminalPanGet+0x1a>
		{
			HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain Numbers only");
			return PANGET_NOK;
		}
	}
	if(loc_counter<16)
 25a:	90 31       	cpi	r25, 0x10	; 16
 25c:	30 f4       	brcc	.+12     	; 0x26a <APP_terminalPanGet+0x4c>
	{
	 HUSART_sendSTRING((Uchar8_t*) "\n\rInvalid Pan Number - must contain at least 16 numbers");
 25e:	82 e5       	ldi	r24, 0x52	; 82
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
	 return PANGET_NOK;
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	01 c0       	rjmp	.+2      	; 0x26c <APP_terminalPanGet+0x4e>
	}
	return PANGET_OK;
 26a:	81 e0       	ldi	r24, 0x01	; 1
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <SaveCardData>:
 * \param Uchar8_t *CardPan :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Contain User Pan String
 * \param Uchar8_t *CardPin :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Contain User Pin String
 * \return EN_TerminalDataState : This Is Enum For Terminal Data State
 */
EN_TerminalDataState SaveCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
	EN_TerminalDataState ret = DATA_NSAVED; 
	if(CardPan == null || CardPin == null) // Check If The Pointers Is Equal Null Or Not Equal
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	71 f1       	breq	.+92     	; 0x2d6 <SaveCardData+0x64>
 27a:	61 15       	cp	r22, r1
 27c:	71 05       	cpc	r23, r1
 27e:	69 f1       	breq	.+90     	; 0x2da <SaveCardData+0x68>
 280:	eb 01       	movw	r28, r22
 282:	bc 01       	movw	r22, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	8f e4       	ldi	r24, 0x4F	; 79
 286:	93 ec       	ldi	r25, 0xC3	; 195
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <SaveCardData+0x16>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <SaveCardData+0x1c>
 28e:	00 00       	nop
		ret = DATA_NSAVED; // If Equal Null Then Return DATA_NSAVED From Terminal Data State Enum
	}
	else
	{
		_delay_ms(200);
		eeprom_write_string(PAN_PAGE,CardPan);// Call This Function To Write In The EEPROM And Give To It The Address & Pointer Point To The Pan Array 
 290:	80 e6       	ldi	r24, 0x60	; 96
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 08 02 	call	0x410	; 0x410 <eeprom_write_string>
 298:	8f e4       	ldi	r24, 0x4F	; 79
 29a:	93 ec       	ldi	r25, 0xC3	; 195
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <SaveCardData+0x2a>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <SaveCardData+0x30>
 2a2:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(PIN_PAGE,CardPin);// Call This Function To Write In The EEPROM And Give To It The Address & Pointer Point To The Pin Array
 2a4:	be 01       	movw	r22, r28
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 08 02 	call	0x410	; 0x410 <eeprom_write_string>
 2ae:	8f e4       	ldi	r24, 0x4F	; 79
 2b0:	93 ec       	ldi	r25, 0xC3	; 195
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <SaveCardData+0x40>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <SaveCardData+0x46>
 2b8:	00 00       	nop
		_delay_ms(200);
		eeprom_write_string(FLAG_PAGE, (Uchar8_t*)"1");// Call This Function To Write In The EEPROM And Give To It The Address & The Data 
 2ba:	6a e8       	ldi	r22, 0x8A	; 138
 2bc:	71 e0       	ldi	r23, 0x01	; 1
 2be:	80 e2       	ldi	r24, 0x20	; 32
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 08 02 	call	0x410	; 0x410 <eeprom_write_string>
 2c6:	8f e4       	ldi	r24, 0x4F	; 79
 2c8:	93 ec       	ldi	r25, 0xC3	; 195
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <SaveCardData+0x58>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <SaveCardData+0x5e>
 2d0:	00 00       	nop
		_delay_ms(200);
		ret = DATA_SAVED;//Return DATA_NSAVED From Terminal Data State 
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <SaveCardData+0x6a>
EN_TerminalDataState SaveCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
	EN_TerminalDataState ret = DATA_NSAVED; 
	if(CardPan == null || CardPin == null) // Check If The Pointers Is Equal Null Or Not Equal
	{
		ret = DATA_NSAVED; // If Equal Null Then Return DATA_NSAVED From Terminal Data State Enum
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <SaveCardData+0x6a>
 2da:	81 e0       	ldi	r24, 0x01	; 1
		_delay_ms(200);
		ret = DATA_SAVED;//Return DATA_NSAVED From Terminal Data State 
	}
	
	return ret;
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <ReadCardData>:
 * \param Uchar8_t *CardPan :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Function Will Return User Pan String In It
 * \param Uchar8_t *CardPin :  Pointer From Uchar8_t Will Store The Address Of Array Of Char That Function Will Return User Pin String In It
 * \return EN_TerminalDataState : This Is Enum For Terminal Data State 
 */
EN_TerminalDataState ReadCardData(Uchar8_t *CardPan,Uchar8_t *CardPin)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)// Check If The Pointers Is Equal Null Or Not Equal
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	e1 f0       	breq	.+56     	; 0x322 <ReadCardData+0x40>
 2ea:	61 15       	cp	r22, r1
 2ec:	71 05       	cpc	r23, r1
 2ee:	d9 f0       	breq	.+54     	; 0x326 <ReadCardData+0x44>
 2f0:	eb 01       	movw	r28, r22
 2f2:	bc 01       	movw	r22, r24
		{
			ret = DATA_NREAD;// If Equal Null Then Return DATA_NREAD From Terminal Data State Enum
		}
		else
		{			
			eeprom_read_string(PAN_PAGE , CardPan);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pan Array 
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 35 02 	call	0x46a	; 0x46a <eeprom_read_string>
 2fc:	8f e4       	ldi	r24, 0x4F	; 79
 2fe:	93 ec       	ldi	r25, 0xC3	; 195
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <ReadCardData+0x1e>
 304:	00 c0       	rjmp	.+0      	; 0x306 <ReadCardData+0x24>
 306:	00 00       	nop
			_delay_ms(200);
			eeprom_read_string(PIN_PAGE , CardPin);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pin Array
 308:	be 01       	movw	r22, r28
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 35 02 	call	0x46a	; 0x46a <eeprom_read_string>
 312:	8f e4       	ldi	r24, 0x4F	; 79
 314:	93 ec       	ldi	r25, 0xC3	; 195
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <ReadCardData+0x34>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <ReadCardData+0x3a>
 31c:	00 00       	nop
			_delay_ms(200);
			ret = DATA_READ;//Return DATA_READ From Terminal Data State 
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	03 c0       	rjmp	.+6      	; 0x328 <ReadCardData+0x46>
{
		EN_TerminalDataState ret = DATA_NREAD;
		
		if(CardPan == null || CardPin == null)// Check If The Pointers Is Equal Null Or Not Equal
		{
			ret = DATA_NREAD;// If Equal Null Then Return DATA_NREAD From Terminal Data State Enum
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	01 c0       	rjmp	.+2      	; 0x328 <ReadCardData+0x46>
 326:	83 e0       	ldi	r24, 0x03	; 3
			eeprom_read_string(PIN_PAGE , CardPin);// Call This Function To Read From The EEPROM And Give To It The Address & Pointer Point To The Pin Array
			_delay_ms(200);
			ret = DATA_READ;//Return DATA_READ From Terminal Data State 
		}
		return ret;
}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <CARD_MatchPINs>:


en_CardPinMatchError_t CARD_MatchPINs(Uchar8_t *pu8_a_pin)
{
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	00 d0       	rcall	.+0      	; 0x33a <CARD_MatchPINs+0xc>
 33a:	00 d0       	rcall	.+0      	; 0x33c <CARD_MatchPINs+0xe>
 33c:	1f 92       	push	r1
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	7c 01       	movw	r14, r24
	Uchar8_t PIN_Confirm[PIN_LENGTH], u8_l_PINiterator;
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\n\rEnter your PIN : ");
 344:	8c e8       	ldi	r24, 0x8C	; 140
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
	u8_l_ValidatePIN = APP_terminalPinGet(pu8_a_pin);
 34c:	c7 01       	movw	r24, r14
 34e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <APP_terminalPinGet>
 352:	18 2f       	mov	r17, r24
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 354:	88 23       	and	r24, r24
 356:	71 f1       	breq	.+92     	; 0x3b4 <CARD_MatchPINs+0x86>
	
	/* Get PIN again for Confirmation */
	HUSART_sendSTRING((Uchar8_t *)"\n\rConfirm Your PIN : ");
 358:	80 ea       	ldi	r24, 0xA0	; 160
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
 360:	ce 01       	movw	r24, r28
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	0e 94 e5 00 	call	0x1ca	; 0x1ca <APP_terminalPinGet>
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
 368:	11 30       	cpi	r17, 0x01	; 1
 36a:	31 f5       	brne	.+76     	; 0x3b8 <CARD_MatchPINs+0x8a>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	c9 f0       	breq	.+50     	; 0x3a2 <CARD_MatchPINs+0x74>
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	23 c0       	rjmp	.+70     	; 0x3ba <CARD_MatchPINs+0x8c>
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
		{
			if(pu8_a_pin[u8_l_PINiterator] != PIN_Confirm[u8_l_PINiterator])
 374:	82 2f       	mov	r24, r18
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	f7 01       	movw	r30, r14
 37a:	e8 0f       	add	r30, r24
 37c:	f9 1f       	adc	r31, r25
 37e:	30 81       	ld	r19, Z
 380:	e1 e0       	ldi	r30, 0x01	; 1
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ec 0f       	add	r30, r28
 386:	fd 1f       	adc	r31, r29
 388:	e8 0f       	add	r30, r24
 38a:	f9 1f       	adc	r31, r25
 38c:	80 81       	ld	r24, Z
 38e:	38 17       	cp	r19, r24
 390:	31 f0       	breq	.+12     	; 0x39e <CARD_MatchPINs+0x70>
			{
				HUSART_sendSTRING((Uchar8_t *)"\n\rPin Not Matched");
 392:	86 eb       	ldi	r24, 0xB6	; 182
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
				return PIN_Match_NOK;
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	0e c0       	rjmp	.+28     	; 0x3ba <CARD_MatchPINs+0x8c>
	u8_l_ValidateConfirmPIN = APP_terminalPinGet(PIN_Confirm);
	
	if((PINGET_OK == u8_l_ValidatePIN) && (PINGET_OK == u8_l_ValidateConfirmPIN))
	{
		/* Check if the user entered same PIN both times */
		for(u8_l_PINiterator=0; u8_l_PINiterator<PIN_LENGTH; u8_l_PINiterator++)
 39e:	2f 5f       	subi	r18, 0xFF	; 255
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <CARD_MatchPINs+0x76>
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	25 30       	cpi	r18, 0x05	; 5
 3a6:	30 f3       	brcs	.-52     	; 0x374 <CARD_MatchPINs+0x46>
				HUSART_sendSTRING((Uchar8_t *)"\n\rPin Not Matched");
				return PIN_Match_NOK;
			}
		}
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
 3a8:	88 ec       	ldi	r24, 0xC8	; 200
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 ab 02 	call	0x556	; 0x556 <HUSART_sendSTRING>
		return PIN_Match_OK;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <CARD_MatchPINs+0x8c>
	Uchar8_t u8_l_ValidatePIN, u8_l_ValidateConfirmPIN;
	
	/* Get PIN from user */
	HUSART_sendSTRING( (Uchar8_t*) "\n\rEnter your PIN : ");
	u8_l_ValidatePIN = APP_terminalPinGet(pu8_a_pin);
	if(u8_l_ValidatePIN == PINGET_NOK) return PIN_Match_NOK;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <CARD_MatchPINs+0x8c>
		
		HUSART_sendSTRING((Uchar8_t *)"\n\rPin Matched");
		return PIN_Match_OK;
	}
	
	return PIN_Match_NOK;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
}
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	08 95       	ret

000003d0 <eeprom_init>:
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
	i2c_write_byte(address >> 8); // Write Byte Contain Device Address Shifted By 8 On I2c
	i2c_write_byte(address); // Write Byte Contain Device Address On I2c
	i2c_write_byte(data); // Write Byte Contain Data On I2c
	i2c_stop(); // Send Stop Bit On I2c
}
 3d0:	0e 94 36 03 	call	0x66c	; 0x66c <i2c_init_master>
 3d4:	08 95       	ret

000003d6 <eeprom_read_byte>:
* \param : Uint16_t address : This Is Device Address
*
* \return Uchar8_t : Function Will Return Uchar8_t Contain The Data
*/
Uchar8_t eeprom_read_byte(Uint16_t address)
{
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	c8 2f       	mov	r28, r24
 3dc:	d9 2f       	mov	r29, r25
	Uchar8_t data = 0;
	i2c_start();// Send Start Bit On I2c
 3de:	0e 94 44 03 	call	0x688	; 0x688 <i2c_start>
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
 3e2:	80 e5       	ldi	r24, 0x50	; 80
 3e4:	0e 94 58 03 	call	0x6b0	; 0x6b0 <i2c_send_slave_address_with_write_req>
	i2c_write_byte(address >> 8);// Write Byte Contain Device Address Shifted By 8 On I2c
 3e8:	8d 2f       	mov	r24, r29
 3ea:	0e 94 76 03 	call	0x6ec	; 0x6ec <i2c_write_byte>
	i2c_write_byte(address & 0xFF);// Write Byte Contain Device Address On I2c
 3ee:	8c 2f       	mov	r24, r28
 3f0:	0e 94 76 03 	call	0x6ec	; 0x6ec <i2c_write_byte>
	i2c_repeated_start();// Send Repeated Start Bit On I2c
 3f4:	0e 94 4e 03 	call	0x69c	; 0x69c <i2c_repeated_start>
	i2c_send_slave_address_with_read_req(0x50);// Send Slave Address With Read Bit On I2c
 3f8:	80 e5       	ldi	r24, 0x50	; 80
 3fa:	0e 94 67 03 	call	0x6ce	; 0x6ce <i2c_send_slave_address_with_read_req>
	data = i2c_read_byte_nack();// Read Byte Contain Data On I2c With No Ack
 3fe:	0e 94 88 03 	call	0x710	; 0x710 <i2c_read_byte_nack>
 402:	c8 2f       	mov	r28, r24
	i2c_stop();// Send Stop Bit On I2c
 404:	0e 94 85 03 	call	0x70a	; 0x70a <i2c_stop>
	return data;//Return The Data That Been Read
}
 408:	8c 2f       	mov	r24, r28
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <eeprom_write_string>:
* \param : Uint16_t address : This Is Device Address
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars
* \return  Void
*/
void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	c8 2f       	mov	r28, r24
 41a:	d9 2f       	mov	r29, r25
 41c:	8b 01       	movw	r16, r22
	Uchar8_t i = 0;
	
	i2c_start();// Send Start Bit On I2c
 41e:	0e 94 44 03 	call	0x688	; 0x688 <i2c_start>
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
 422:	80 e5       	ldi	r24, 0x50	; 80
 424:	0e 94 58 03 	call	0x6b0	; 0x6b0 <i2c_send_slave_address_with_write_req>
	i2c_write_byte(Copy_u8Address >> 8);// Write Byte Contain Device Address Shifted By 8 On I2c
 428:	8d 2f       	mov	r24, r29
 42a:	0e 94 76 03 	call	0x6ec	; 0x6ec <i2c_write_byte>
	i2c_write_byte(Copy_u8Address & 0xFF);// Write Byte Contain Device Address On I2c
 42e:	8c 2f       	mov	r24, r28
 430:	0e 94 76 03 	call	0x6ec	; 0x6ec <i2c_write_byte>
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars
* \return  Void
*/
void eeprom_write_string(Uint16_t Copy_u8Address, const Uchar8_t* str)
{
	Uchar8_t i = 0;
 434:	c0 e0       	ldi	r28, 0x00	; 0
	i2c_start();// Send Start Bit On I2c
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
	i2c_write_byte(Copy_u8Address >> 8);// Write Byte Contain Device Address Shifted By 8 On I2c
	i2c_write_byte(Copy_u8Address & 0xFF);// Write Byte Contain Device Address On I2c
	
	while(str[i] != '\0') // Loop Until The End Of The String
 436:	03 c0       	rjmp	.+6      	; 0x43e <eeprom_write_string+0x2e>
	{
		//_delay_ms(50);
		i2c_write_byte(str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
 438:	cf 5f       	subi	r28, 0xFF	; 255
 43a:	0e 94 76 03 	call	0x6ec	; 0x6ec <i2c_write_byte>
	i2c_start();// Send Start Bit On I2c
	i2c_send_slave_address_with_write_req(0x50);// Send Slave Address With Write Bit On I2c
	i2c_write_byte(Copy_u8Address >> 8);// Write Byte Contain Device Address Shifted By 8 On I2c
	i2c_write_byte(Copy_u8Address & 0xFF);// Write Byte Contain Device Address On I2c
	
	while(str[i] != '\0') // Loop Until The End Of The String
 43e:	f8 01       	movw	r30, r16
 440:	ec 0f       	add	r30, r28
 442:	f1 1d       	adc	r31, r1
 444:	80 81       	ld	r24, Z
 446:	81 11       	cpse	r24, r1
 448:	f7 cf       	rjmp	.-18     	; 0x438 <eeprom_write_string+0x28>
 44a:	83 ed       	ldi	r24, 0xD3	; 211
 44c:	90 e3       	ldi	r25, 0x30	; 48
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <eeprom_write_string+0x3e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <eeprom_write_string+0x44>
 454:	00 00       	nop
	{
		//_delay_ms(50);
		i2c_write_byte(str[i++]);//Call This Function To Write Char In EEPROM And Increment The Address And Index
	}
	_delay_ms(50);
	i2c_write_byte('\0');//Call This Function To Write Null After The Last Char Of The String To Know Where The String Is End
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 76 03 	call	0x6ec	; 0x6ec <i2c_write_byte>
	i2c_stop();// Send Stop Bit On I2c
 45c:	0e 94 85 03 	call	0x70a	; 0x70a <i2c_stop>
}
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	08 95       	ret

0000046a <eeprom_read_string>:
* \param : Uint16_t address : This Is Device Address
*		 : Uchar8_t *str	: This Pointer Will Store The Address Of The Array Of The Chars That Will Return String In It
* \return  Void
*/
void eeprom_read_string(Uint16_t Copy_u8Address, Uchar8_t* str)
{
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	6b 01       	movw	r12, r22
	Uchar8_t len = 0;
 47a:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		//_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 47c:	76 01       	movw	r14, r12
 47e:	ec 0e       	add	r14, r28
 480:	f1 1c       	adc	r15, r1
 482:	8c 01       	movw	r16, r24
 484:	0f 5f       	subi	r16, 0xFF	; 255
 486:	1f 4f       	sbci	r17, 0xFF	; 255
 488:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <eeprom_read_byte>
 48c:	28 2f       	mov	r18, r24
 48e:	f7 01       	movw	r30, r14
 490:	80 83       	st	Z, r24
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 492:	cf 5f       	subi	r28, 0xFF	; 255
{
	Uchar8_t len = 0;
	do
	{
		//_delay_ms(50);
		str[len] = eeprom_read_byte(Copy_u8Address++);//Call This Function To Read Char From EEPROM And Increment The Address And Index
 494:	c8 01       	movw	r24, r16
	}
	while(str[len++] != '\0');// Loop Until The End Of The String
 496:	21 11       	cpse	r18, r1
 498:	f1 cf       	rjmp	.-30     	; 0x47c <eeprom_read_string+0x12>
}
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	df 90       	pop	r13
 4a6:	cf 90       	pop	r12
 4a8:	08 95       	ret

000004aa <HSPI_SlaveInit>:
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	8d e0       	ldi	r24, 0x0D	; 13
 4ae:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_s8SETPinDir>
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	8f e0       	ldi	r24, 0x0F	; 15
 4b6:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_s8SETPinDir>
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	8c e0       	ldi	r24, 0x0C	; 12
 4be:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_s8SETPinDir>
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	8c e0       	ldi	r24, 0x0C	; 12
 4c6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_s8SETPinVal>
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	8e e0       	ldi	r24, 0x0E	; 14
 4ce:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_s8SETPinDir>
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	88 e0       	ldi	r24, 0x08	; 8
 4d6:	0e 94 b6 02 	call	0x56c	; 0x56c <DIO_s8SETPinDir>
 4da:	0e 94 93 03 	call	0x726	; 0x726 <SPI_SlaveInit>
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	8c e0       	ldi	r24, 0x0C	; 12
 4e2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_s8SETPinVal>
 4e6:	08 95       	ret

000004e8 <HSPI_MasterTrigger>:
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	88 e0       	ldi	r24, 0x08	; 8
 4ec:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_s8SETPinVal>
 4f0:	83 ec       	ldi	r24, 0xC3	; 195
 4f2:	99 e0       	ldi	r25, 0x09	; 9
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <HSPI_MasterTrigger+0xc>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <HSPI_MasterTrigger+0x12>
 4fa:	00 00       	nop
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	88 e0       	ldi	r24, 0x08	; 8
 500:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_s8SETPinVal>
 504:	08 95       	ret

00000506 <HSPI_SlaveRequest>:
 506:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <u8_g_SlaveTxIndex>
 50a:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <pu8_g_SlaveTxPtr+0x1>
 50e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <pu8_g_SlaveTxPtr>
 512:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <u8_g_SlaveTxLen>
 516:	0e 94 74 02 	call	0x4e8	; 0x4e8 <HSPI_MasterTrigger>
 51a:	08 95       	ret

0000051c <HSPI_SlaveSetData>:
 51c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <u8_g_SlaveTxIndex>
 520:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <pu8_g_SlaveTxPtr+0x1>
 524:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <pu8_g_SlaveTxPtr>
 528:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <u8_g_SlaveTxLen>
 52c:	08 95       	ret

0000052e <HUSART_enInit>:
 52e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <USART_init>
 532:	81 11       	cpse	r24, r1
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	08 95       	ret

00000538 <HUSART_enSendData>:
 538:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_sendData>
 53c:	81 11       	cpse	r24, r1
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	08 95       	ret

00000542 <HUSART_enRecieveData>:
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	ec 01       	movw	r28, r24
 548:	0e 94 ff 03 	call	0x7fe	; 0x7fe <USART_receiveData>
 54c:	88 83       	st	Y, r24
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <HUSART_sendSTRING>:
 556:	0e 94 03 04 	call	0x806	; 0x806 <USART_sendSTRING>
 55a:	08 95       	ret

0000055c <HUSART_receiveSTRING>:
 55c:	0e 94 16 04 	call	0x82c	; 0x82c <USART_receiveSTRING>
 560:	08 95       	ret

00000562 <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
int main(void)
{
	APP_Init();
 562:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
    while (1) 
    {
      APP_Start();
 566:	0e 94 51 00 	call	0xa2	; 0xa2 <APP_Start>
 56a:	fd cf       	rjmp	.-6      	; 0x566 <main+0x4>

0000056c <DIO_s8SETPinDir>:
 56c:	80 32       	cpi	r24, 0x20	; 32
 56e:	c0 f5       	brcc	.+112    	; 0x5e0 <DIO_s8SETPinDir+0x74>
 570:	62 30       	cpi	r22, 0x02	; 2
 572:	c0 f5       	brcc	.+112    	; 0x5e4 <DIO_s8SETPinDir+0x78>
 574:	e8 2f       	mov	r30, r24
 576:	e6 95       	lsr	r30
 578:	e6 95       	lsr	r30
 57a:	e6 95       	lsr	r30
 57c:	87 70       	andi	r24, 0x07	; 7
 57e:	61 11       	cpse	r22, r1
 580:	17 c0       	rjmp	.+46     	; 0x5b0 <DIO_s8SETPinDir+0x44>
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	ee 0f       	add	r30, r30
 586:	ff 1f       	adc	r31, r31
 588:	e0 5a       	subi	r30, 0xA0	; 160
 58a:	ff 4f       	sbci	r31, 0xFF	; 255
 58c:	01 90       	ld	r0, Z+
 58e:	f0 81       	ld	r31, Z
 590:	e0 2d       	mov	r30, r0
 592:	40 81       	ld	r20, Z
 594:	21 e0       	ldi	r18, 0x01	; 1
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	b9 01       	movw	r22, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_s8SETPinDir+0x34>
 59c:	66 0f       	add	r22, r22
 59e:	77 1f       	adc	r23, r23
 5a0:	8a 95       	dec	r24
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_s8SETPinDir+0x30>
 5a4:	cb 01       	movw	r24, r22
 5a6:	80 95       	com	r24
 5a8:	84 23       	and	r24, r20
 5aa:	80 83       	st	Z, r24
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	08 95       	ret
 5b0:	61 30       	cpi	r22, 0x01	; 1
 5b2:	d1 f4       	brne	.+52     	; 0x5e8 <DIO_s8SETPinDir+0x7c>
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	e0 5a       	subi	r30, 0xA0	; 160
 5bc:	ff 4f       	sbci	r31, 0xFF	; 255
 5be:	01 90       	ld	r0, Z+
 5c0:	f0 81       	ld	r31, Z
 5c2:	e0 2d       	mov	r30, r0
 5c4:	40 81       	ld	r20, Z
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_s8SETPinDir+0x66>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_s8SETPinDir+0x62>
 5d6:	cb 01       	movw	r24, r22
 5d8:	84 2b       	or	r24, r20
 5da:	80 83       	st	Z, r24
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	08 95       	ret
 5e0:	8f ef       	ldi	r24, 0xFF	; 255
 5e2:	08 95       	ret
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	08 95       	ret
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret

000005ec <DIO_s8SETPinVal>:
 5ec:	80 32       	cpi	r24, 0x20	; 32
 5ee:	c0 f5       	brcc	.+112    	; 0x660 <DIO_s8SETPinVal+0x74>
 5f0:	62 30       	cpi	r22, 0x02	; 2
 5f2:	c0 f5       	brcc	.+112    	; 0x664 <DIO_s8SETPinVal+0x78>
 5f4:	e8 2f       	mov	r30, r24
 5f6:	e6 95       	lsr	r30
 5f8:	e6 95       	lsr	r30
 5fa:	e6 95       	lsr	r30
 5fc:	87 70       	andi	r24, 0x07	; 7
 5fe:	61 11       	cpse	r22, r1
 600:	17 c0       	rjmp	.+46     	; 0x630 <DIO_s8SETPinVal+0x44>
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	ee 0f       	add	r30, r30
 606:	ff 1f       	adc	r31, r31
 608:	e8 59       	subi	r30, 0x98	; 152
 60a:	ff 4f       	sbci	r31, 0xFF	; 255
 60c:	01 90       	ld	r0, Z+
 60e:	f0 81       	ld	r31, Z
 610:	e0 2d       	mov	r30, r0
 612:	40 81       	ld	r20, Z
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	b9 01       	movw	r22, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_s8SETPinVal+0x34>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	8a 95       	dec	r24
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_s8SETPinVal+0x30>
 624:	cb 01       	movw	r24, r22
 626:	80 95       	com	r24
 628:	84 23       	and	r24, r20
 62a:	80 83       	st	Z, r24
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	08 95       	ret
 630:	61 30       	cpi	r22, 0x01	; 1
 632:	d1 f4       	brne	.+52     	; 0x668 <DIO_s8SETPinVal+0x7c>
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	ee 0f       	add	r30, r30
 638:	ff 1f       	adc	r31, r31
 63a:	e8 59       	subi	r30, 0x98	; 152
 63c:	ff 4f       	sbci	r31, 0xFF	; 255
 63e:	01 90       	ld	r0, Z+
 640:	f0 81       	ld	r31, Z
 642:	e0 2d       	mov	r30, r0
 644:	40 81       	ld	r20, Z
 646:	21 e0       	ldi	r18, 0x01	; 1
 648:	30 e0       	ldi	r19, 0x00	; 0
 64a:	b9 01       	movw	r22, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_s8SETPinVal+0x66>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	8a 95       	dec	r24
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_s8SETPinVal+0x62>
 656:	cb 01       	movw	r24, r22
 658:	84 2b       	or	r24, r20
 65a:	80 83       	st	Z, r24
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	08 95       	ret
 660:	8f ef       	ldi	r24, 0xFF	; 255
 662:	08 95       	ret
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	08 95       	ret
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret

0000066c <i2c_init_master>:
 66c:	81 b1       	in	r24, 0x01	; 1
 66e:	8e 7f       	andi	r24, 0xFE	; 254
 670:	81 b9       	out	0x01, r24	; 1
 672:	81 b1       	in	r24, 0x01	; 1
 674:	8d 7f       	andi	r24, 0xFD	; 253
 676:	81 b9       	out	0x01, r24	; 1
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	80 b9       	out	0x00, r24	; 0
 67c:	80 ea       	ldi	r24, 0xA0	; 160
 67e:	82 b9       	out	0x02, r24	; 2
 680:	86 b7       	in	r24, 0x36	; 54
 682:	84 60       	ori	r24, 0x04	; 4
 684:	86 bf       	out	0x36, r24	; 54
 686:	08 95       	ret

00000688 <i2c_start>:
 688:	84 ea       	ldi	r24, 0xA4	; 164
 68a:	86 bf       	out	0x36, r24	; 54
 68c:	06 b6       	in	r0, 0x36	; 54
 68e:	07 fe       	sbrs	r0, 7
 690:	fd cf       	rjmp	.-6      	; 0x68c <i2c_start+0x4>
 692:	81 b1       	in	r24, 0x01	; 1
 694:	88 7f       	andi	r24, 0xF8	; 248
 696:	88 30       	cpi	r24, 0x08	; 8
 698:	e1 f7       	brne	.-8      	; 0x692 <i2c_start+0xa>
 69a:	08 95       	ret

0000069c <i2c_repeated_start>:
 69c:	84 ea       	ldi	r24, 0xA4	; 164
 69e:	86 bf       	out	0x36, r24	; 54
 6a0:	06 b6       	in	r0, 0x36	; 54
 6a2:	07 fe       	sbrs	r0, 7
 6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <i2c_repeated_start+0x4>
 6a6:	81 b1       	in	r24, 0x01	; 1
 6a8:	88 7f       	andi	r24, 0xF8	; 248
 6aa:	80 31       	cpi	r24, 0x10	; 16
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <i2c_repeated_start+0xa>
 6ae:	08 95       	ret

000006b0 <i2c_send_slave_address_with_write_req>:
 6b0:	88 0f       	add	r24, r24
 6b2:	83 b9       	out	0x03, r24	; 3
 6b4:	83 b1       	in	r24, 0x03	; 3
 6b6:	8e 7f       	andi	r24, 0xFE	; 254
 6b8:	83 b9       	out	0x03, r24	; 3
 6ba:	84 e8       	ldi	r24, 0x84	; 132
 6bc:	86 bf       	out	0x36, r24	; 54
 6be:	06 b6       	in	r0, 0x36	; 54
 6c0:	07 fe       	sbrs	r0, 7
 6c2:	fd cf       	rjmp	.-6      	; 0x6be <i2c_send_slave_address_with_write_req+0xe>
 6c4:	81 b1       	in	r24, 0x01	; 1
 6c6:	88 7f       	andi	r24, 0xF8	; 248
 6c8:	88 31       	cpi	r24, 0x18	; 24
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <i2c_send_slave_address_with_write_req+0x14>
 6cc:	08 95       	ret

000006ce <i2c_send_slave_address_with_read_req>:
 6ce:	88 0f       	add	r24, r24
 6d0:	83 b9       	out	0x03, r24	; 3
 6d2:	83 b1       	in	r24, 0x03	; 3
 6d4:	81 60       	ori	r24, 0x01	; 1
 6d6:	83 b9       	out	0x03, r24	; 3
 6d8:	84 e8       	ldi	r24, 0x84	; 132
 6da:	86 bf       	out	0x36, r24	; 54
 6dc:	06 b6       	in	r0, 0x36	; 54
 6de:	07 fe       	sbrs	r0, 7
 6e0:	fd cf       	rjmp	.-6      	; 0x6dc <i2c_send_slave_address_with_read_req+0xe>
 6e2:	81 b1       	in	r24, 0x01	; 1
 6e4:	88 7f       	andi	r24, 0xF8	; 248
 6e6:	80 34       	cpi	r24, 0x40	; 64
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <i2c_send_slave_address_with_read_req+0x14>
 6ea:	08 95       	ret

000006ec <i2c_write_byte>:
 6ec:	83 b9       	out	0x03, r24	; 3
 6ee:	86 b7       	in	r24, 0x36	; 54
 6f0:	80 68       	ori	r24, 0x80	; 128
 6f2:	86 bf       	out	0x36, r24	; 54
 6f4:	86 b7       	in	r24, 0x36	; 54
 6f6:	84 60       	ori	r24, 0x04	; 4
 6f8:	86 bf       	out	0x36, r24	; 54
 6fa:	06 b6       	in	r0, 0x36	; 54
 6fc:	07 fe       	sbrs	r0, 7
 6fe:	fd cf       	rjmp	.-6      	; 0x6fa <i2c_write_byte+0xe>
 700:	81 b1       	in	r24, 0x01	; 1
 702:	88 7f       	andi	r24, 0xF8	; 248
 704:	88 32       	cpi	r24, 0x28	; 40
 706:	e1 f7       	brne	.-8      	; 0x700 <i2c_write_byte+0x14>
 708:	08 95       	ret

0000070a <i2c_stop>:
 70a:	84 e9       	ldi	r24, 0x94	; 148
 70c:	86 bf       	out	0x36, r24	; 54
 70e:	08 95       	ret

00000710 <i2c_read_byte_nack>:
 710:	86 b7       	in	r24, 0x36	; 54
 712:	80 68       	ori	r24, 0x80	; 128
 714:	86 bf       	out	0x36, r24	; 54
 716:	86 b7       	in	r24, 0x36	; 54
 718:	84 60       	ori	r24, 0x04	; 4
 71a:	86 bf       	out	0x36, r24	; 54
 71c:	06 b6       	in	r0, 0x36	; 54
 71e:	07 fe       	sbrs	r0, 7
 720:	fd cf       	rjmp	.-6      	; 0x71c <i2c_read_byte_nack+0xc>
 722:	83 b1       	in	r24, 0x03	; 3
 724:	08 95       	ret

00000726 <SPI_SlaveInit>:
 726:	8d b1       	in	r24, 0x0d	; 13
 728:	8f 7e       	andi	r24, 0xEF	; 239
 72a:	8d b9       	out	0x0d, r24	; 13
 72c:	8d b1       	in	r24, 0x0d	; 13
 72e:	87 7f       	andi	r24, 0xF7	; 247
 730:	8d b9       	out	0x0d, r24	; 13
 732:	8d b1       	in	r24, 0x0d	; 13
 734:	8b 7f       	andi	r24, 0xFB	; 251
 736:	8d b9       	out	0x0d, r24	; 13
 738:	8d b1       	in	r24, 0x0d	; 13
 73a:	80 68       	ori	r24, 0x80	; 128
 73c:	8d b9       	out	0x0d, r24	; 13
 73e:	8d b1       	in	r24, 0x0d	; 13
 740:	80 64       	ori	r24, 0x40	; 64
 742:	8d b9       	out	0x0d, r24	; 13
 744:	08 95       	ret

00000746 <__vector_12>:
 746:	1f 92       	push	r1
 748:	0f 92       	push	r0
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	0f 92       	push	r0
 74e:	11 24       	eor	r1, r1
 750:	2f 93       	push	r18
 752:	3f 93       	push	r19
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	ef 93       	push	r30
 75a:	ff 93       	push	r31
 75c:	8f b1       	in	r24, 0x0f	; 15
 75e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <u8_g_SlaveReceive>
 762:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <u8_g_SlaveRxIndex>
 766:	9f 30       	cpi	r25, 0x0F	; 15
 768:	11 f4       	brne	.+4      	; 0x76e <__vector_12+0x28>
 76a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <u8_g_SlaveRxIndex>
 76e:	83 32       	cpi	r24, 0x23	; 35
 770:	59 f0       	breq	.+22     	; 0x788 <__vector_12+0x42>
 772:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <u8_g_SlaveRxIndex>
 776:	e9 2f       	mov	r30, r25
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	e0 51       	subi	r30, 0x10	; 16
 77c:	fe 4f       	sbci	r31, 0xFE	; 254
 77e:	80 83       	st	Z, r24
 780:	9f 5f       	subi	r25, 0xFF	; 255
 782:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <u8_g_SlaveRxIndex>
 786:	04 c0       	rjmp	.+8      	; 0x790 <__vector_12+0x4a>
 788:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <u8_g_SlaveRxIndex>
 78c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <u8_g_SlaveRxLen>
 790:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <u8_g_SlaveTxIndex>
 794:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <u8_g_SlaveTxLen>
 798:	89 17       	cp	r24, r25
 79a:	88 f4       	brcc	.+34     	; 0x7be <__vector_12+0x78>
 79c:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <pu8_g_SlaveTxPtr>
 7a0:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <pu8_g_SlaveTxPtr+0x1>
 7a4:	21 15       	cp	r18, r1
 7a6:	31 05       	cpc	r19, r1
 7a8:	51 f0       	breq	.+20     	; 0x7be <__vector_12+0x78>
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	98 0f       	add	r25, r24
 7ae:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <u8_g_SlaveTxIndex>
 7b2:	f9 01       	movw	r30, r18
 7b4:	e8 0f       	add	r30, r24
 7b6:	f1 1d       	adc	r31, r1
 7b8:	80 81       	ld	r24, Z
 7ba:	8f b9       	out	0x0f, r24	; 15
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__vector_12+0x80>
 7be:	89 17       	cp	r24, r25
 7c0:	10 f0       	brcs	.+4      	; 0x7c6 <__vector_12+0x80>
 7c2:	83 e2       	ldi	r24, 0x23	; 35
 7c4:	8f b9       	out	0x0f, r24	; 15
 7c6:	ff 91       	pop	r31
 7c8:	ef 91       	pop	r30
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	3f 91       	pop	r19
 7d0:	2f 91       	pop	r18
 7d2:	0f 90       	pop	r0
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	0f 90       	pop	r0
 7d8:	1f 90       	pop	r1
 7da:	18 95       	reti

000007dc <USART_init>:
 7dc:	8a b1       	in	r24, 0x0a	; 10
 7de:	8b 7f       	andi	r24, 0xFB	; 251
 7e0:	9b b1       	in	r25, 0x0b	; 11
 7e2:	9d 7f       	andi	r25, 0xFD	; 253
 7e4:	9b b9       	out	0x0b, r25	; 11
 7e6:	88 61       	ori	r24, 0x18	; 24
 7e8:	8a b9       	out	0x0a, r24	; 10
 7ea:	83 e3       	ldi	r24, 0x33	; 51
 7ec:	89 b9       	out	0x09, r24	; 9
 7ee:	10 bc       	out	0x20, r1	; 32
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	08 95       	ret

000007f4 <USART_sendData>:
 7f4:	5d 9b       	sbis	0x0b, 5	; 11
 7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <USART_sendData>
 7f8:	8c b9       	out	0x0c, r24	; 12
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	08 95       	ret

000007fe <USART_receiveData>:
 7fe:	5f 9b       	sbis	0x0b, 7	; 11
 800:	fe cf       	rjmp	.-4      	; 0x7fe <USART_receiveData>
 802:	8c b1       	in	r24, 0x0c	; 12
 804:	08 95       	ret

00000806 <USART_sendSTRING>:
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	8c 01       	movw	r16, r24
 80e:	c0 e0       	ldi	r28, 0x00	; 0
 810:	03 c0       	rjmp	.+6      	; 0x818 <USART_sendSTRING+0x12>
 812:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_sendData>
 816:	cf 5f       	subi	r28, 0xFF	; 255
 818:	f8 01       	movw	r30, r16
 81a:	ec 0f       	add	r30, r28
 81c:	f1 1d       	adc	r31, r1
 81e:	80 81       	ld	r24, Z
 820:	81 11       	cpse	r24, r1
 822:	f7 cf       	rjmp	.-18     	; 0x812 <USART_sendSTRING+0xc>
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	08 95       	ret

0000082c <USART_receiveSTRING>:
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	cf 93       	push	r28
 832:	df 93       	push	r29
 834:	8c 01       	movw	r16, r24
 836:	d6 2f       	mov	r29, r22
 838:	c0 e0       	ldi	r28, 0x00	; 0
 83a:	0b c0       	rjmp	.+22     	; 0x852 <USART_receiveSTRING+0x26>
 83c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <USART_receiveData>
 840:	f8 01       	movw	r30, r16
 842:	ec 0f       	add	r30, r28
 844:	f1 1d       	adc	r31, r1
 846:	80 83       	st	Z, r24
 848:	8d 30       	cpi	r24, 0x0D	; 13
 84a:	59 f0       	breq	.+22     	; 0x862 <__stack+0x3>
 84c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_sendData>
 850:	cf 5f       	subi	r28, 0xFF	; 255
 852:	2c 2f       	mov	r18, r28
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	8d 2f       	mov	r24, r29
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	01 97       	sbiw	r24, 0x01	; 1
 85c:	28 17       	cp	r18, r24
 85e:	39 07       	cpc	r19, r25
 860:	6c f3       	brlt	.-38     	; 0x83c <USART_receiveSTRING+0x10>
 862:	f8 01       	movw	r30, r16
 864:	ec 0f       	add	r30, r28
 866:	f1 1d       	adc	r31, r1
 868:	10 82       	st	Z, r1
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	1f 91       	pop	r17
 870:	0f 91       	pop	r16
 872:	08 95       	ret

00000874 <_exit>:
 874:	f8 94       	cli

00000876 <__stop_program>:
 876:	ff cf       	rjmp	.-2      	; 0x876 <__stop_program>
