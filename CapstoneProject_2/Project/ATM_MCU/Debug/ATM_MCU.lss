
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000244  00800060  000022b6  0000234a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  008002a4  008002a4  0000258e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000258e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000605b  00000000  00000000  00002ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b25  00000000  00000000  00008b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000304f  00000000  00000000  0000a658  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c34  00000000  00000000  0000d6a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001903  00000000  00000000  0000e2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003413  00000000  00000000  0000fbdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  00012ff2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_1>
       8:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_2>
       c:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__vector_11>
      30:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e6 eb       	ldi	r30, 0xB6	; 182
      a4:	f2 e2       	ldi	r31, 0x22	; 34
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3a       	cpi	r26, 0xA4	; 164
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 ea       	ldi	r26, 0xA4	; 164
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3f       	cpi	r26, 0xF6	; 246
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 26 09 	call	0x124c	; 0x124c <main>
      c6:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <TriggerCallBack>:
************************************************************************************************************/


void TriggerCallBack(void)
{
	TriggerState = TRIGGER;
      ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      d2:	08 95       	ret

000000d4 <timer_ovfCount>:
 * RETURN			: void
 */

void timer_ovfCount(void)
{
	global_u8OVFCounter++;
      d4:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <global_u8OVFCounter>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <global_u8OVFCounter>
      de:	08 95       	ret

000000e0 <APP_Init>:
}
void APP_Init(void)
{
	
	
	(void)KEYPAD_init();
      e0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <KEYPAD_init>
	(void)HTimer_enInit();
      e4:	0e 94 b1 05 	call	0xb62	; 0xb62 <HTimer_enInit>
	(void)HTimer_enCBF(timer_ovfCount);
      e8:	8a e6       	ldi	r24, 0x6A	; 106
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 c3 05 	call	0xb86	; 0xb86 <HTimer_enCBF>
	(void)HLCD_vidInit();
      f0:	0e 94 9c 07 	call	0xf38	; 0xf38 <HLCD_vidInit>
	(void)HSPI_MasterInit();
      f4:	0e 94 a2 04 	call	0x944	; 0x944 <HSPI_MasterInit>
	(void)H_EXTINT_create(EXTINT0,RISING_EDGE,TriggerCallBack);
      f8:	47 e6       	ldi	r20, 0x67	; 103
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 cb 05 	call	0xb96	; 0xb96 <H_EXTINT_create>
	(void)BUZ_Init(&st_g_Buzzer);
     104:	8c e6       	ldi	r24, 0x6C	; 108
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 8a 04 	call	0x914	; 0x914 <BUZ_Init>
	(void)HButton_ExtIntInit(DIO_PINB_2);
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	0e 94 83 04 	call	0x906	; 0x906 <HButton_ExtIntInit>
	(void)H_EXTINT_create(EXTINT2, RISING_EDGE,EXTINT_FUNC);
     112:	4f e8       	ldi	r20, 0x8F	; 143
     114:	51 e0       	ldi	r21, 0x01	; 1
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	0e 94 cb 05 	call	0xb96	; 0xb96 <H_EXTINT_create>
     11e:	08 95       	ret

00000120 <APP_Start>:


void APP_Start(void)
{
			
	switch(TriggerState)
     120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	79 f1       	breq	.+94     	; 0x186 <APP_Start+0x66>
     128:	18 f0       	brcs	.+6      	; 0x130 <APP_Start+0x10>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	b1 f1       	breq	.+108    	; 0x19a <APP_Start+0x7a>
     12e:	08 95       	ret
	{
		case TRIGGER:
		{
			welcomeFlag = 0;
     130:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <welcomeFlag>
			if(Get_pin(ATMpin)==PIN_NOT_OK)break;
     134:	88 ea       	ldi	r24, 0xA8	; 168
     136:	92 e0       	ldi	r25, 0x02	; 2
     138:	0e 94 31 02 	call	0x462	; 0x462 <Get_pin>
     13c:	84 30       	cpi	r24, 0x04	; 4
     13e:	09 f4       	brne	.+2      	; 0x142 <APP_Start+0x22>
     140:	ed c0       	rjmp	.+474    	; 0x31c <APP_Start+0x1fc>
			if(ATM_ValidatePIN() == PIN_MATCHED)
     142:	0e 94 74 03 	call	0x6e8	; 0x6e8 <ATM_ValidatePIN>
     146:	81 11       	cpse	r24, r1
     148:	04 c0       	rjmp	.+8      	; 0x152 <APP_Start+0x32>
			{
				TriggerState = CHECKING;
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     150:	08 95       	ret
                  
			}
			else
			{
				trialsFlag++;
     152:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     156:	8f 5f       	subi	r24, 0xFF	; 255
     158:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end>
				/* Lock system if max tries exceeded */
				if(trialsFlag == 3)
     15c:	83 30       	cpi	r24, 0x03	; 3
     15e:	09 f0       	breq	.+2      	; 0x162 <APP_Start+0x42>
     160:	dd c0       	rjmp	.+442    	; 0x31c <APP_Start+0x1fc>
				{
					HLCD_ClrDisplay();
     162:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
					HLCD_gotoXY(0,4);
     166:	64 e0       	ldi	r22, 0x04	; 4
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
					HLCD_WriteString("LOCKED");
     16e:	82 e9       	ldi	r24, 0x92	; 146
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
					deinitAtm(&st_g_Buzzer);
     176:	8c e6       	ldi	r24, 0x6C	; 108
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 ca 02 	call	0x594	; 0x594 <deinitAtm>
					TriggerState = IDLE;
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     184:	08 95       	ret
			//TriggerState = N_TRIGGER;
			break;
		}
		case N_TRIGGER:
		{
			if(welcomeFlag == 0)
     186:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <welcomeFlag>
     18a:	81 11       	cpse	r24, r1
     18c:	c7 c0       	rjmp	.+398    	; 0x31c <APP_Start+0x1fc>
			{
				Welcome();
     18e:	0e 94 c3 01 	call	0x386	; 0x386 <Welcome>
				welcomeFlag = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <welcomeFlag>
     198:	08 95       	ret
			break;
		}
        case CHECKING:
       {

		get_amount_left(Entered_amount);
     19a:	89 e6       	ldi	r24, 0x69	; 105
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 ce 02 	call	0x59c	; 0x59c <get_amount_left>
		if(!strcmp(Entered_amount,Default_Entered_amount))break;
     1a2:	61 e6       	ldi	r22, 0x61	; 97
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	89 e6       	ldi	r24, 0x69	; 105
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <strcmp>
     1ae:	89 2b       	or	r24, r25
     1b0:	09 f4       	brne	.+2      	; 0x1b4 <APP_Start+0x94>
     1b2:	b4 c0       	rjmp	.+360    	; 0x31c <APP_Start+0x1fc>
		HLCD_ClrDisplay();
     1b4:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
		DB_CHECK = DATABASE_checking(CARDpan,Entered_amount,&newAMOUNT);
     1b8:	42 ed       	ldi	r20, 0xD2	; 210
     1ba:	52 e0       	ldi	r21, 0x02	; 2
     1bc:	69 e6       	ldi	r22, 0x69	; 105
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	8d ed       	ldi	r24, 0xDD	; 221
     1c2:	92 e0       	ldi	r25, 0x02	; 2
     1c4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <DATABASE_checking>
     1c8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <DB_CHECK>
		switch(DB_CHECK){
     1cc:	82 30       	cpi	r24, 0x02	; 2
     1ce:	09 f4       	brne	.+2      	; 0x1d2 <APP_Start+0xb2>
     1d0:	43 c0       	rjmp	.+134    	; 0x258 <APP_Start+0x138>
     1d2:	28 f4       	brcc	.+10     	; 0x1de <APP_Start+0xbe>
     1d4:	88 23       	and	r24, r24
     1d6:	51 f0       	breq	.+20     	; 0x1ec <APP_Start+0xcc>
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	f9 f0       	breq	.+62     	; 0x21a <APP_Start+0xfa>
     1dc:	08 95       	ret
     1de:	83 30       	cpi	r24, 0x03	; 3
     1e0:	09 f4       	brne	.+2      	; 0x1e4 <APP_Start+0xc4>
     1e2:	59 c0       	rjmp	.+178    	; 0x296 <APP_Start+0x176>
     1e4:	84 30       	cpi	r24, 0x04	; 4
     1e6:	09 f4       	brne	.+2      	; 0x1ea <APP_Start+0xca>
     1e8:	79 c0       	rjmp	.+242    	; 0x2dc <APP_Start+0x1bc>
     1ea:	08 95       	ret
			case APPROVED:
			{
				ATM_ApprovedCard(newAMOUNT);
     1ec:	60 91 d2 02 	lds	r22, 0x02D2	; 0x8002d2 <newAMOUNT>
     1f0:	70 91 d3 02 	lds	r23, 0x02D3	; 0x8002d3 <newAMOUNT+0x1>
     1f4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <newAMOUNT+0x2>
     1f8:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <newAMOUNT+0x3>
     1fc:	0e 94 df 01 	call	0x3be	; 0x3be <ATM_ApprovedCard>
				HSPI_SendChar(ATM_REQUEST_EJECTED);
     200:	85 e4       	ldi	r24, 0x45	; 69
     202:	0e 94 bd 04 	call	0x97a	; 0x97a <HSPI_SendChar>
				strcpy(Entered_amount,Default_Entered_amount);
     206:	61 e6       	ldi	r22, 0x61	; 97
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	89 e6       	ldi	r24, 0x69	; 105
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <strcpy>
				TriggerState = N_TRIGGER;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     218:	08 95       	ret
			}
			case FRAUD_CARD:
			{
				deinitAtm(&st_g_Buzzer);
     21a:	8c e6       	ldi	r24, 0x6C	; 108
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	0e 94 ca 02 	call	0x594	; 0x594 <deinitAtm>
				HLCD_gotoXY(0, 4);
     222:	64 e0       	ldi	r22, 0x04	; 4
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
				HLCD_WriteString("This is a");
     22a:	89 e9       	ldi	r24, 0x99	; 153
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     232:	62 e0       	ldi	r22, 0x02	; 2
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
				HLCD_WriteString("Fraud Card");
     23a:	83 ea       	ldi	r24, 0xA3	; 163
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     242:	42 e0       	ldi	r20, 0x02	; 2
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
				TriggerState = IDLE;
     250:	83 e0       	ldi	r24, 0x03	; 3
     252:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     256:	08 95       	ret
			}
			case CARD_STOLEN:
			{
				deinitAtm(&st_g_Buzzer);
     258:	8c e6       	ldi	r24, 0x6C	; 108
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 ca 02 	call	0x594	; 0x594 <deinitAtm>
				HLCD_gotoXY(0, 4);
     260:	64 e0       	ldi	r22, 0x04	; 4
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
				HLCD_WriteString("This Card ");
     268:	8e ea       	ldi	r24, 0xAE	; 174
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     270:	62 e0       	ldi	r22, 0x02	; 2
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
				HLCD_WriteString("is Stolen");
     278:	89 eb       	ldi	r24, 0xB9	; 185
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     280:	42 e0       	ldi	r20, 0x02	; 2
     282:	61 e0       	ldi	r22, 0x01	; 1
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
				TriggerState = IDLE;
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     294:	08 95       	ret
			}
			case EXCEED_MAX_DAILY_AMOUNT:
			{
				
				HLCD_gotoXY(0, 4);
     296:	64 e0       	ldi	r22, 0x04	; 4
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
				HLCD_WriteString("Max Limit ");
     29e:	83 ec       	ldi	r24, 0xC3	; 195
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
				HLCD_gotoXY(1, 2);
     2a6:	62 e0       	ldi	r22, 0x02	; 2
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
				HLCD_WriteString("is Exceeded");
     2ae:	8e ec       	ldi	r24, 0xCE	; 206
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2b6:	42 e0       	ldi	r20, 0x02	; 2
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
				HLCD_ClrDisplay();
     2c4:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
				strcpy(Entered_amount,Default_Entered_amount);
     2c8:	61 e6       	ldi	r22, 0x61	; 97
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	89 e6       	ldi	r24, 0x69	; 105
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <strcpy>
				TriggerState = CHECKING;
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
     2da:	08 95       	ret
			}
			case INSUFFICIENT_FUND:
			{
				
				HLCD_gotoXY(0, 4);
     2dc:	64 e0       	ldi	r22, 0x04	; 4
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
				HLCD_WriteString("INSUFFICIENT ");
     2e4:	8a ed       	ldi	r24, 0xDA	; 218
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
				HLCD_gotoXY(1, 5);
     2ec:	65 e0       	ldi	r22, 0x05	; 5
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
				HLCD_WriteString("FUND");
     2f4:	88 ee       	ldi	r24, 0xE8	; 232
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
				HTIM0_SyncDelay(1, Seconds);
     2fc:	42 e0       	ldi	r20, 0x02	; 2
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
				strcpy(Entered_amount,Default_Entered_amount);
     30a:	61 e6       	ldi	r22, 0x61	; 97
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	89 e6       	ldi	r24, 0x69	; 105
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <strcpy>
				TriggerState = CHECKING;
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     31c:	08 95       	ret

0000031e <EXTINT_FUNC>:
	//Uchar8_t arr_g_CardPIN[5];
	//Uchar8_t arr_g_CardPAN[20];

	void Card_Trigger(void)
	{
		u8_g_ReceivePIN = 1;
     31e:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <counter.2219>
     322:	81 11       	cpse	r24, r1
     324:	10 c0       	rjmp	.+32     	; 0x346 <EXTINT_FUNC+0x28>
     326:	64 e6       	ldi	r22, 0x64	; 100
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 bb 05 	call	0xb76	; 0xb76 <HTimer_vidDelayMs>
     332:	4f e8       	ldi	r20, 0x8F	; 143
     334:	51 e0       	ldi	r21, 0x01	; 1
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	0e 94 cb 05 	call	0xb96	; 0xb96 <H_EXTINT_create>
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <counter.2219>
     344:	08 95       	ret
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	e9 f4       	brne	.+58     	; 0x384 <EXTINT_FUNC+0x66>
     34a:	0e 94 c0 05 	call	0xb80	; 0xb80 <HTimer_enStop>
     34e:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <global_u8OVFCounter>
     352:	9f ef       	ldi	r25, 0xFF	; 255
     354:	98 0f       	add	r25, r24
     356:	93 31       	cpi	r25, 0x13	; 19
     358:	18 f4       	brcc	.+6      	; 0x360 <EXTINT_FUNC+0x42>
     35a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <myState>
     35e:	05 c0       	rjmp	.+10     	; 0x36a <EXTINT_FUNC+0x4c>
     360:	84 31       	cpi	r24, 0x14	; 20
     362:	18 f0       	brcs	.+6      	; 0x36a <EXTINT_FUNC+0x4c>
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     36a:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <global_u8OVFCounter>
     36e:	4f e8       	ldi	r20, 0x8F	; 143
     370:	51 e0       	ldi	r21, 0x01	; 1
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	0e 94 cb 05 	call	0xb96	; 0xb96 <H_EXTINT_create>
     37a:	8a e0       	ldi	r24, 0x0A	; 10
     37c:	0e 94 83 04 	call	0x906	; 0x906 <HButton_ExtIntInit>
     380:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <counter.2219>
     384:	08 95       	ret

00000386 <Welcome>:
     386:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     392:	8d ee       	ldi	r24, 0xED	; 237
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     39a:	42 e0       	ldi	r20, 0x02	; 2
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
     3a8:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     3b4:	8c ef       	ldi	r24, 0xFC	; 252
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     3bc:	08 95       	ret

000003be <ATM_ApprovedCard>:
     3be:	cf 92       	push	r12
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	6b 01       	movw	r12, r22
     3c8:	7c 01       	movw	r14, r24
     3ca:	64 e0       	ldi	r22, 0x04	; 4
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     3d2:	8d e0       	ldi	r24, 0x0D	; 13
     3d4:	92 e0       	ldi	r25, 0x02	; 2
     3d6:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     3e2:	86 e1       	ldi	r24, 0x16	; 22
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     3ea:	42 e0       	ldi	r20, 0x02	; 2
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
     3f8:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     3fc:	64 e0       	ldi	r22, 0x04	; 4
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     404:	82 e2       	ldi	r24, 0x22	; 34
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     414:	8c e2       	ldi	r24, 0x2C	; 44
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     41c:	c7 01       	movw	r24, r14
     41e:	b6 01       	movw	r22, r12
     420:	0e 94 8e 08 	call	0x111c	; 0x111c <HLCD_DisplayFloat>
     424:	42 e0       	ldi	r20, 0x02	; 2
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
     432:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     43e:	86 e3       	ldi	r24, 0x36	; 54
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     446:	42 e0       	ldi	r20, 0x02	; 2
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
     454:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	08 95       	ret

00000462 <Get_pin>:
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	8c 01       	movw	r16, r24
     46c:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     478:	84 e4       	ldi	r24, 0x44	; 68
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     48e:	c0 e0       	ldi	r28, 0x00	; 0
     490:	2e c0       	rjmp	.+92     	; 0x4ee <Get_pin+0x8c>
     492:	0e 94 2d 07 	call	0xe5a	; 0xe5a <KEYPAD_GetButton>
     496:	81 11       	cpse	r24, r1
     498:	17 c0       	rjmp	.+46     	; 0x4c8 <Get_pin+0x66>
     49a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     49e:	81 11       	cpse	r24, r1
     4a0:	26 c0       	rjmp	.+76     	; 0x4ee <Get_pin+0x8c>
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     4a8:	f8 01       	movw	r30, r16
     4aa:	ec 0f       	add	r30, r28
     4ac:	f1 1d       	adc	r31, r1
     4ae:	80 e3       	ldi	r24, 0x30	; 48
     4b0:	80 83       	st	Z, r24
     4b2:	d1 e0       	ldi	r29, 0x01	; 1
     4b4:	dc 0f       	add	r29, r28
     4b6:	6c 2f       	mov	r22, r28
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     4be:	8a e2       	ldi	r24, 0x2A	; 42
     4c0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
     4c4:	cd 2f       	mov	r28, r29
     4c6:	13 c0       	rjmp	.+38     	; 0x4ee <Get_pin+0x8c>
     4c8:	d8 01       	movw	r26, r16
     4ca:	ac 0f       	add	r26, r28
     4cc:	b1 1d       	adc	r27, r1
     4ce:	e8 2f       	mov	r30, r24
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	e4 59       	subi	r30, 0x94	; 148
     4d4:	fe 4f       	sbci	r31, 0xFE	; 254
     4d6:	80 81       	ld	r24, Z
     4d8:	8c 93       	st	X, r24
     4da:	d1 e0       	ldi	r29, 0x01	; 1
     4dc:	dc 0f       	add	r29, r28
     4de:	6c 2f       	mov	r22, r28
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     4e6:	8a e2       	ldi	r24, 0x2A	; 42
     4e8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
     4ec:	cd 2f       	mov	r28, r29
     4ee:	c4 30       	cpi	r28, 0x04	; 4
     4f0:	20 f4       	brcc	.+8      	; 0x4fa <Get_pin+0x98>
     4f2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     4f6:	81 30       	cpi	r24, 0x01	; 1
     4f8:	61 f6       	brne	.-104    	; 0x492 <Get_pin+0x30>
     4fa:	c4 30       	cpi	r28, 0x04	; 4
     4fc:	b0 f4       	brcc	.+44     	; 0x52a <Get_pin+0xc8>
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     504:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     510:	83 e5       	ldi	r24, 0x53	; 83
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     518:	42 e0       	ldi	r20, 0x02	; 2
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 0b 05 	call	0xa16	; 0xa16 <HTIM0_SyncDelay>
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	01 c0       	rjmp	.+2      	; 0x52c <Get_pin+0xca>
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <PIN_checkPinMatching>:
     536:	00 97       	sbiw	r24, 0x00	; 0
     538:	49 f1       	breq	.+82     	; 0x58c <PIN_checkPinMatching+0x56>
     53a:	61 15       	cp	r22, r1
     53c:	71 05       	cpc	r23, r1
     53e:	41 f1       	breq	.+80     	; 0x590 <PIN_checkPinMatching+0x5a>
     540:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <strcmp>
     544:	89 2b       	or	r24, r25
     546:	89 f4       	brne	.+34     	; 0x56a <PIN_checkPinMatching+0x34>
     548:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     54c:	8d e5       	ldi	r24, 0x5D	; 93
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     554:	2f e3       	ldi	r18, 0x3F	; 63
     556:	82 e4       	ldi	r24, 0x42	; 66
     558:	9f e0       	ldi	r25, 0x0F	; 15
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	80 40       	sbci	r24, 0x00	; 0
     55e:	90 40       	sbci	r25, 0x00	; 0
     560:	e1 f7       	brne	.-8      	; 0x55a <PIN_checkPinMatching+0x24>
     562:	00 c0       	rjmp	.+0      	; 0x564 <PIN_checkPinMatching+0x2e>
     564:	00 00       	nop
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	08 95       	ret
     56a:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     56e:	89 e6       	ldi	r24, 0x69	; 105
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     576:	2f e3       	ldi	r18, 0x3F	; 63
     578:	82 e4       	ldi	r24, 0x42	; 66
     57a:	9f e0       	ldi	r25, 0x0F	; 15
     57c:	21 50       	subi	r18, 0x01	; 1
     57e:	80 40       	sbci	r24, 0x00	; 0
     580:	90 40       	sbci	r25, 0x00	; 0
     582:	e1 f7       	brne	.-8      	; 0x57c <PIN_checkPinMatching+0x46>
     584:	00 c0       	rjmp	.+0      	; 0x586 <PIN_checkPinMatching+0x50>
     586:	00 00       	nop
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	08 95       	ret
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	08 95       	ret
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	08 95       	ret

00000594 <deinitAtm>:
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	0e 94 98 04 	call	0x930	; 0x930 <BUZ_SetState>
     59a:	08 95       	ret

0000059c <get_amount_left>:
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	7c 01       	movw	r14, r24
     5ac:	0e 94 4f 08 	call	0x109e	; 0x109e <HLCD_ClrDisplay>
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     5b8:	89 e7       	ldi	r24, 0x79	; 121
     5ba:	92 e0       	ldi	r25, 0x02	; 2
     5bc:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     5c8:	c7 01       	movw	r24, r14
     5ca:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     5d4:	d1 2c       	mov	r13, r1
     5d6:	71 c0       	rjmp	.+226    	; 0x6ba <get_amount_left+0x11e>
     5d8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <KEYPAD_GetButton>
     5dc:	d8 2f       	mov	r29, r24
     5de:	81 11       	cpse	r24, r1
     5e0:	59 c0       	rjmp	.+178    	; 0x694 <get_amount_left+0xf8>
     5e2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     5e6:	81 11       	cpse	r24, r1
     5e8:	68 c0       	rjmp	.+208    	; 0x6ba <get_amount_left+0x11e>
     5ea:	82 e0       	ldi	r24, 0x02	; 2
     5ec:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
     5f2:	20 c0       	rjmp	.+64     	; 0x634 <get_amount_left+0x98>
     5f4:	c3 30       	cpi	r28, 0x03	; 3
     5f6:	79 f4       	brne	.+30     	; 0x616 <get_amount_left+0x7a>
     5f8:	87 01       	movw	r16, r14
     5fa:	0c 0f       	add	r16, r28
     5fc:	11 1d       	adc	r17, r1
     5fe:	f8 01       	movw	r30, r16
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	80 83       	st	Z, r24
     604:	6c 2f       	mov	r22, r28
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     60c:	f8 01       	movw	r30, r16
     60e:	80 81       	ld	r24, Z
     610:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
     614:	c5 e0       	ldi	r28, 0x05	; 5
     616:	87 01       	movw	r16, r14
     618:	0c 0f       	add	r16, r28
     61a:	11 1d       	adc	r17, r1
     61c:	f8 01       	movw	r30, r16
     61e:	81 81       	ldd	r24, Z+1	; 0x01
     620:	80 83       	st	Z, r24
     622:	6c 2f       	mov	r22, r28
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     62a:	f8 01       	movw	r30, r16
     62c:	80 81       	ld	r24, Z
     62e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
     632:	cf 5f       	subi	r28, 0xFF	; 255
     634:	c6 30       	cpi	r28, 0x06	; 6
     636:	f0 f2       	brcs	.-68     	; 0x5f4 <get_amount_left+0x58>
     638:	80 e3       	ldi	r24, 0x30	; 48
     63a:	f7 01       	movw	r30, r14
     63c:	86 83       	std	Z+6, r24	; 0x06
     63e:	66 e0       	ldi	r22, 0x06	; 6
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     646:	f7 01       	movw	r30, r14
     648:	86 81       	ldd	r24, Z+6	; 0x06
     64a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
     64e:	d3 94       	inc	r13
     650:	34 c0       	rjmp	.+104    	; 0x6ba <get_amount_left+0x11e>
     652:	c3 30       	cpi	r28, 0x03	; 3
     654:	79 f4       	brne	.+30     	; 0x674 <get_amount_left+0xd8>
     656:	87 01       	movw	r16, r14
     658:	0c 0f       	add	r16, r28
     65a:	11 1d       	adc	r17, r1
     65c:	f8 01       	movw	r30, r16
     65e:	82 81       	ldd	r24, Z+2	; 0x02
     660:	80 83       	st	Z, r24
     662:	6c 2f       	mov	r22, r28
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     66a:	f8 01       	movw	r30, r16
     66c:	80 81       	ld	r24, Z
     66e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
     672:	c5 e0       	ldi	r28, 0x05	; 5
     674:	87 01       	movw	r16, r14
     676:	0c 0f       	add	r16, r28
     678:	11 1d       	adc	r17, r1
     67a:	f8 01       	movw	r30, r16
     67c:	81 81       	ldd	r24, Z+1	; 0x01
     67e:	80 83       	st	Z, r24
     680:	6c 2f       	mov	r22, r28
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     688:	f8 01       	movw	r30, r16
     68a:	80 81       	ld	r24, Z
     68c:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
     690:	cf 5f       	subi	r28, 0xFF	; 255
     692:	01 c0       	rjmp	.+2      	; 0x696 <get_amount_left+0xfa>
     694:	c0 e0       	ldi	r28, 0x00	; 0
     696:	c6 30       	cpi	r28, 0x06	; 6
     698:	e0 f2       	brcs	.-72     	; 0x652 <get_amount_left+0xb6>
     69a:	ed 2f       	mov	r30, r29
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	e4 59       	subi	r30, 0x94	; 148
     6a0:	fe 4f       	sbci	r31, 0xFE	; 254
     6a2:	80 81       	ld	r24, Z
     6a4:	f7 01       	movw	r30, r14
     6a6:	86 83       	std	Z+6, r24	; 0x06
     6a8:	66 e0       	ldi	r22, 0x06	; 6
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 62 08 	call	0x10c4	; 0x10c4 <HLCD_gotoXY>
     6b0:	f7 01       	movw	r30, r14
     6b2:	86 81       	ldd	r24, Z+6	; 0x06
     6b4:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
     6b8:	d3 94       	inc	r13
     6ba:	f5 e0       	ldi	r31, 0x05	; 5
     6bc:	fd 15       	cp	r31, r13
     6be:	28 f0       	brcs	.+10     	; 0x6ca <get_amount_left+0x12e>
     6c0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	09 f0       	breq	.+2      	; 0x6ca <get_amount_left+0x12e>
     6c8:	87 cf       	rjmp	.-242    	; 0x5d8 <get_amount_left+0x3c>
     6ca:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <get_amount_left+0x12e>
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	08 95       	ret

000006e8 <ATM_ValidatePIN>:
	EN_PinState ATM_ValidatePIN(void)
	{
		EN_PinState u8_l_MatchPIN;
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PIN);
     6e8:	80 e5       	ldi	r24, 0x50	; 80
     6ea:	0e 94 bd 04 	call	0x97a	; 0x97a <HSPI_SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ee:	81 ee       	ldi	r24, 0xE1	; 225
     6f0:	94 e0       	ldi	r25, 0x04	; 4
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <ATM_ValidatePIN+0xa>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <ATM_ValidatePIN+0x10>
     6f8:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpin, 5);
     6fa:	65 e0       	ldi	r22, 0x05	; 5
     6fc:	87 ed       	ldi	r24, 0xD7	; 215
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HSPI_ReceiveData>
     704:	9f eb       	ldi	r25, 0xBF	; 191
     706:	27 e2       	ldi	r18, 0x27	; 39
     708:	89 e0       	ldi	r24, 0x09	; 9
     70a:	91 50       	subi	r25, 0x01	; 1
     70c:	20 40       	sbci	r18, 0x00	; 0
     70e:	80 40       	sbci	r24, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <ATM_ValidatePIN+0x22>
     712:	00 c0       	rjmp	.+0      	; 0x714 <ATM_ValidatePIN+0x2c>
     714:	00 00       	nop
		_delay_ms(3000);
		
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PAN);
     716:	87 e4       	ldi	r24, 0x47	; 71
     718:	0e 94 bd 04 	call	0x97a	; 0x97a <HSPI_SendChar>
     71c:	81 ee       	ldi	r24, 0xE1	; 225
     71e:	94 e0       	ldi	r25, 0x04	; 4
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <ATM_ValidatePIN+0x38>
     724:	00 c0       	rjmp	.+0      	; 0x726 <ATM_ValidatePIN+0x3e>
     726:	00 00       	nop
		_delay_ms(5);
		HSPI_ReceiveData(CARDpan, 20);
     728:	64 e1       	ldi	r22, 0x14	; 20
     72a:	8d ed       	ldi	r24, 0xDD	; 221
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <HSPI_ReceiveData>
		
		u8_l_MatchPIN = PIN_checkPinMatching(CARDpin, ATMpin);
     732:	68 ea       	ldi	r22, 0xA8	; 168
     734:	72 e0       	ldi	r23, 0x02	; 2
     736:	87 ed       	ldi	r24, 0xD7	; 215
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	0e 94 9b 02 	call	0x536	; 0x536 <PIN_checkPinMatching>
		
		return u8_l_MatchPIN;
	}
     73e:	08 95       	ret

00000740 <isBelowMaxDailyAmount>:
};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
     740:	66 e8       	ldi	r22, 0x86	; 134
     742:	72 e0       	ldi	r23, 0x02	; 2
     744:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <strcmp>
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     748:	18 16       	cp	r1, r24
     74a:	14 f0       	brlt	.+4      	; 0x750 <isBelowMaxDailyAmount+0x10>

};

EN_dataError_t isBelowMaxDailyAmount(Uchar8_t * amount)
{
    EN_dataError_t LOCAL_returnValue = APPROVED;
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	08 95       	ret
    Schar8_t state = strcmp(amount,MAX_TRANS_AMOUNT);
    if( state>0) LOCAL_returnValue = EXCEED_MAX_DAILY_AMOUNT;
     750:	83 e0       	ldi	r24, 0x03	; 3
    return LOCAL_returnValue;
}
     752:	08 95       	ret

00000754 <isValidPanAccount>:


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	8c 01       	movw	r16, r24
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     75c:	c0 e0       	ldi	r28, 0x00	; 0
     75e:	0c c0       	rjmp	.+24     	; 0x778 <isValidPanAccount+0x24>
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     760:	89 e1       	ldi	r24, 0x19	; 25
     762:	c8 9f       	mul	r28, r24
     764:	b0 01       	movw	r22, r0
     766:	11 24       	eor	r1, r1
     768:	69 58       	subi	r22, 0x89	; 137
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	c8 01       	movw	r24, r16
     76e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <strcmp>
     if(state == 0 )
     772:	88 23       	and	r24, r24
     774:	29 f0       	breq	.+10     	; 0x780 <isValidPanAccount+0x2c>
EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
    Uchar8_t loc_Counter;
    Schar8_t state;
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     776:	cf 5f       	subi	r28, 0xFF	; 255
     778:	ca 30       	cpi	r28, 0x0A	; 10
     77a:	90 f3       	brcs	.-28     	; 0x760 <isValidPanAccount+0xc>
}


EN_dataError_t isValidPanAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = FRAUD_CARD;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	01 c0       	rjmp	.+2      	; 0x782 <isValidPanAccount+0x2e>
    for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
    {
     state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     if(state == 0 )
      {
         LOCAL_returnValue = APPROVED;
     780:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
    }
	return LOCAL_returnValue;
}
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <isRunningAccount>:


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	7c 01       	movw	r14, r24
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     796:	c0 e0       	ldi	r28, 0x00	; 0
     798:	1d c0       	rjmp	.+58     	; 0x7d4 <isRunningAccount+0x4a>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     79a:	0c 2f       	mov	r16, r28
     79c:	10 e0       	ldi	r17, 0x00	; 0
     79e:	89 e1       	ldi	r24, 0x19	; 25
     7a0:	80 9f       	mul	r24, r16
     7a2:	b0 01       	movw	r22, r0
     7a4:	81 9f       	mul	r24, r17
     7a6:	70 0d       	add	r23, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	69 58       	subi	r22, 0x89	; 137
     7ac:	7f 4f       	sbci	r23, 0xFF	; 255
     7ae:	c7 01       	movw	r24, r14
     7b0:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <strcmp>
		if(state == 0 )
     7b4:	81 11       	cpse	r24, r1
     7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <isRunningAccount+0x48>
		{
            if(accountsDB[loc_Counter].state == RUNNING)
     7b8:	89 e1       	ldi	r24, 0x19	; 25
     7ba:	80 9f       	mul	r24, r16
     7bc:	f0 01       	movw	r30, r0
     7be:	81 9f       	mul	r24, r17
     7c0:	f0 0d       	add	r31, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	ee 58       	subi	r30, 0x8E	; 142
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	84 81       	ldd	r24, Z+4	; 0x04
     7ca:	88 23       	and	r24, r24
     7cc:	39 f0       	breq	.+14     	; 0x7dc <isRunningAccount+0x52>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <isRunningAccount+0x54>
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     7d2:	cf 5f       	subi	r28, 0xFF	; 255
     7d4:	ca 30       	cpi	r28, 0x0A	; 10
     7d6:	08 f3       	brcs	.-62     	; 0x79a <isRunningAccount+0x10>
}


EN_dataError_t isRunningAccount(Uchar8_t * pan)
{
	EN_dataError_t LOCAL_returnValue = CARD_STOLEN;
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	01 c0       	rjmp	.+2      	; 0x7de <isRunningAccount+0x54>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
		if(state == 0 )
		{
            if(accountsDB[loc_Counter].state == RUNNING)
			LOCAL_returnValue = APPROVED;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}
	return LOCAL_returnValue;
}
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	08 95       	ret

000007ea <isValidAccountAmount>:

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	7c 01       	movw	r14, r24
     80a:	cb 01       	movw	r24, r22
     80c:	6a 01       	movw	r12, r20
    float32_t Conv_amount = atof(amount);
     80e:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <atof>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     816:	c0 e0       	ldi	r28, 0x00	; 0
     818:	3d c0       	rjmp	.+122    	; 0x894 <__stack+0x35>
	{
		state = strcmp(pan,accountsDB[loc_Counter].primaryAccountNumber);
     81a:	0c 2f       	mov	r16, r28
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	89 e1       	ldi	r24, 0x19	; 25
     820:	80 9f       	mul	r24, r16
     822:	b0 01       	movw	r22, r0
     824:	81 9f       	mul	r24, r17
     826:	70 0d       	add	r23, r0
     828:	11 24       	eor	r1, r1
     82a:	69 58       	subi	r22, 0x89	; 137
     82c:	7f 4f       	sbci	r23, 0xFF	; 255
     82e:	c7 01       	movw	r24, r14
     830:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <strcmp>
		if(state == 0 )
     834:	81 11       	cpse	r24, r1
     836:	2d c0       	rjmp	.+90     	; 0x892 <__stack+0x33>
		{
			if(accountsDB[loc_Counter].balance >= Conv_amount)
     838:	89 e1       	ldi	r24, 0x19	; 25
     83a:	80 9f       	mul	r24, r16
     83c:	f0 01       	movw	r30, r0
     83e:	81 9f       	mul	r24, r17
     840:	f0 0d       	add	r31, r0
     842:	11 24       	eor	r1, r1
     844:	ee 58       	subi	r30, 0x8E	; 142
     846:	ff 4f       	sbci	r31, 0xFF	; 255
     848:	40 80       	ld	r4, Z
     84a:	51 80       	ldd	r5, Z+1	; 0x01
     84c:	62 80       	ldd	r6, Z+2	; 0x02
     84e:	73 80       	ldd	r7, Z+3	; 0x03
     850:	a3 01       	movw	r20, r6
     852:	92 01       	movw	r18, r4
     854:	c5 01       	movw	r24, r10
     856:	b4 01       	movw	r22, r8
     858:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__cmpsf2>
     85c:	18 16       	cp	r1, r24
     85e:	cc f0       	brlt	.+50     	; 0x892 <__stack+0x33>
            {
              accountsDB[loc_Counter].balance-=Conv_amount;
     860:	a5 01       	movw	r20, r10
     862:	94 01       	movw	r18, r8
     864:	c3 01       	movw	r24, r6
     866:	b2 01       	movw	r22, r4
     868:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__subsf3>
     86c:	29 e1       	ldi	r18, 0x19	; 25
     86e:	20 9f       	mul	r18, r16
     870:	f0 01       	movw	r30, r0
     872:	21 9f       	mul	r18, r17
     874:	f0 0d       	add	r31, r0
     876:	11 24       	eor	r1, r1
     878:	ee 58       	subi	r30, 0x8E	; 142
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	60 83       	st	Z, r22
     87e:	71 83       	std	Z+1, r23	; 0x01
     880:	82 83       	std	Z+2, r24	; 0x02
     882:	93 83       	std	Z+3, r25	; 0x03
              *newAmount = accountsDB[loc_Counter].balance;
     884:	f6 01       	movw	r30, r12
     886:	60 83       	st	Z, r22
     888:	71 83       	std	Z+1, r23	; 0x01
     88a:	82 83       	std	Z+2, r24	; 0x02
     88c:	93 83       	std	Z+3, r25	; 0x03
              LOCAL_returnValue = APPROVED;
     88e:	80 e0       	ldi	r24, 0x00	; 0
              break;
     890:	05 c0       	rjmp	.+10     	; 0x89c <__stack+0x3d>
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
	Uchar8_t loc_Counter;
	Schar8_t state;
	for(loc_Counter = 0 ; loc_Counter<DB_SIZE;loc_Counter++)
     892:	cf 5f       	subi	r28, 0xFF	; 255
     894:	ca 30       	cpi	r28, 0x0A	; 10
     896:	08 f4       	brcc	.+2      	; 0x89a <__stack+0x3b>
     898:	c0 cf       	rjmp	.-128    	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
}

EN_dataError_t isValidAccountAmount(Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
    float32_t Conv_amount = atof(amount);
	EN_dataError_t LOCAL_returnValue = INSUFFICIENT_FUND;
     89a:	84 e0       	ldi	r24, 0x04	; 4
            }
			
		}
	}
	return LOCAL_returnValue;
}
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	7f 90       	pop	r7
     8b4:	6f 90       	pop	r6
     8b6:	5f 90       	pop	r5
     8b8:	4f 90       	pop	r4
     8ba:	08 95       	ret

000008bc <DATABASE_checking>:


EN_dataError_t DATABASE_checking (Uchar8_t * pan,Uchar8_t * amount,float32_t *newAmount)
{
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	ec 01       	movw	r28, r24
     8ca:	8b 01       	movw	r16, r22
     8cc:	7a 01       	movw	r14, r20
    
    EN_dataError_t Returend_Val;
    Returend_Val = isValidPanAccount(pan);
     8ce:	0e 94 aa 03 	call	0x754	; 0x754 <isValidPanAccount>
    if(Returend_Val == FRAUD_CARD) return Returend_Val;
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	89 f0       	breq	.+34     	; 0x8f8 <DATABASE_checking+0x3c>
    Returend_Val = isRunningAccount(pan);
     8d6:	ce 01       	movw	r24, r28
     8d8:	0e 94 c5 03 	call	0x78a	; 0x78a <isRunningAccount>
    if(Returend_Val == CARD_STOLEN) return Returend_Val;
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	61 f0       	breq	.+24     	; 0x8f8 <DATABASE_checking+0x3c>
    Returend_Val = isBelowMaxDailyAmount(amount);
     8e0:	c8 01       	movw	r24, r16
     8e2:	0e 94 a0 03 	call	0x740	; 0x740 <isBelowMaxDailyAmount>
    if(Returend_Val == EXCEED_MAX_DAILY_AMOUNT) return Returend_Val;
     8e6:	83 30       	cpi	r24, 0x03	; 3
     8e8:	39 f0       	breq	.+14     	; 0x8f8 <DATABASE_checking+0x3c>
    Returend_Val = isValidAccountAmount(pan , amount,newAmount);
     8ea:	a7 01       	movw	r20, r14
     8ec:	b8 01       	movw	r22, r16
     8ee:	ce 01       	movw	r24, r28
     8f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <isValidAccountAmount>
    if(Returend_Val == INSUFFICIENT_FUND) return Returend_Val;
     8f4:	84 30       	cpi	r24, 0x04	; 4
     8f6:	01 f0       	breq	.+0      	; 0x8f8 <DATABASE_checking+0x3c>
    
    
    Returend_Val = APPROVED;
    
    
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	08 95       	ret

00000906 <HButton_ExtIntInit>:

enu_buttonError_t HButton_ExtIntInit(enu_pin en_pinx)
{
	enu_buttonError_t errorStatus = BUTTON_OK;

	if ( en_pinx < PIN_INVALID )
     906:	80 32       	cpi	r24, 0x20	; 32
     908:	18 f4       	brcc	.+6      	; 0x910 <HButton_ExtIntInit+0xa>
	{
		DIO_s8SETPinVal(en_pinx, HIGH);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	{
		errorStatus = BUTTON_OK;
	}

	return errorStatus;
}
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	08 95       	ret

00000914 <BUZ_Init>:

/*************************************************************************************************************
 * 											Function Implementation
 ************************************************************************************************************/
void BUZ_Init(st_Buzzer_t* pst_a_buzzer)
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	ec 01       	movw	r28, r24
	DIO_s8SETPinDir(pst_a_buzzer->BuzzerPin, OUTPUT);
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	88 81       	ld	r24, Y
     91e:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
	DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, LOW);
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	88 81       	ld	r24, Y
     926:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
}
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <BUZ_SetState>:

en_BuzzerErrorState_t BUZ_Enable(st_Buzzer_t* pst_a_buzzer);
en_BuzzerErrorState_t BUZ_SetState(st_Buzzer_t* pst_a_buzzer, en_BuzzerState_t u16_a_state)
{
	if(pst_a_buzzer != NULL)
     930:	00 97       	sbiw	r24, 0x00	; 0
     932:	31 f0       	breq	.+12     	; 0x940 <BUZ_SetState+0x10>
     934:	fc 01       	movw	r30, r24
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
     936:	80 81       	ld	r24, Z
     938:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	else
	{
		return BUZ_NOK;
	}
	
	return BUZ_OK;
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	08 95       	ret
	{
		DIO_s8SETPinVal(pst_a_buzzer->BuzzerPin, u16_a_state);
	}
	else
	{
		return BUZ_NOK;
     940:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return BUZ_OK;
     942:	08 95       	ret

00000944 <HSPI_MasterInit>:
	{
		return HSPI_NOK;
	}
	
	return HSPI_OK;	
}
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	8d e0       	ldi	r24, 0x0D	; 13
     948:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	8f e0       	ldi	r24, 0x0F	; 15
     950:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	8c e0       	ldi	r24, 0x0C	; 12
     958:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	8c e0       	ldi	r24, 0x0C	; 12
     960:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	8e e0       	ldi	r24, 0x0E	; 14
     968:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     96c:	62 e0       	ldi	r22, 0x02	; 2
     96e:	8a e0       	ldi	r24, 0x0A	; 10
     970:	0e 94 d5 09 	call	0x13aa	; 0x13aa <EXTINT_init>
     974:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SPI_MasterInit>
     978:	08 95       	ret

0000097a <HSPI_SendChar>:
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	1f 92       	push	r1
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	18 2f       	mov	r17, r24
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	8c e0       	ldi	r24, 0x0C	; 12
     98c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     990:	be 01       	movw	r22, r28
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	81 2f       	mov	r24, r17
     998:	0e 94 08 0b 	call	0x1610	; 0x1610 <SPI_TranscieveChar>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	8c e0       	ldi	r24, 0x0C	; 12
     9a0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     9a4:	0f 90       	pop	r0
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	08 95       	ret

000009ae <HSPI_ReceiveData>:
 * \param u8_a_DataSize: size of storage buffer
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
     9ae:	cf 92       	push	r12
     9b0:	df 92       	push	r13
     9b2:	ef 92       	push	r14
     9b4:	ff 92       	push	r15
     9b6:	0f 93       	push	r16
     9b8:	1f 93       	push	r17
     9ba:	cf 93       	push	r28
     9bc:	df 93       	push	r29
     9be:	1f 92       	push	r1
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	6c 01       	movw	r12, r24
     9c6:	06 2f       	mov	r16, r22
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;

	/* Select Slave */
	DIO_s8SETPinVal(HSPI_SS, LOW);	
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	8c e0       	ldi	r24, 0x0C	; 12
     9cc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>

	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
     9d0:	be 01       	movw	r22, r28
     9d2:	6f 5f       	subi	r22, 0xFF	; 255
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	83 e2       	ldi	r24, 0x23	; 35
     9d8:	0e 94 08 0b 	call	0x1610	; 0x1610 <SPI_TranscieveChar>
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;
     9dc:	10 e0       	ldi	r17, 0x00	; 0
	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
	
	do
	{
		SPI_TranscieveChar(DATA_END, &pu8_a_data[u8_l_DataIterator]);
     9de:	76 01       	movw	r14, r12
     9e0:	e1 0e       	add	r14, r17
     9e2:	f1 1c       	adc	r15, r1
     9e4:	b7 01       	movw	r22, r14
     9e6:	83 e2       	ldi	r24, 0x23	; 35
     9e8:	0e 94 08 0b 	call	0x1610	; 0x1610 <SPI_TranscieveChar>
						
	}while((pu8_a_data[u8_l_DataIterator++]!=DATA_END) && (u8_l_DataIterator < u8_a_DataSize));
     9ec:	1f 5f       	subi	r17, 0xFF	; 255
     9ee:	f7 01       	movw	r30, r14
     9f0:	80 81       	ld	r24, Z
     9f2:	83 32       	cpi	r24, 0x23	; 35
     9f4:	11 f0       	breq	.+4      	; 0x9fa <HSPI_ReceiveData+0x4c>
     9f6:	10 17       	cp	r17, r16
     9f8:	90 f3       	brcs	.-28     	; 0x9de <HSPI_ReceiveData+0x30>
	
	/* Deselect Slave */
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	8c e0       	ldi	r24, 0x0C	; 12
     9fe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
}
     a02:	0f 90       	pop	r0
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <HTIM0_SyncDelay>:
extern Uchar8_t u8_g_TotalOVF;

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
     a16:	8f 92       	push	r8
     a18:	9f 92       	push	r9
     a1a:	af 92       	push	r10
     a1c:	bf 92       	push	r11
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <HTIM0_SyncDelay+0x1a>
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	6b 01       	movw	r12, r22
     a36:	7c 01       	movw	r14, r24
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
	Uint16_t Local_TotalTicks;
	float Local_TickTime;
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
     a38:	42 30       	cpi	r20, 0x02	; 2
     a3a:	59 f4       	brne	.+22     	; 0xa52 <HTIM0_SyncDelay+0x3c>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	60 e4       	ldi	r22, 0x40	; 64
     a42:	72 e4       	ldi	r23, 0x42	; 66
     a44:	8f e0       	ldi	r24, 0x0F	; 15
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <__mulsi3>
     a4c:	6b 01       	movw	r12, r22
     a4e:	7c 01       	movw	r14, r24
     a50:	0d c0       	rjmp	.+26     	; 0xa6c <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
     a52:	41 30       	cpi	r20, 0x01	; 1
     a54:	49 f4       	brne	.+18     	; 0xa68 <HTIM0_SyncDelay+0x52>
     a56:	a8 ee       	ldi	r26, 0xE8	; 232
     a58:	b3 e0       	ldi	r27, 0x03	; 3
     a5a:	9b 01       	movw	r18, r22
     a5c:	ac 01       	movw	r20, r24
     a5e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__muluhisi3>
     a62:	6b 01       	movw	r12, r22
     a64:	7c 01       	movw	r14, r24
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <HTIM0_SyncDelay+0x56>
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
     a68:	41 11       	cpse	r20, r1
     a6a:	6b c0       	rjmp	.+214    	; 0xb42 <HTIM0_SyncDelay+0x12c>
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     a6c:	88 e8       	ldi	r24, 0x88	; 136
     a6e:	c8 16       	cp	r12, r24
     a70:	83 e1       	ldi	r24, 0x13	; 19
     a72:	d8 06       	cpc	r13, r24
     a74:	e1 04       	cpc	r14, r1
     a76:	f1 04       	cpc	r15, r1
     a78:	c8 f0       	brcs	.+50     	; 0xaac <HTIM0_SyncDelay+0x96>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     a7a:	88 ea       	ldi	r24, 0xA8	; 168
     a7c:	c8 16       	cp	r12, r24
     a7e:	81 e6       	ldi	r24, 0x61	; 97
     a80:	d8 06       	cpc	r13, r24
     a82:	e1 04       	cpc	r14, r1
     a84:	f1 04       	cpc	r15, r1
     a86:	a0 f0       	brcs	.+40     	; 0xab0 <HTIM0_SyncDelay+0x9a>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     a88:	88 e4       	ldi	r24, 0x48	; 72
     a8a:	c8 16       	cp	r12, r24
     a8c:	88 ee       	ldi	r24, 0xE8	; 232
     a8e:	d8 06       	cpc	r13, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	e8 06       	cpc	r14, r24
     a94:	f1 04       	cpc	r15, r1
     a96:	70 f0       	brcs	.+28     	; 0xab4 <HTIM0_SyncDelay+0x9e>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
     a98:	80 e2       	ldi	r24, 0x20	; 32
     a9a:	c8 16       	cp	r12, r24
     a9c:	81 ea       	ldi	r24, 0xA1	; 161
     a9e:	d8 06       	cpc	r13, r24
     aa0:	87 e0       	ldi	r24, 0x07	; 7
     aa2:	e8 06       	cpc	r14, r24
     aa4:	f1 04       	cpc	r15, r1
     aa6:	40 f4       	brcc	.+16     	; 0xab8 <HTIM0_SyncDelay+0xa2>
     aa8:	14 e0       	ldi	r17, 0x04	; 4
     aaa:	07 c0       	rjmp	.+14     	; 0xaba <HTIM0_SyncDelay+0xa4>
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
	
	/* Set prescaler according to delay time */
	if(u32_a_delay < MAX_CLK_DEV1_DELAY  )	{u8_l_prescaler = TIM_DIV_BY_1;}
     aac:	11 e0       	ldi	r17, 0x01	; 1
     aae:	05 c0       	rjmp	.+10     	; 0xaba <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV8_DELAY  ) {u8_l_prescaler = TIM_DIV_BY_8;}
     ab0:	12 e0       	ldi	r17, 0x02	; 2
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV64_DELAY ) {u8_l_prescaler = TIM_DIV_BY_64;}
     ab4:	13 e0       	ldi	r17, 0x03	; 3
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <HTIM0_SyncDelay+0xa4>
	else if(u32_a_delay < MAX_CLK_DEV256_DELAY) {u8_l_prescaler = TIM_DIV_BY_256;}
	else {u8_l_prescaler = TIM_DIV_BY_1024;}
     ab8:	15 e0       	ldi	r17, 0x05	; 5
	
	Local_TickTime = arr_gs_prescalers[u8_l_prescaler-1]/TIM0_PRESCALER;
     aba:	e1 2f       	mov	r30, r17
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	31 97       	sbiw	r30, 0x01	; 1
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	e2 57       	subi	r30, 0x72	; 114
     ac6:	fd 4f       	sbci	r31, 0xFD	; 253
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	76 95       	lsr	r23
     ace:	67 95       	ror	r22
     ad0:	76 95       	lsr	r23
     ad2:	67 95       	ror	r22
     ad4:	76 95       	lsr	r23
     ad6:	67 95       	ror	r22
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__floatunsisf>
     ae0:	4b 01       	movw	r8, r22
     ae2:	5c 01       	movw	r10, r24
	Local_TotalTicks = (Uint16_t)(u32_a_delay/Local_TickTime);
     ae4:	c7 01       	movw	r24, r14
     ae6:	b6 01       	movw	r22, r12
     ae8:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__floatunsisf>
     aec:	a5 01       	movw	r20, r10
     aee:	94 01       	movw	r18, r8
     af0:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__divsf3>
     af4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fixunssfsi>
     af8:	f6 2e       	mov	r15, r22
	Local_TotalOverFlows = Local_TotalTicks/TIM0_MAX_TICKS;
     afa:	07 2f       	mov	r16, r23
	
	/* Initialize timer in normal mode */
	TIM0_voidInit(NormalMode);
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <TIM0_voidInit>
	
	/* Set timer start value */
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
     b02:	8f 2d       	mov	r24, r15
     b04:	81 95       	neg	r24
     b06:	0e 94 aa 0b 	call	0x1754	; 0x1754 <TIM0_SetValue>
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
     b0a:	81 2f       	mov	r24, r17
     b0c:	0e 94 92 0b 	call	0x1724	; 0x1724 <TIM0_Start>

/*================================= Function Implementation =================================*/

en_HTIMErrorState_t HTIM0_SyncDelay(Uint32_t u32_a_delay, en_timeUnits_t Copy_timeUnit)
{
	Uchar8_t u8_l_prescaler, Local_TotalOverFlows, Local_OverFlowCounter=0, u8_l_OverflowFlag, u8_l_TimState;
     b10:	10 e0       	ldi	r17, 0x00	; 0
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     b12:	11 c0       	rjmp	.+34     	; 0xb36 <HTIM0_SyncDelay+0x120>
	{
		/* Wait until the overflow flag is raised */
		do
		{
			TIM0_GetOVF(&u8_l_OverflowFlag);
     b14:	ce 01       	movw	r24, r28
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	0e 94 ac 0b 	call	0x1758	; 0x1758 <TIM0_GetOVF>
			TIM0_GetState(&u8_l_TimState);
     b1c:	ce 01       	movw	r24, r28
     b1e:	02 96       	adiw	r24, 0x02	; 2
     b20:	0e 94 ba 0b 	call	0x1774	; 0x1774 <TIM0_GetState>
		}
		while(!u8_l_OverflowFlag && u8_l_TimState);
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	81 11       	cpse	r24, r1
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <HTIM0_SyncDelay+0x11a>
     b2a:	8a 81       	ldd	r24, Y+2	; 0x02
     b2c:	81 11       	cpse	r24, r1
     b2e:	f2 cf       	rjmp	.-28     	; 0xb14 <HTIM0_SyncDelay+0xfe>
		
		/* Clear the overflow flag */
		TIM0_ClearOVF();
     b30:	0e 94 b6 0b 	call	0x176c	; 0x176c <TIM0_ClearOVF>
		
		Local_OverFlowCounter++;
     b34:	1f 5f       	subi	r17, 0xFF	; 255
	TIM0_SetValue(TIM0_MAX_TICKS-(Local_TotalTicks%TIM0_MAX_TICKS));
	
	/* Start Timer */
	TIM0_Start(u8_l_prescaler);
	
	while(Local_OverFlowCounter <= Local_TotalOverFlows)
     b36:	01 17       	cp	r16, r17
     b38:	68 f7       	brcc	.-38     	; 0xb14 <HTIM0_SyncDelay+0xfe>
		TIM0_ClearOVF();
		
		Local_OverFlowCounter++;
	}
	
	TIM0_Stop();
     b3a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <TIM0_Stop>
	
	return TIM_OK;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <HTIM0_SyncDelay+0x12e>
	
	/* Get Value in micro seconds */
	if(Copy_timeUnit == Seconds)	{u32_a_delay *= SEC_TO_uSEC;}
	else if(Copy_timeUnit == mSeconds)	{u32_a_delay *= mSEC_TO_uSEC;}
	else if(Copy_timeUnit == uSeconds)	{/* Do Nothing */}
	else return TIM_NOK;
     b42:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM0_Stop();
	
	return TIM_OK;
}
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	cf 90       	pop	r12
     b58:	bf 90       	pop	r11
     b5a:	af 90       	pop	r10
     b5c:	9f 90       	pop	r9
     b5e:	8f 90       	pop	r8
     b60:	08 95       	ret

00000b62 <HTimer_enInit>:
 ************************************************************************************************************/
enu_HTimerError_t HTimer_enInit(void)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	(void)enuTimer2_init (OVF_MODE);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 08 0c 	call	0x1810	; 0x1810 <enuTimer2_init>
	(void)u8Timer2_setPrescallar(TIMER_PRE_256);
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	0e 94 36 0c 	call	0x186c	; 0x186c <u8Timer2_setPrescallar>
	(void)vidTimer2_OvfIrqEnable();
     b6e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vidTimer2_OvfIrqEnable>

	return errorStatus;

}
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	08 95       	ret

00000b76 <HTimer_vidDelayMs>:
/*************************************************************************************************************/
void HTimer_vidDelayMs( Uint32_t u32_delay )
{
	(void)u8Timer2_setTime_ms(u32_delay);
     b76:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <u8Timer2_setTime_ms>
	(void)vidTimer2_start();
     b7a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <vidTimer2_start>
     b7e:	08 95       	ret

00000b80 <HTimer_enStop>:

enu_HTimerError_t HTimer_enStop(void)
{
	enu_HTimerError_t errorStatus;

	errorStatus = vidTimer2_stop();
     b80:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <vidTimer2_stop>

	return errorStatus;

}
     b84:	08 95       	ret

00000b86 <HTimer_enCBF>:
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;

	if(pFunc != NULL)
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	21 f0       	breq	.+8      	; 0xb92 <HTimer_enCBF+0xc>
	{
		vidTimer2_setcbf_OVF(pFunc);
     b8a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <vidTimer2_setcbf_OVF>

}
/*************************************************************************************************************/
enu_HTimerError_t HTimer_enCBF(ptr_funcc pFunc)
{
	enu_HTimerError_t errorStatus = TIMER_OK;
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	08 95       	ret
	if(pFunc != NULL)
	{
		vidTimer2_setcbf_OVF(pFunc);

	}else{
		errorStatus = TIMER_NOK;
     b92:	81 e0       	ldi	r24, 0x01	; 1
	}

	return errorStatus;

}
     b94:	08 95       	ret

00000b96 <H_EXTINT_create>:
ARGS        : takes the EXINT_NUMBER( INT0,INT1 OR INT2) and sense control and and pointer to the function we want to execute when interrupt occurs.
return      : return EXTINT_OK if the EXINT_NUMBER initializes correctly, EXTINT_NOT_OK otherwise
*/

EN_EXTINT_ERROR H_EXTINT_create(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense,void(*ptrfunc)(void))
{
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	c8 2f       	mov	r28, r24
     b9e:	8a 01       	movw	r16, r20
	if(!EXTINT_init(INTx,INTxSense) && !EXTINT_CallBack(INTx,ptrfunc)) return EXTINT_OK;
     ba0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <EXTINT_init>
     ba4:	81 11       	cpse	r24, r1
     ba6:	07 c0       	rjmp	.+14     	; 0xbb6 <H_EXTINT_create+0x20>
     ba8:	b8 01       	movw	r22, r16
     baa:	8c 2f       	mov	r24, r28
     bac:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <EXTINT_CallBack>
     bb0:	81 11       	cpse	r24, r1
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <H_EXTINT_create+0x24>
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <H_EXTINT_create+0x26>
	return EXTINT_NOT_OK;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <H_EXTINT_create+0x26>
     bba:	81 e0       	ldi	r24, 0x01	; 1
	
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	08 95       	ret

00000bc4 <KEYPAD_init>:
 * 											Function Implementation
 ************************************************************************************************************/
void KEYPAD_init()
{
	// INITIALIZE ROWS AS OUTPUTS
	DIO_s8SETPinDir(R1,OUTPUT);
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	82 e1       	ldi	r24, 0x12	; 18
     bc8:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R2,OUTPUT);
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	83 e1       	ldi	r24, 0x13	; 19
     bd0:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(R3,OUTPUT);
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	84 e1       	ldi	r24, 0x14	; 20
     bd8:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
	// INITIALIZE COLUMNS AS INPUTS
	DIO_s8SETPinDir(C1,INPUT);
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	85 e1       	ldi	r24, 0x15	; 21
     be0:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C2,INPUT);
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	86 e1       	ldi	r24, 0x16	; 22
     be8:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
	DIO_s8SETPinDir(C3,INPUT);
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	87 e1       	ldi	r24, 0x17	; 23
     bf0:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     bf4:	08 95       	ret

00000bf6 <checkR1>:
	
	
}
EN_KEYPAD_BTNS checkR1()
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	1f 92       	push	r1
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
	DIO_s8SETPinVal(C1,HIGH);
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	85 e1       	ldi	r24, 0x15	; 21
     c04:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	86 e1       	ldi	r24, 0x16	; 22
     c0c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     c10:	61 e0       	ldi	r22, 0x01	; 1
     c12:	87 e1       	ldi	r24, 0x17	; 23
     c14:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	83 e1       	ldi	r24, 0x13	; 19
     c1c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	84 e1       	ldi	r24, 0x14	; 20
     c24:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,LOW);
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	82 e1       	ldi	r24, 0x12	; 18
     c2c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     c34:	be 01       	movw	r22, r28
     c36:	6f 5f       	subi	r22, 0xFF	; 255
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	85 e1       	ldi	r24, 0x15	; 21
     c3c:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	88 23       	and	r24, r24
     c44:	39 f0       	breq	.+14     	; 0xc54 <checkR1+0x5e>
     c46:	0b c0       	rjmp	.+22     	; 0xc5e <checkR1+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     c48:	be 01       	movw	r22, r28
     c4a:	6f 5f       	subi	r22, 0xFF	; 255
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	85 e1       	ldi	r24, 0x15	; 21
     c50:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	88 23       	and	r24, r24
     c58:	b9 f3       	breq	.-18     	; 0xc48 <checkR1+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_1;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	2e c0       	rjmp	.+92     	; 0xcba <checkR1+0xc4>
	}
	val = 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	86 e1       	ldi	r24, 0x16	; 22
     c6a:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	88 23       	and	r24, r24
     c72:	39 f0       	breq	.+14     	; 0xc82 <checkR1+0x8c>
     c74:	0b c0       	rjmp	.+22     	; 0xc8c <checkR1+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     c76:	be 01       	movw	r22, r28
     c78:	6f 5f       	subi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	86 e1       	ldi	r24, 0x16	; 22
     c7e:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	88 23       	and	r24, r24
     c86:	b9 f3       	breq	.-18     	; 0xc76 <checkR1+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_2;
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	17 c0       	rjmp	.+46     	; 0xcba <checkR1+0xc4>
	}
	val = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     c90:	be 01       	movw	r22, r28
     c92:	6f 5f       	subi	r22, 0xFF	; 255
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	87 e1       	ldi	r24, 0x17	; 23
     c98:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	88 23       	and	r24, r24
     ca0:	41 f0       	breq	.+16     	; 0xcb2 <checkR1+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
	}
	return KEY_NOTHING;
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0a c0       	rjmp	.+20     	; 0xcba <checkR1+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     ca6:	be 01       	movw	r22, r28
     ca8:	6f 5f       	subi	r22, 0xFF	; 255
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	87 e1       	ldi	r24, 0x17	; 23
     cae:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	88 23       	and	r24, r24
     cb6:	b9 f3       	breq	.-18     	; 0xca6 <checkR1+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_3;
     cb8:	83 e0       	ldi	r24, 0x03	; 3
	}
	return KEY_NOTHING;
	
}
     cba:	0f 90       	pop	r0
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <checkR2>:
EN_KEYPAD_BTNS checkR2()
{
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	1f 92       	push	r1
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	85 e1       	ldi	r24, 0x15	; 21
     cd0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	86 e1       	ldi	r24, 0x16	; 22
     cd8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	87 e1       	ldi	r24, 0x17	; 23
     ce0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	82 e1       	ldi	r24, 0x12	; 18
     ce8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,HIGH);
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	84 e1       	ldi	r24, 0x14	; 20
     cf0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,LOW);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	83 e1       	ldi	r24, 0x13	; 19
     cf8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     d00:	be 01       	movw	r22, r28
     d02:	6f 5f       	subi	r22, 0xFF	; 255
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	85 e1       	ldi	r24, 0x15	; 21
     d08:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	88 23       	and	r24, r24
     d10:	39 f0       	breq	.+14     	; 0xd20 <checkR2+0x5e>
     d12:	0b c0       	rjmp	.+22     	; 0xd2a <checkR2+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     d14:	be 01       	movw	r22, r28
     d16:	6f 5f       	subi	r22, 0xFF	; 255
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	85 e1       	ldi	r24, 0x15	; 21
     d1c:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	88 23       	and	r24, r24
     d24:	b9 f3       	breq	.-18     	; 0xd14 <checkR2+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_4;
     d26:	84 e0       	ldi	r24, 0x04	; 4
     d28:	2e c0       	rjmp	.+92     	; 0xd86 <checkR2+0xc4>
	}
	val = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     d2e:	be 01       	movw	r22, r28
     d30:	6f 5f       	subi	r22, 0xFF	; 255
     d32:	7f 4f       	sbci	r23, 0xFF	; 255
     d34:	86 e1       	ldi	r24, 0x16	; 22
     d36:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 23       	and	r24, r24
     d3e:	39 f0       	breq	.+14     	; 0xd4e <checkR2+0x8c>
     d40:	0b c0       	rjmp	.+22     	; 0xd58 <checkR2+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	86 e1       	ldi	r24, 0x16	; 22
     d4a:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	88 23       	and	r24, r24
     d52:	b9 f3       	breq	.-18     	; 0xd42 <checkR2+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_5;
     d54:	85 e0       	ldi	r24, 0x05	; 5
     d56:	17 c0       	rjmp	.+46     	; 0xd86 <checkR2+0xc4>
	}
	val = 1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     d5c:	be 01       	movw	r22, r28
     d5e:	6f 5f       	subi	r22, 0xFF	; 255
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	87 e1       	ldi	r24, 0x17	; 23
     d64:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 23       	and	r24, r24
     d6c:	41 f0       	breq	.+16     	; 0xd7e <checkR2+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
	}
	return KEY_NOTHING;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <checkR2+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     d72:	be 01       	movw	r22, r28
     d74:	6f 5f       	subi	r22, 0xFF	; 255
     d76:	7f 4f       	sbci	r23, 0xFF	; 255
     d78:	87 e1       	ldi	r24, 0x17	; 23
     d7a:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 23       	and	r24, r24
     d82:	b9 f3       	breq	.-18     	; 0xd72 <checkR2+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_6;
     d84:	86 e0       	ldi	r24, 0x06	; 6
	}
	return KEY_NOTHING;
	
}
     d86:	0f 90       	pop	r0
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <checkR3>:
EN_KEYPAD_BTNS checkR3()
{
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	1f 92       	push	r1
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	
	DIO_s8SETPinVal(C1,HIGH);
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	85 e1       	ldi	r24, 0x15	; 21
     d9c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C2,HIGH);
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	86 e1       	ldi	r24, 0x16	; 22
     da4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(C3,HIGH);
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	87 e1       	ldi	r24, 0x17	; 23
     dac:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R1,HIGH);
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	82 e1       	ldi	r24, 0x12	; 18
     db4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R2,HIGH);
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	83 e1       	ldi	r24, 0x13	; 19
     dbc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	DIO_s8SETPinVal(R3,LOW);
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	84 e1       	ldi	r24, 0x14	; 20
     dc4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
	
	Uchar8_t val = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C1,&val);
     dcc:	be 01       	movw	r22, r28
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	85 e1       	ldi	r24, 0x15	; 21
     dd4:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	88 23       	and	r24, r24
     ddc:	39 f0       	breq	.+14     	; 0xdec <checkR3+0x5e>
     dde:	0b c0       	rjmp	.+22     	; 0xdf6 <checkR3+0x68>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C1,&val);
     de0:	be 01       	movw	r22, r28
     de2:	6f 5f       	subi	r22, 0xFF	; 255
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	85 e1       	ldi	r24, 0x15	; 21
     de8:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	
	Uchar8_t val = 1;
	DIO_s8GETPinVal(C1,&val);
	if(val == 0)
	{
		while (val == 0)
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	88 23       	and	r24, r24
     df0:	b9 f3       	breq	.-18     	; 0xde0 <checkR3+0x52>
		{
			DIO_s8GETPinVal(C1,&val);
		}
		return KEY_7;
     df2:	87 e0       	ldi	r24, 0x07	; 7
     df4:	2e c0       	rjmp	.+92     	; 0xe52 <checkR3+0xc4>
	}
	val = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C2,&val);
     dfa:	be 01       	movw	r22, r28
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	86 e1       	ldi	r24, 0x16	; 22
     e02:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	88 23       	and	r24, r24
     e0a:	39 f0       	breq	.+14     	; 0xe1a <checkR3+0x8c>
     e0c:	0b c0       	rjmp	.+22     	; 0xe24 <checkR3+0x96>
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C2,&val);
     e0e:	be 01       	movw	r22, r28
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	86 e1       	ldi	r24, 0x16	; 22
     e16:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C2,&val);
	if(val == 0)
	{
		while (val == 0)
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	88 23       	and	r24, r24
     e1e:	b9 f3       	breq	.-18     	; 0xe0e <checkR3+0x80>
		{
			DIO_s8GETPinVal(C2,&val);
		}
		return KEY_8;
     e20:	88 e0       	ldi	r24, 0x08	; 8
     e22:	17 c0       	rjmp	.+46     	; 0xe52 <checkR3+0xc4>
	}
	val = 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8GETPinVal(C3,&val);
     e28:	be 01       	movw	r22, r28
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	87 e1       	ldi	r24, 0x17	; 23
     e30:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	if(val == 0)
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	88 23       	and	r24, r24
     e38:	41 f0       	breq	.+16     	; 0xe4a <checkR3+0xbc>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
	}
	return KEY_NOTHING;
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	0a c0       	rjmp	.+20     	; 0xe52 <checkR3+0xc4>
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
		{
			DIO_s8GETPinVal(C3,&val);
     e3e:	be 01       	movw	r22, r28
     e40:	6f 5f       	subi	r22, 0xFF	; 255
     e42:	7f 4f       	sbci	r23, 0xFF	; 255
     e44:	87 e1       	ldi	r24, 0x17	; 23
     e46:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_s8GETPinVal>
	}
	val = 1;
	DIO_s8GETPinVal(C3,&val);
	if(val == 0)
	{
		while (val == 0)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	88 23       	and	r24, r24
     e4e:	b9 f3       	breq	.-18     	; 0xe3e <checkR3+0xb0>
		{
			DIO_s8GETPinVal(C3,&val);
		}
		return KEY_9;
     e50:	89 e0       	ldi	r24, 0x09	; 9
	}
	return KEY_NOTHING;
}
     e52:	0f 90       	pop	r0
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <KEYPAD_GetButton>:
EN_KEYPAD_BTNS KEYPAD_GetButton()
{
	EN_KEYPAD_BTNS PRESSED = KEY_NOTHING;
	while(PRESSED == KEY_NOTHING)
	{
		PRESSED = checkR1();
     e5a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <checkR1>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     e5e:	81 11       	cpse	r24, r1
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <KEYPAD_GetButton+0x14>
		PRESSED = checkR2();
     e62:	0e 94 61 06 	call	0xcc2	; 0xcc2 <checkR2>
		if(PRESSED != KEY_NOTHING) return PRESSED;
     e66:	81 11       	cpse	r24, r1
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <KEYPAD_GetButton+0x14>
		PRESSED = checkR3();
     e6a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <checkR3>
		if(PRESSED != KEY_NOTHING) return PRESSED;
		return KEY_NOTHING;
	}
	
	return KEY_NOTHING;
}
     e6e:	08 95       	ret

00000e70 <HLCD_vidWritecmd>:
		for (Uchar8_t i = 0; i < 8 ; i++)
		{
			HLCD_vidWriteChar(pu8custom[i]);
		}
	}
}
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	d8 2f       	mov	r29, r24
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     e88:	1d 2f       	mov	r17, r29
     e8a:	12 95       	swap	r17
     e8c:	1f 70       	andi	r17, 0x0F	; 15
     e8e:	c0 e0       	ldi	r28, 0x00	; 0
     e90:	11 c0       	rjmp	.+34     	; 0xeb4 <HLCD_vidWritecmd+0x44>
     e92:	ec 2f       	mov	r30, r28
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	61 2f       	mov	r22, r17
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	0c 2e       	mov	r0, r28
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <HLCD_vidWritecmd+0x32>
     e9e:	75 95       	asr	r23
     ea0:	67 95       	ror	r22
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <HLCD_vidWritecmd+0x2e>
     ea6:	61 70       	andi	r22, 0x01	; 1
     ea8:	ea 58       	subi	r30, 0x8A	; 138
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	80 81       	ld	r24, Z
     eae:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     eb2:	cf 5f       	subi	r28, 0xFF	; 255
     eb4:	c4 30       	cpi	r28, 0x04	; 4
     eb6:	68 f3       	brcs	.-38     	; 0xe92 <HLCD_vidWritecmd+0x22>
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     ec0:	89 ef       	ldi	r24, 0xF9	; 249
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <HLCD_vidWritecmd+0x54>
     ec8:	00 c0       	rjmp	.+0      	; 0xeca <HLCD_vidWritecmd+0x5a>
     eca:	00 00       	nop
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	83 e0       	ldi	r24, 0x03	; 3
     ed0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     ed4:	92 e4       	ldi	r25, 0x42	; 66
     ed6:	9a 95       	dec	r25
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <HLCD_vidWritecmd+0x66>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <HLCD_vidWritecmd+0x6c>
     edc:	df 70       	andi	r29, 0x0F	; 15
     ede:	c0 e0       	ldi	r28, 0x00	; 0
     ee0:	11 c0       	rjmp	.+34     	; 0xf04 <HLCD_vidWritecmd+0x94>
     ee2:	ec 2f       	mov	r30, r28
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	6d 2f       	mov	r22, r29
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	0c 2e       	mov	r0, r28
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <HLCD_vidWritecmd+0x82>
     eee:	75 95       	asr	r23
     ef0:	67 95       	ror	r22
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <HLCD_vidWritecmd+0x7e>
     ef6:	61 70       	andi	r22, 0x01	; 1
     ef8:	ea 58       	subi	r30, 0x8A	; 138
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	80 81       	ld	r24, Z
     efe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     f02:	cf 5f       	subi	r28, 0xFF	; 255
     f04:	c4 30       	cpi	r28, 0x04	; 4
     f06:	68 f3       	brcs	.-38     	; 0xee2 <HLCD_vidWritecmd+0x72>
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     f10:	89 ef       	ldi	r24, 0xF9	; 249
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <HLCD_vidWritecmd+0xa4>
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <HLCD_vidWritecmd+0xaa>
     f1a:	00 00       	nop
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     f24:	83 ef       	ldi	r24, 0xF3	; 243
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <HLCD_vidWritecmd+0xb8>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <HLCD_vidWritecmd+0xbe>
     f2e:	00 00       	nop
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	08 95       	ret

00000f38 <HLCD_vidInit>:
     f38:	cf 93       	push	r28
     f3a:	c0 e0       	ldi	r28, 0x00	; 0
     f3c:	09 c0       	rjmp	.+18     	; 0xf50 <HLCD_vidInit+0x18>
     f3e:	ec 2f       	mov	r30, r28
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	ea 58       	subi	r30, 0x8A	; 138
     f44:	fe 4f       	sbci	r31, 0xFE	; 254
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	80 81       	ld	r24, Z
     f4a:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     f4e:	cf 5f       	subi	r28, 0xFF	; 255
     f50:	c4 30       	cpi	r28, 0x04	; 4
     f52:	a8 f3       	brcs	.-22     	; 0xf3e <HLCD_vidInit+0x6>
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_s8SETPinDir>
     f6c:	8f e0       	ldi	r24, 0x0F	; 15
     f6e:	97 e2       	ldi	r25, 0x27	; 39
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <HLCD_vidInit+0x38>
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <HLCD_vidInit+0x3e>
     f76:	00 00       	nop
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
     f7e:	89 ef       	ldi	r24, 0xF9	; 249
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <HLCD_vidInit+0x4a>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <HLCD_vidInit+0x50>
     f88:	00 00       	nop
     f8a:	88 e2       	ldi	r24, 0x28	; 40
     f8c:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
     f90:	89 ef       	ldi	r24, 0xF9	; 249
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <HLCD_vidInit+0x5c>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <HLCD_vidInit+0x62>
     f9a:	00 00       	nop
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
     fa2:	87 ee       	ldi	r24, 0xE7	; 231
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <HLCD_vidInit+0x6e>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <HLCD_vidInit+0x74>
     fac:	00 00       	nop
     fae:	86 e0       	ldi	r24, 0x06	; 6
     fb0:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
     fb4:	89 ef       	ldi	r24, 0xF9	; 249
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <HLCD_vidInit+0x80>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <HLCD_vidInit+0x86>
     fbe:	00 00       	nop
     fc0:	8e e0       	ldi	r24, 0x0E	; 14
     fc2:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
     fc6:	89 ef       	ldi	r24, 0xF9	; 249
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <HLCD_vidInit+0x92>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <HLCD_vidInit+0x98>
     fd0:	00 00       	nop
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <HLCD_vidWriteChar>:
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	d8 2f       	mov	r29, r24
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
     fee:	1d 2f       	mov	r17, r29
     ff0:	12 95       	swap	r17
     ff2:	1f 70       	andi	r17, 0x0F	; 15
     ff4:	c0 e0       	ldi	r28, 0x00	; 0
     ff6:	11 c0       	rjmp	.+34     	; 0x101a <HLCD_vidWriteChar+0x44>
     ff8:	ec 2f       	mov	r30, r28
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	61 2f       	mov	r22, r17
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	0c 2e       	mov	r0, r28
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <HLCD_vidWriteChar+0x32>
    1004:	75 95       	asr	r23
    1006:	67 95       	ror	r22
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <HLCD_vidWriteChar+0x2e>
    100c:	61 70       	andi	r22, 0x01	; 1
    100e:	ea 58       	subi	r30, 0x8A	; 138
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	80 81       	ld	r24, Z
    1014:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
    1018:	cf 5f       	subi	r28, 0xFF	; 255
    101a:	c4 30       	cpi	r28, 0x04	; 4
    101c:	68 f3       	brcs	.-38     	; 0xff8 <HLCD_vidWriteChar+0x22>
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
    1026:	89 ef       	ldi	r24, 0xF9	; 249
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <HLCD_vidWriteChar+0x54>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <HLCD_vidWriteChar+0x5a>
    1030:	00 00       	nop
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
    103a:	92 e4       	ldi	r25, 0x42	; 66
    103c:	9a 95       	dec	r25
    103e:	f1 f7       	brne	.-4      	; 0x103c <HLCD_vidWriteChar+0x66>
    1040:	00 c0       	rjmp	.+0      	; 0x1042 <HLCD_vidWriteChar+0x6c>
    1042:	df 70       	andi	r29, 0x0F	; 15
    1044:	c0 e0       	ldi	r28, 0x00	; 0
    1046:	11 c0       	rjmp	.+34     	; 0x106a <HLCD_vidWriteChar+0x94>
    1048:	ec 2f       	mov	r30, r28
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	6d 2f       	mov	r22, r29
    104e:	70 e0       	ldi	r23, 0x00	; 0
    1050:	0c 2e       	mov	r0, r28
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <HLCD_vidWriteChar+0x82>
    1054:	75 95       	asr	r23
    1056:	67 95       	ror	r22
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <HLCD_vidWriteChar+0x7e>
    105c:	61 70       	andi	r22, 0x01	; 1
    105e:	ea 58       	subi	r30, 0x8A	; 138
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	80 81       	ld	r24, Z
    1064:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
    1068:	cf 5f       	subi	r28, 0xFF	; 255
    106a:	c4 30       	cpi	r28, 0x04	; 4
    106c:	68 f3       	brcs	.-38     	; 0x1048 <HLCD_vidWriteChar+0x72>
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	83 e0       	ldi	r24, 0x03	; 3
    1072:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
    1076:	89 ef       	ldi	r24, 0xF9	; 249
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <HLCD_vidWriteChar+0xa4>
    107e:	00 c0       	rjmp	.+0      	; 0x1080 <HLCD_vidWriteChar+0xaa>
    1080:	00 00       	nop
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	83 e0       	ldi	r24, 0x03	; 3
    1086:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_s8SETPinVal>
    108a:	83 ef       	ldi	r24, 0xF3	; 243
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <HLCD_vidWriteChar+0xb8>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <HLCD_vidWriteChar+0xbe>
    1094:	00 00       	nop
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	08 95       	ret

0000109e <HLCD_ClrDisplay>:
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
    10a4:	87 ee       	ldi	r24, 0xE7	; 231
    10a6:	93 e0       	ldi	r25, 0x03	; 3
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <HLCD_ClrDisplay+0xa>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <HLCD_ClrDisplay+0x10>
    10ae:	00 00       	nop
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
    10b6:	87 ee       	ldi	r24, 0xE7	; 231
    10b8:	93 e0       	ldi	r25, 0x03	; 3
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <HLCD_ClrDisplay+0x1c>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <HLCD_ClrDisplay+0x22>
    10c0:	00 00       	nop
    10c2:	08 95       	ret

000010c4 <HLCD_gotoXY>:
    10c4:	81 11       	cpse	r24, r1
    10c6:	08 c0       	rjmp	.+16     	; 0x10d8 <HLCD_gotoXY+0x14>
    10c8:	60 31       	cpi	r22, 0x10	; 16
    10ca:	30 f4       	brcc	.+12     	; 0x10d8 <HLCD_gotoXY+0x14>
    10cc:	86 2f       	mov	r24, r22
    10ce:	8f 70       	andi	r24, 0x0F	; 15
    10d0:	80 68       	ori	r24, 0x80	; 128
    10d2:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
    10d6:	08 95       	ret
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	39 f4       	brne	.+14     	; 0x10ea <HLCD_gotoXY+0x26>
    10dc:	60 31       	cpi	r22, 0x10	; 16
    10de:	28 f4       	brcc	.+10     	; 0x10ea <HLCD_gotoXY+0x26>
    10e0:	86 2f       	mov	r24, r22
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	80 6c       	ori	r24, 0xC0	; 192
    10e6:	0e 94 38 07 	call	0xe70	; 0xe70 <HLCD_vidWritecmd>
    10ea:	08 95       	ret

000010ec <HLCD_WriteString>:
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	8c 01       	movw	r16, r24
    10f6:	fc 01       	movw	r30, r24
    10f8:	80 81       	ld	r24, Z
    10fa:	c0 e0       	ldi	r28, 0x00	; 0
    10fc:	d0 e0       	ldi	r29, 0x00	; 0
    10fe:	07 c0       	rjmp	.+14     	; 0x110e <HLCD_WriteString+0x22>
    1100:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <HLCD_vidWriteChar>
    1104:	21 96       	adiw	r28, 0x01	; 1
    1106:	f8 01       	movw	r30, r16
    1108:	ec 0f       	add	r30, r28
    110a:	fd 1f       	adc	r31, r29
    110c:	80 81       	ld	r24, Z
    110e:	81 11       	cpse	r24, r1
    1110:	f7 cf       	rjmp	.-18     	; 0x1100 <HLCD_WriteString+0x14>
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	08 95       	ret

0000111c <HLCD_DisplayFloat>:
 * input param 	:
 * 				  f32_a_number -> the floating point number to display
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
    111c:	8f 92       	push	r8
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	2c 97       	sbiw	r28, 0x0c	; 12
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	4b 01       	movw	r8, r22
    1144:	5c 01       	movw	r10, r24
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
	Uint32_t u32_l_integer;

	/* Get the integer part */
	u32_l_integer = (Uint16_t)f32_a_number;
    1146:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fixunssfsi>
    114a:	6b 01       	movw	r12, r22
    114c:	e1 2c       	mov	r14, r1
    114e:	f1 2c       	mov	r15, r1
	
	/* Get the first two decimal places */
	u8_l_decimal = (Uint16_t)((f32_a_number - u32_l_integer) * 100);
    1150:	c7 01       	movw	r24, r14
    1152:	b6 01       	movw	r22, r12
    1154:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__floatunsisf>
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	c5 01       	movw	r24, r10
    115e:	b4 01       	movw	r22, r8
    1160:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__subsf3>
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	48 ec       	ldi	r20, 0xC8	; 200
    116a:	52 e4       	ldi	r21, 0x42	; 66
    116c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    1170:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fixunssfsi>

	/* Get decimal digits as characters */
	arr_l_NumString[0] = u8_l_decimal % 10 + '0';
    1174:	8d ec       	ldi	r24, 0xCD	; 205
    1176:	68 9f       	mul	r22, r24
    1178:	81 2d       	mov	r24, r1
    117a:	11 24       	eor	r1, r1
    117c:	86 95       	lsr	r24
    117e:	86 95       	lsr	r24
    1180:	86 95       	lsr	r24
    1182:	28 2f       	mov	r18, r24
    1184:	22 0f       	add	r18, r18
    1186:	92 2f       	mov	r25, r18
    1188:	99 0f       	add	r25, r25
    118a:	99 0f       	add	r25, r25
    118c:	92 0f       	add	r25, r18
    118e:	69 1b       	sub	r22, r25
    1190:	60 5d       	subi	r22, 0xD0	; 208
    1192:	69 83       	std	Y+1, r22	; 0x01
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
    1194:	80 5d       	subi	r24, 0xD0	; 208
    1196:	8a 83       	std	Y+2, r24	; 0x02
	
	arr_l_NumString[2] = '.';
    1198:	8e e2       	ldi	r24, 0x2E	; 46
    119a:	8b 83       	std	Y+3, r24	; 0x03
 * return		: void
 * */
void HLCD_DisplayFloat(float32_t f32_a_number)
{
	Uchar8_t arr_l_NumString[12];
	Uchar8_t u8_l_NumIterator = 3, u8_l_StrLen, u8_l_tempVar, u8_l_decimal;
    119c:	13 e0       	ldi	r17, 0x03	; 3
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    119e:	15 c0       	rjmp	.+42     	; 0x11ca <HLCD_DisplayFloat+0xae>
	{
		arr_l_NumString[u8_l_NumIterator] = (u32_l_integer % 10) + '0';
    11a0:	c7 01       	movw	r24, r14
    11a2:	b6 01       	movw	r22, r12
    11a4:	2a e0       	ldi	r18, 0x0A	; 10
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	50 e0       	ldi	r21, 0x00	; 0
    11ac:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__udivmodsi4>
    11b0:	e1 e0       	ldi	r30, 0x01	; 1
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	ec 0f       	add	r30, r28
    11b6:	fd 1f       	adc	r31, r29
    11b8:	e1 0f       	add	r30, r17
    11ba:	f1 1d       	adc	r31, r1
    11bc:	60 5d       	subi	r22, 0xD0	; 208
    11be:	60 83       	st	Z, r22
		u32_l_integer /= 10;
    11c0:	c2 2e       	mov	r12, r18
    11c2:	d3 2e       	mov	r13, r19
    11c4:	e4 2e       	mov	r14, r20
    11c6:	f5 2e       	mov	r15, r21
		u8_l_NumIterator++;
    11c8:	1f 5f       	subi	r17, 0xFF	; 255
	arr_l_NumString[1] = u8_l_decimal / 10 + '0';
	
	arr_l_NumString[2] = '.';
	
	/* Get integer digits as characters */
	while (u32_l_integer > 0) 
    11ca:	c1 14       	cp	r12, r1
    11cc:	d1 04       	cpc	r13, r1
    11ce:	e1 04       	cpc	r14, r1
    11d0:	f1 04       	cpc	r15, r1
    11d2:	31 f7       	brne	.-52     	; 0x11a0 <HLCD_DisplayFloat+0x84>
		u32_l_integer /= 10;
		u8_l_NumIterator++;
	}
	
	/* Terminate String */
	arr_l_NumString[u8_l_NumIterator] = '\0';
    11d4:	41 2f       	mov	r20, r17
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	e1 e0       	ldi	r30, 0x01	; 1
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	ec 0f       	add	r30, r28
    11de:	fd 1f       	adc	r31, r29
    11e0:	e4 0f       	add	r30, r20
    11e2:	f5 1f       	adc	r31, r21
    11e4:	10 82       	st	Z, r1
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	17 c0       	rjmp	.+46     	; 0x1218 <HLCD_DisplayFloat+0xfc>
	{
		u8_l_tempVar = arr_l_NumString[u8_l_NumIterator];
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	a1 e0       	ldi	r26, 0x01	; 1
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ac 0f       	add	r26, r28
    11f4:	bd 1f       	adc	r27, r29
    11f6:	a2 0f       	add	r26, r18
    11f8:	b3 1f       	adc	r27, r19
    11fa:	9c 91       	ld	r25, X
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
    11fc:	fa 01       	movw	r30, r20
    11fe:	e2 1b       	sub	r30, r18
    1200:	f3 0b       	sbc	r31, r19
    1202:	31 97       	sbiw	r30, 0x01	; 1
    1204:	21 e0       	ldi	r18, 0x01	; 1
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	2c 0f       	add	r18, r28
    120a:	3d 1f       	adc	r19, r29
    120c:	e2 0f       	add	r30, r18
    120e:	f3 1f       	adc	r31, r19
    1210:	20 81       	ld	r18, Z
    1212:	2c 93       	st	X, r18
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
    1214:	90 83       	st	Z, r25
	arr_l_NumString[u8_l_NumIterator] = '\0';
	
	u8_l_StrLen = u8_l_NumIterator;

	/* Reverse String */
	for (u8_l_NumIterator = 0; u8_l_NumIterator< u8_l_StrLen/2; u8_l_NumIterator++) 
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	91 2f       	mov	r25, r17
    121a:	96 95       	lsr	r25
    121c:	89 17       	cp	r24, r25
    121e:	28 f3       	brcs	.-54     	; 0x11ea <HLCD_DisplayFloat+0xce>
		arr_l_NumString[u8_l_NumIterator] = arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1];
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
	}

	/* Display Number */
	HLCD_WriteString(arr_l_NumString);
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0e 94 76 08 	call	0x10ec	; 0x10ec <HLCD_WriteString>
}
    1228:	2c 96       	adiw	r28, 0x0c	; 12
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	08 95       	ret

0000124c <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
void main(void)
{
	APP_Init();
    124c:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Init>

    while (1) 
    {
		APP_Start();
    1250:	0e 94 90 00 	call	0x120	; 0x120 <APP_Start>
    1254:	fd cf       	rjmp	.-6      	; 0x1250 <main+0x4>

00001256 <DIO_s8SETPinDir>:
	{
		errStatus = E_NOK;
	}
	return errStatus;

}
    1256:	80 32       	cpi	r24, 0x20	; 32
    1258:	c0 f5       	brcc	.+112    	; 0x12ca <DIO_s8SETPinDir+0x74>
    125a:	62 30       	cpi	r22, 0x02	; 2
    125c:	c0 f5       	brcc	.+112    	; 0x12ce <DIO_s8SETPinDir+0x78>
    125e:	e8 2f       	mov	r30, r24
    1260:	e6 95       	lsr	r30
    1262:	e6 95       	lsr	r30
    1264:	e6 95       	lsr	r30
    1266:	87 70       	andi	r24, 0x07	; 7
    1268:	61 11       	cpse	r22, r1
    126a:	17 c0       	rjmp	.+46     	; 0x129a <DIO_s8SETPinDir+0x44>
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	ee 0f       	add	r30, r30
    1270:	ff 1f       	adc	r31, r31
    1272:	ee 57       	subi	r30, 0x7E	; 126
    1274:	fe 4f       	sbci	r31, 0xFE	; 254
    1276:	01 90       	ld	r0, Z+
    1278:	f0 81       	ld	r31, Z
    127a:	e0 2d       	mov	r30, r0
    127c:	40 81       	ld	r20, Z
    127e:	21 e0       	ldi	r18, 0x01	; 1
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	b9 01       	movw	r22, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_s8SETPinDir+0x34>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_s8SETPinDir+0x30>
    128e:	cb 01       	movw	r24, r22
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	80 83       	st	Z, r24
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	08 95       	ret
    129a:	61 30       	cpi	r22, 0x01	; 1
    129c:	d1 f4       	brne	.+52     	; 0x12d2 <DIO_s8SETPinDir+0x7c>
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	ee 57       	subi	r30, 0x7E	; 126
    12a6:	fe 4f       	sbci	r31, 0xFE	; 254
    12a8:	01 90       	ld	r0, Z+
    12aa:	f0 81       	ld	r31, Z
    12ac:	e0 2d       	mov	r30, r0
    12ae:	40 81       	ld	r20, Z
    12b0:	21 e0       	ldi	r18, 0x01	; 1
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	b9 01       	movw	r22, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_s8SETPinDir+0x66>
    12b8:	66 0f       	add	r22, r22
    12ba:	77 1f       	adc	r23, r23
    12bc:	8a 95       	dec	r24
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_s8SETPinDir+0x62>
    12c0:	cb 01       	movw	r24, r22
    12c2:	84 2b       	or	r24, r20
    12c4:	80 83       	st	Z, r24
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	08 95       	ret
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	08 95       	ret
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	08 95       	ret
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	08 95       	ret

000012d6 <DIO_s8SETPinVal>:
    12d6:	80 32       	cpi	r24, 0x20	; 32
    12d8:	c0 f5       	brcc	.+112    	; 0x134a <DIO_s8SETPinVal+0x74>
    12da:	62 30       	cpi	r22, 0x02	; 2
    12dc:	c0 f5       	brcc	.+112    	; 0x134e <DIO_s8SETPinVal+0x78>
    12de:	e8 2f       	mov	r30, r24
    12e0:	e6 95       	lsr	r30
    12e2:	e6 95       	lsr	r30
    12e4:	e6 95       	lsr	r30
    12e6:	87 70       	andi	r24, 0x07	; 7
    12e8:	61 11       	cpse	r22, r1
    12ea:	17 c0       	rjmp	.+46     	; 0x131a <DIO_s8SETPinVal+0x44>
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	ee 0f       	add	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	e6 57       	subi	r30, 0x76	; 118
    12f4:	fe 4f       	sbci	r31, 0xFE	; 254
    12f6:	01 90       	ld	r0, Z+
    12f8:	f0 81       	ld	r31, Z
    12fa:	e0 2d       	mov	r30, r0
    12fc:	40 81       	ld	r20, Z
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	b9 01       	movw	r22, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_s8SETPinVal+0x34>
    1306:	66 0f       	add	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_s8SETPinVal+0x30>
    130e:	cb 01       	movw	r24, r22
    1310:	80 95       	com	r24
    1312:	84 23       	and	r24, r20
    1314:	80 83       	st	Z, r24
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	08 95       	ret
    131a:	61 30       	cpi	r22, 0x01	; 1
    131c:	d1 f4       	brne	.+52     	; 0x1352 <DIO_s8SETPinVal+0x7c>
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	ee 0f       	add	r30, r30
    1322:	ff 1f       	adc	r31, r31
    1324:	e6 57       	subi	r30, 0x76	; 118
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	01 90       	ld	r0, Z+
    132a:	f0 81       	ld	r31, Z
    132c:	e0 2d       	mov	r30, r0
    132e:	40 81       	ld	r20, Z
    1330:	21 e0       	ldi	r18, 0x01	; 1
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_s8SETPinVal+0x66>
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_s8SETPinVal+0x62>
    1340:	cb 01       	movw	r24, r22
    1342:	84 2b       	or	r24, r20
    1344:	80 83       	st	Z, r24
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	08 95       	ret
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	08 95       	ret
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	08 95       	ret
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	08 95       	ret

00001356 <DIO_s8GETPinVal>:
Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
	Uchar8_t portID;
	Uchar8_t pinID;
	if (enPinCopy < PIN_INVALID)
    1356:	80 32       	cpi	r24, 0x20	; 32
    1358:	d8 f4       	brcc	.+54     	; 0x1390 <DIO_s8GETPinVal+0x3a>
	{
		portID = enPinCopy/8;
    135a:	e8 2f       	mov	r30, r24
    135c:	e6 95       	lsr	r30
    135e:	e6 95       	lsr	r30
    1360:	e6 95       	lsr	r30
		pinID  = enPinCopy%8;
    1362:	87 70       	andi	r24, 0x07	; 7

		*pu8Val = GET_BIT(*pinReg[portID], pinID);
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	ee 0f       	add	r30, r30
    1368:	ff 1f       	adc	r31, r31
    136a:	e6 58       	subi	r30, 0x86	; 134
    136c:	fe 4f       	sbci	r31, 0xFE	; 254
    136e:	01 90       	ld	r0, Z+
    1370:	f0 81       	ld	r31, Z
    1372:	e0 2d       	mov	r30, r0
    1374:	20 81       	ld	r18, Z
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	a9 01       	movw	r20, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_s8GETPinVal+0x2a>
    137c:	55 95       	asr	r21
    137e:	47 95       	ror	r20
    1380:	8a 95       	dec	r24
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_s8GETPinVal+0x26>
    1384:	ca 01       	movw	r24, r20
    1386:	81 70       	andi	r24, 0x01	; 1
    1388:	fb 01       	movw	r30, r22
    138a:	80 83       	st	Z, r24

}

Uchar8_t DIO_s8GETPinVal (enu_pin enPinCopy, Uchar8_t* pu8Val)
{
	Uchar8_t errStatus = E_OK;
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	08 95       	ret
		*pu8Val = GET_BIT(*pinReg[portID], pinID);

	}
	else
	{
		errStatus = E_NOK;
    1390:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return errStatus;
    1392:	08 95       	ret

00001394 <SET_GLOBAL_INTERRUPT>:
void (*ptrINT2)(void) = 0;

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	19 f4       	brne	.+6      	; 0x139e <SET_GLOBAL_INTERRUPT+0xa>
	sei();
    1398:	78 94       	sei
    else if (state == DISABLE)
	cli();
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	08 95       	ret
EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	sei();
    else if (state == DISABLE)
    139e:	81 11       	cpse	r24, r1
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <SET_GLOBAL_INTERRUPT+0x12>
	cli();
    13a2:	f8 94       	cli
    13a4:	08 95       	ret
	else return EXTINT_NOT_OK;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    13a8:	08 95       	ret

000013aa <EXTINT_init>:

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	c8 2f       	mov	r28, r24
    13b0:	d6 2f       	mov	r29, r22
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	0e 94 ca 09 	call	0x1394	; 0x1394 <SET_GLOBAL_INTERRUPT>
	switch(INTx)
    13b8:	c1 30       	cpi	r28, 0x01	; 1
    13ba:	99 f1       	breq	.+102    	; 0x1422 <EXTINT_init+0x78>
    13bc:	20 f0       	brcs	.+8      	; 0x13c6 <EXTINT_init+0x1c>
    13be:	c2 30       	cpi	r28, 0x02	; 2
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <EXTINT_init+0x1a>
    13c2:	5d c0       	rjmp	.+186    	; 0x147e <EXTINT_init+0xd4>
    13c4:	72 c0       	rjmp	.+228    	; 0x14aa <EXTINT_init+0x100>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
    13c6:	d1 11       	cpse	r29, r1
    13c8:	07 c0       	rjmp	.+14     	; 0x13d8 <EXTINT_init+0x2e>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    13ca:	85 b7       	in	r24, 0x35	; 53
    13cc:	8e 7f       	andi	r24, 0xFE	; 254
    13ce:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    13d0:	85 b7       	in	r24, 0x35	; 53
    13d2:	8d 7f       	andi	r24, 0xFD	; 253
    13d4:	85 bf       	out	0x35, r24	; 53
    13d6:	20 c0       	rjmp	.+64     	; 0x1418 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == FALLING_EDGE)
    13d8:	d1 30       	cpi	r29, 0x01	; 1
    13da:	39 f4       	brne	.+14     	; 0x13ea <EXTINT_init+0x40>
		  {
			  CLEAR_BIT(MCUCR,ISC00);
    13dc:	85 b7       	in	r24, 0x35	; 53
    13de:	8e 7f       	andi	r24, 0xFE	; 254
    13e0:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    13e2:	85 b7       	in	r24, 0x35	; 53
    13e4:	82 60       	ori	r24, 0x02	; 2
    13e6:	85 bf       	out	0x35, r24	; 53
    13e8:	17 c0       	rjmp	.+46     	; 0x1418 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == RISING_EDGE)
    13ea:	d2 30       	cpi	r29, 0x02	; 2
    13ec:	39 f4       	brne	.+14     	; 0x13fc <EXTINT_init+0x52>
		  {
			  SET_BIT(MCUCR,ISC00);
    13ee:	85 b7       	in	r24, 0x35	; 53
    13f0:	81 60       	ori	r24, 0x01	; 1
    13f2:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC01);
    13f4:	85 b7       	in	r24, 0x35	; 53
    13f6:	82 60       	ori	r24, 0x02	; 2
    13f8:	85 bf       	out	0x35, r24	; 53
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    13fc:	d3 30       	cpi	r29, 0x03	; 3
    13fe:	39 f4       	brne	.+14     	; 0x140e <EXTINT_init+0x64>
		  {
			  SET_BIT(MCUCR,ISC00);
    1400:	85 b7       	in	r24, 0x35	; 53
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC01);
    1406:	85 b7       	in	r24, 0x35	; 53
    1408:	8d 7f       	andi	r24, 0xFD	; 253
    140a:	85 bf       	out	0x35, r24	; 53
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <EXTINT_init+0x6e>
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	0e 94 ca 09 	call	0x1394	; 0x1394 <SET_GLOBAL_INTERRUPT>
			   return EXTINT_NOT_OK;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	4d c0       	rjmp	.+154    	; 0x14b2 <EXTINT_init+0x108>
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
    1418:	8b b7       	in	r24, 0x3b	; 59
    141a:	80 64       	ori	r24, 0x40	; 64
    141c:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    141e:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,INT0); //Enable External INT0  (PIE)
		  break;
    1420:	48 c0       	rjmp	.+144    	; 0x14b2 <EXTINT_init+0x108>
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
    1422:	d1 11       	cpse	r29, r1
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <EXTINT_init+0x8a>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    1426:	85 b7       	in	r24, 0x35	; 53
    1428:	8b 7f       	andi	r24, 0xFB	; 251
    142a:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    142c:	85 b7       	in	r24, 0x35	; 53
    142e:	87 7f       	andi	r24, 0xF7	; 247
    1430:	85 bf       	out	0x35, r24	; 53
    1432:	20 c0       	rjmp	.+64     	; 0x1474 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == FALLING_EDGE)
    1434:	d1 30       	cpi	r29, 0x01	; 1
    1436:	39 f4       	brne	.+14     	; 0x1446 <EXTINT_init+0x9c>
		  {
			  CLEAR_BIT(MCUCR,ISC10);
    1438:	85 b7       	in	r24, 0x35	; 53
    143a:	8b 7f       	andi	r24, 0xFB	; 251
    143c:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    143e:	85 b7       	in	r24, 0x35	; 53
    1440:	88 60       	ori	r24, 0x08	; 8
    1442:	85 bf       	out	0x35, r24	; 53
    1444:	17 c0       	rjmp	.+46     	; 0x1474 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == RISING_EDGE)
    1446:	d2 30       	cpi	r29, 0x02	; 2
    1448:	39 f4       	brne	.+14     	; 0x1458 <EXTINT_init+0xae>
		  {
			  SET_BIT(MCUCR,ISC10);
    144a:	85 b7       	in	r24, 0x35	; 53
    144c:	84 60       	ori	r24, 0x04	; 4
    144e:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,ISC11);
    1450:	85 b7       	in	r24, 0x35	; 53
    1452:	88 60       	ori	r24, 0x08	; 8
    1454:	85 bf       	out	0x35, r24	; 53
    1456:	0e c0       	rjmp	.+28     	; 0x1474 <EXTINT_init+0xca>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
    1458:	d3 30       	cpi	r29, 0x03	; 3
    145a:	39 f4       	brne	.+14     	; 0x146a <EXTINT_init+0xc0>
		  {
			  SET_BIT(MCUCR,ISC10);
    145c:	85 b7       	in	r24, 0x35	; 53
    145e:	84 60       	ori	r24, 0x04	; 4
    1460:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,ISC11);
    1462:	85 b7       	in	r24, 0x35	; 53
    1464:	87 7f       	andi	r24, 0xF7	; 247
    1466:	85 bf       	out	0x35, r24	; 53
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <EXTINT_init+0xca>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0e 94 ca 09 	call	0x1394	; 0x1394 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	1f c0       	rjmp	.+62     	; 0x14b2 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
    1474:	8b b7       	in	r24, 0x3b	; 59
    1476:	80 68       	ori	r24, 0x80	; 128
    1478:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    147a:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT1); //Enable External INT1  (PIE)
		  break;
    147c:	1a c0       	rjmp	.+52     	; 0x14b2 <EXTINT_init+0x108>
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
    147e:	d1 30       	cpi	r29, 0x01	; 1
    1480:	21 f4       	brne	.+8      	; 0x148a <EXTINT_init+0xe0>
		  {
			  CLEAR_BIT(MCUCSR,ISC2);
    1482:	84 b7       	in	r24, 0x34	; 52
    1484:	8f 7b       	andi	r24, 0xBF	; 191
    1486:	84 bf       	out	0x34, r24	; 52
    1488:	0b c0       	rjmp	.+22     	; 0x14a0 <EXTINT_init+0xf6>
		  }
		  else if(INTxSense == RISING_EDGE)
    148a:	d2 30       	cpi	r29, 0x02	; 2
    148c:	21 f4       	brne	.+8      	; 0x1496 <EXTINT_init+0xec>
		  {
			  SET_BIT(MCUCSR,ISC2);
    148e:	84 b7       	in	r24, 0x34	; 52
    1490:	80 64       	ori	r24, 0x40	; 64
    1492:	84 bf       	out	0x34, r24	; 52
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <EXTINT_init+0xf6>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	0e 94 ca 09 	call	0x1394	; 0x1394 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
    14a0:	8b b7       	in	r24, 0x3b	; 59
    14a2:	80 62       	ori	r24, 0x20	; 32
    14a4:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
    14a6:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,INT2); //Enable External INT1  (PIE)
		  break;
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <EXTINT_init+0x108>
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 ca 09 	call	0x1394	; 0x1394 <SET_GLOBAL_INTERRUPT>
		  return EXTINT_NOT_OK;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
    14b8:	81 11       	cpse	r24, r1
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <EXTINT_CallBack+0xe>
    14bc:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <ptrINT0+0x1>
    14c0:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <ptrINT0>
    14c4:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	31 f4       	brne	.+12     	; 0x14d6 <EXTINT_CallBack+0x1e>
    14ca:	70 93 b0 02 	sts	0x02B0, r23	; 0x8002b0 <ptrINT1+0x1>
    14ce:	60 93 af 02 	sts	0x02AF, r22	; 0x8002af <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	31 f4       	brne	.+12     	; 0x14e6 <EXTINT_CallBack+0x2e>
    14da:	70 93 ae 02 	sts	0x02AE, r23	; 0x8002ae <ptrINT2+0x1>
    14de:	60 93 ad 02 	sts	0x02AD, r22	; 0x8002ad <ptrINT2>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
    14e8:	08 95       	ret

000014ea <__vector_1>:


ISR (EXT_INT_0)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
    150c:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <ptrINT0>
    1510:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <ptrINT0+0x1>
    1514:	30 97       	sbiw	r30, 0x00	; 0
    1516:	09 f0       	breq	.+2      	; 0x151a <__vector_1+0x30>
    1518:	09 95       	icall
}
    151a:	ff 91       	pop	r31
    151c:	ef 91       	pop	r30
    151e:	bf 91       	pop	r27
    1520:	af 91       	pop	r26
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	7f 91       	pop	r23
    1528:	6f 91       	pop	r22
    152a:	5f 91       	pop	r21
    152c:	4f 91       	pop	r20
    152e:	3f 91       	pop	r19
    1530:	2f 91       	pop	r18
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <__vector_2>:

ISR (EXT_INT_1)
{
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	2f 93       	push	r18
    1548:	3f 93       	push	r19
    154a:	4f 93       	push	r20
    154c:	5f 93       	push	r21
    154e:	6f 93       	push	r22
    1550:	7f 93       	push	r23
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	af 93       	push	r26
    1558:	bf 93       	push	r27
    155a:	ef 93       	push	r30
    155c:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
    155e:	e0 91 af 02 	lds	r30, 0x02AF	; 0x8002af <ptrINT1>
    1562:	f0 91 b0 02 	lds	r31, 0x02B0	; 0x8002b0 <ptrINT1+0x1>
    1566:	30 97       	sbiw	r30, 0x00	; 0
    1568:	09 f0       	breq	.+2      	; 0x156c <__vector_2+0x30>
    156a:	09 95       	icall
}
    156c:	ff 91       	pop	r31
    156e:	ef 91       	pop	r30
    1570:	bf 91       	pop	r27
    1572:	af 91       	pop	r26
    1574:	9f 91       	pop	r25
    1576:	8f 91       	pop	r24
    1578:	7f 91       	pop	r23
    157a:	6f 91       	pop	r22
    157c:	5f 91       	pop	r21
    157e:	4f 91       	pop	r20
    1580:	3f 91       	pop	r19
    1582:	2f 91       	pop	r18
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	0f 90       	pop	r0
    158a:	1f 90       	pop	r1
    158c:	18 95       	reti

0000158e <__vector_3>:

ISR (EXT_INT_2)
{
    158e:	1f 92       	push	r1
    1590:	0f 92       	push	r0
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	0f 92       	push	r0
    1596:	11 24       	eor	r1, r1
    1598:	2f 93       	push	r18
    159a:	3f 93       	push	r19
    159c:	4f 93       	push	r20
    159e:	5f 93       	push	r21
    15a0:	6f 93       	push	r22
    15a2:	7f 93       	push	r23
    15a4:	8f 93       	push	r24
    15a6:	9f 93       	push	r25
    15a8:	af 93       	push	r26
    15aa:	bf 93       	push	r27
    15ac:	ef 93       	push	r30
    15ae:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
    15b0:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <ptrINT2>
    15b4:	f0 91 ae 02 	lds	r31, 0x02AE	; 0x8002ae <ptrINT2+0x1>
    15b8:	30 97       	sbiw	r30, 0x00	; 0
    15ba:	09 f0       	breq	.+2      	; 0x15be <__vector_3+0x30>
    15bc:	09 95       	icall
    15be:	ff 91       	pop	r31
    15c0:	ef 91       	pop	r30
    15c2:	bf 91       	pop	r27
    15c4:	af 91       	pop	r26
    15c6:	9f 91       	pop	r25
    15c8:	8f 91       	pop	r24
    15ca:	7f 91       	pop	r23
    15cc:	6f 91       	pop	r22
    15ce:	5f 91       	pop	r21
    15d0:	4f 91       	pop	r20
    15d2:	3f 91       	pop	r19
    15d4:	2f 91       	pop	r18
    15d6:	0f 90       	pop	r0
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	0f 90       	pop	r0
    15dc:	1f 90       	pop	r1
    15de:	18 95       	reti

000015e0 <SPI_MasterInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
    15e0:	8d b1       	in	r24, 0x0d	; 13
    15e2:	80 61       	ori	r24, 0x10	; 16
    15e4:	8d b9       	out	0x0d, r24	; 13
    15e6:	8d b1       	in	r24, 0x0d	; 13
    15e8:	9e b1       	in	r25, 0x0e	; 14
    15ea:	8e 7f       	andi	r24, 0xFE	; 254
    15ec:	9c 7f       	andi	r25, 0xFC	; 252
    15ee:	9e b9       	out	0x0e, r25	; 14
    15f0:	8d b9       	out	0x0d, r24	; 13
    15f2:	8d b1       	in	r24, 0x0d	; 13
    15f4:	9e b1       	in	r25, 0x0e	; 14
    15f6:	93 60       	ori	r25, 0x03	; 3
    15f8:	9e b9       	out	0x0e, r25	; 14
    15fa:	8d b9       	out	0x0d, r24	; 13
    15fc:	8d b1       	in	r24, 0x0d	; 13
    15fe:	87 7f       	andi	r24, 0xF7	; 247
    1600:	8d b9       	out	0x0d, r24	; 13
    1602:	8d b1       	in	r24, 0x0d	; 13
    1604:	8b 7f       	andi	r24, 0xFB	; 251
    1606:	8d b9       	out	0x0d, r24	; 13
    1608:	8d b1       	in	r24, 0x0d	; 13
    160a:	80 64       	ori	r24, 0x40	; 64
    160c:	8d b9       	out	0x0d, r24	; 13
    160e:	08 95       	ret

00001610 <SPI_TranscieveChar>:
    1610:	61 15       	cp	r22, r1
    1612:	71 05       	cpc	r23, r1
    1614:	f9 f0       	breq	.+62     	; 0x1654 <SPI_TranscieveChar+0x44>
    1616:	8f b9       	out	0x0f, r24	; 15
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	dc 01       	movw	r26, r24
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <SPI_TranscieveChar+0x16>
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	a1 1d       	adc	r26, r1
    1624:	b1 1d       	adc	r27, r1
    1626:	77 99       	sbic	0x0e, 7	; 14
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <SPI_TranscieveChar+0x28>
    162a:	80 3a       	cpi	r24, 0xA0	; 160
    162c:	26 e8       	ldi	r18, 0x86	; 134
    162e:	92 07       	cpc	r25, r18
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	a2 07       	cpc	r26, r18
    1634:	b1 05       	cpc	r27, r1
    1636:	a0 f3       	brcs	.-24     	; 0x1620 <SPI_TranscieveChar+0x10>
    1638:	80 3a       	cpi	r24, 0xA0	; 160
    163a:	96 48       	sbci	r25, 0x86	; 134
    163c:	a1 40       	sbci	r26, 0x01	; 1
    163e:	b1 05       	cpc	r27, r1
    1640:	59 f0       	breq	.+22     	; 0x1658 <SPI_TranscieveChar+0x48>
    1642:	8f b1       	in	r24, 0x0f	; 15
    1644:	fb 01       	movw	r30, r22
    1646:	80 83       	st	Z, r24
    1648:	f1 e2       	ldi	r31, 0x21	; 33
    164a:	fa 95       	dec	r31
    164c:	f1 f7       	brne	.-4      	; 0x164a <SPI_TranscieveChar+0x3a>
    164e:	00 00       	nop
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	08 95       	ret
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	08 95       	ret
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	08 95       	ret

0000165c <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	8f 93       	push	r24
    166c:	9f 93       	push	r25
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
	/*------------------------ Reception ------------------------*/
	u8_g_SlaveReceive = SPDR;
    1672:	8f b1       	in	r24, 0x0f	; 15
    1674:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <u8_g_SlaveReceive>
	//DIO_s8SETPortVal(DIO_PORTA, u8_g_SlaveReceive);
	
	/* If Max size is exceeded, start overriding data */
	if(u8_g_SlaveRxIndex == SPI_BUFFER_SIZE) u8_g_SlaveRxIndex = 0;
    1678:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <u8_g_SlaveRxIndex>
    167c:	9f 30       	cpi	r25, 0x0F	; 15
    167e:	11 f4       	brne	.+4      	; 0x1684 <__vector_12+0x28>
    1680:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <u8_g_SlaveRxIndex>
	if(u8_g_SlaveReceive != DATA_END)
    1684:	83 32       	cpi	r24, 0x23	; 35
    1686:	59 f0       	breq	.+22     	; 0x169e <__vector_12+0x42>
	{
		/* Store received byte in buffer */
		arr_g_SlaveRxBuffer[u8_g_SlaveRxIndex] = u8_g_SlaveReceive;
    1688:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <u8_g_SlaveRxIndex>
    168c:	e9 2f       	mov	r30, r25
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	ed 54       	subi	r30, 0x4D	; 77
    1692:	fd 4f       	sbci	r31, 0xFD	; 253
    1694:	80 83       	st	Z, r24
		u8_g_SlaveRxIndex++;
    1696:	9f 5f       	subi	r25, 0xFF	; 255
    1698:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <u8_g_SlaveRxIndex>
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <__vector_12+0x4a>
	}
	else
	{	// Get the number of received bytes
		u8_g_SlaveRxLen = u8_g_SlaveRxIndex;
    169e:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <u8_g_SlaveRxIndex>
    16a2:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <u8_g_SlaveRxLen>
	}
	
	/*------------------------- Sending -------------------------*/
	//u8_g_SlaveTxIndex++;
	if((u8_g_SlaveTxIndex < u8_g_SlaveTxLen) && (pu8_g_SlaveTxPtr != NULL))
    16a6:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <u8_g_SlaveTxIndex>
    16aa:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <u8_g_SlaveTxLen>
    16ae:	89 17       	cp	r24, r25
    16b0:	88 f4       	brcc	.+34     	; 0x16d4 <__vector_12+0x78>
    16b2:	20 91 c2 02 	lds	r18, 0x02C2	; 0x8002c2 <pu8_g_SlaveTxPtr>
    16b6:	30 91 c3 02 	lds	r19, 0x02C3	; 0x8002c3 <pu8_g_SlaveTxPtr+0x1>
    16ba:	21 15       	cp	r18, r1
    16bc:	31 05       	cpc	r19, r1
    16be:	51 f0       	breq	.+20     	; 0x16d4 <__vector_12+0x78>
	{
		SPDR = pu8_g_SlaveTxPtr[u8_g_SlaveTxIndex++];
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	98 0f       	add	r25, r24
    16c4:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <u8_g_SlaveTxIndex>
    16c8:	f9 01       	movw	r30, r18
    16ca:	e8 0f       	add	r30, r24
    16cc:	f1 1d       	adc	r31, r1
    16ce:	80 81       	ld	r24, Z
    16d0:	8f b9       	out	0x0f, r24	; 15
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <__vector_12+0x80>
	}
	else if(u8_g_SlaveTxIndex >= u8_g_SlaveTxLen)
    16d4:	89 17       	cp	r24, r25
    16d6:	10 f0       	brcs	.+4      	; 0x16dc <__vector_12+0x80>
	{
		SPDR = DATA_END;
    16d8:	83 e2       	ldi	r24, 0x23	; 35
    16da:	8f b9       	out	0x0f, r24	; 15
	}
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <TIM0_voidInit>:
	else
	{
		return TIM_NOK;
	}
	return TIM_OK;
}
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	61 f0       	breq	.+24     	; 0x170e <TIM0_voidInit+0x1c>
    16f6:	28 f0       	brcs	.+10     	; 0x1702 <TIM0_voidInit+0x10>
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	29 f0       	breq	.+10     	; 0x1706 <TIM0_voidInit+0x14>
    16fc:	83 30       	cpi	r24, 0x03	; 3
    16fe:	29 f0       	breq	.+10     	; 0x170a <TIM0_voidInit+0x18>
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <TIM0_voidInit+0x2e>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <TIM0_voidInit+0x1e>
    1706:	28 e0       	ldi	r18, 0x08	; 8
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <TIM0_voidInit+0x1e>
    170a:	28 e4       	ldi	r18, 0x48	; 72
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <TIM0_voidInit+0x1e>
    170e:	20 e4       	ldi	r18, 0x40	; 64
    1710:	93 b7       	in	r25, 0x33	; 51
    1712:	97 7b       	andi	r25, 0xB7	; 183
    1714:	93 bf       	out	0x33, r25	; 51
    1716:	83 b7       	in	r24, 0x33	; 51
    1718:	82 2b       	or	r24, r18
    171a:	83 bf       	out	0x33, r24	; 51
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	08 95       	ret

00001724 <TIM0_Start>:
    1724:	9f ef       	ldi	r25, 0xFF	; 255
    1726:	98 0f       	add	r25, r24
    1728:	97 30       	cpi	r25, 0x07	; 7
    172a:	40 f4       	brcc	.+16     	; 0x173c <TIM0_Start+0x18>
    172c:	93 b7       	in	r25, 0x33	; 51
    172e:	98 7f       	andi	r25, 0xF8	; 248
    1730:	93 bf       	out	0x33, r25	; 51
    1732:	93 b7       	in	r25, 0x33	; 51
    1734:	89 2b       	or	r24, r25
    1736:	83 bf       	out	0x33, r24	; 51
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	08 95       	ret

00001740 <TIM0_Stop>:
    1740:	83 b7       	in	r24, 0x33	; 51
    1742:	88 7f       	andi	r24, 0xF8	; 248
    1744:	83 bf       	out	0x33, r24	; 51
    1746:	12 be       	out	0x32, r1	; 50
    1748:	88 b7       	in	r24, 0x38	; 56
    174a:	8e 7f       	andi	r24, 0xFE	; 254
    174c:	88 bf       	out	0x38, r24	; 56
    174e:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <u8_gs_OVFCount>
    1752:	08 95       	ret

00001754 <TIM0_SetValue>:
    1754:	82 bf       	out	0x32, r24	; 50
    1756:	08 95       	ret

00001758 <TIM0_GetOVF>:
    1758:	fc 01       	movw	r30, r24
    175a:	89 2b       	or	r24, r25
    175c:	29 f0       	breq	.+10     	; 0x1768 <TIM0_GetOVF+0x10>
    175e:	98 b7       	in	r25, 0x38	; 56
    1760:	91 70       	andi	r25, 0x01	; 1
    1762:	90 83       	st	Z, r25
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	08 95       	ret
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	08 95       	ret

0000176c <TIM0_ClearOVF>:
    176c:	88 b7       	in	r24, 0x38	; 56
    176e:	81 60       	ori	r24, 0x01	; 1
    1770:	88 bf       	out	0x38, r24	; 56
    1772:	08 95       	ret

00001774 <TIM0_GetState>:
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	61 f0       	breq	.+24     	; 0x1790 <TIM0_GetState+0x1c>
    1778:	03 b6       	in	r0, 0x33	; 51
    177a:	00 fe       	sbrs	r0, 0
    177c:	05 c0       	rjmp	.+10     	; 0x1788 <TIM0_GetState+0x14>
    177e:	21 e0       	ldi	r18, 0x01	; 1
    1780:	fc 01       	movw	r30, r24
    1782:	20 83       	st	Z, r18
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	08 95       	ret
    1788:	fc 01       	movw	r30, r24
    178a:	10 82       	st	Z, r1
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	08 95       	ret
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	08 95       	ret

00001794 <__vector_11>:


/*========================== ISRs =============================*/

ISR(TIM0_OVF_INT)
{
    1794:	1f 92       	push	r1
    1796:	0f 92       	push	r0
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	0f 92       	push	r0
    179c:	11 24       	eor	r1, r1
    179e:	2f 93       	push	r18
    17a0:	3f 93       	push	r19
    17a2:	4f 93       	push	r20
    17a4:	5f 93       	push	r21
    17a6:	6f 93       	push	r22
    17a8:	7f 93       	push	r23
    17aa:	8f 93       	push	r24
    17ac:	9f 93       	push	r25
    17ae:	af 93       	push	r26
    17b0:	bf 93       	push	r27
    17b2:	ef 93       	push	r30
    17b4:	ff 93       	push	r31
	if(TIM0_OVFCallbackFn != NULL)
    17b6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <TIM0_OVFCallbackFn>
    17ba:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <TIM0_OVFCallbackFn+0x1>
    17be:	89 2b       	or	r24, r25
    17c0:	b1 f0       	breq	.+44     	; 0x17ee <__vector_11+0x5a>
	{
		/* Delay is complete */
		if(u8_gs_OVFCount == u8_g_TotalOVF)
    17c2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <u8_gs_OVFCount>
    17c6:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <u8_g_TotalOVF>
    17ca:	89 13       	cpse	r24, r25
    17cc:	0d c0       	rjmp	.+26     	; 0x17e8 <__vector_11+0x54>
		{
			/* Stop the timer */
			TIM0_Stop();
    17ce:	0e 94 a0 0b 	call	0x1740	; 0x1740 <TIM0_Stop>
			
			/* Reset the OVF counter */
			u8_gs_OVFCount = 0;
    17d2:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <u8_gs_OVFCount>
			
			/* Disable OVF interrupt */
			CLEAR_BIT(TIMSK, TIMSK_TOIE0);
    17d6:	89 b7       	in	r24, 0x39	; 57
    17d8:	8e 7f       	andi	r24, 0xFE	; 254
    17da:	89 bf       	out	0x39, r24	; 57
			
			/* Call the Callback function */
			TIM0_OVFCallbackFn();
    17dc:	e0 91 c6 02 	lds	r30, 0x02C6	; 0x8002c6 <TIM0_OVFCallbackFn>
    17e0:	f0 91 c7 02 	lds	r31, 0x02C7	; 0x8002c7 <TIM0_OVFCallbackFn+0x1>
    17e4:	09 95       	icall
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <__vector_11+0x5a>
		}
		else
		{
			/* Increment the overflow count */
			u8_gs_OVFCount++;
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <u8_gs_OVFCount>
		}
	}
}
    17ee:	ff 91       	pop	r31
    17f0:	ef 91       	pop	r30
    17f2:	bf 91       	pop	r27
    17f4:	af 91       	pop	r26
    17f6:	9f 91       	pop	r25
    17f8:	8f 91       	pop	r24
    17fa:	7f 91       	pop	r23
    17fc:	6f 91       	pop	r22
    17fe:	5f 91       	pop	r21
    1800:	4f 91       	pop	r20
    1802:	3f 91       	pop	r19
    1804:	2f 91       	pop	r18
    1806:	0f 90       	pop	r0
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	0f 90       	pop	r0
    180c:	1f 90       	pop	r1
    180e:	18 95       	reti

00001810 <enuTimer2_init>:
	enu_timerStatus_t errorStatus = TIMER_OK;

	CLEAR_BIT(TIMSK_REG, TOIE2);

	return errorStatus;
}
    1810:	84 30       	cpi	r24, 0x04	; 4
    1812:	40 f5       	brcc	.+80     	; 0x1864 <enuTimer2_init+0x54>
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	71 f0       	breq	.+28     	; 0x1834 <enuTimer2_init+0x24>
    1818:	28 f0       	brcs	.+10     	; 0x1824 <enuTimer2_init+0x14>
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	99 f0       	breq	.+38     	; 0x1844 <enuTimer2_init+0x34>
    181e:	83 30       	cpi	r24, 0x03	; 3
    1820:	c9 f0       	breq	.+50     	; 0x1854 <enuTimer2_init+0x44>
    1822:	22 c0       	rjmp	.+68     	; 0x1868 <enuTimer2_init+0x58>
    1824:	85 b5       	in	r24, 0x25	; 37
    1826:	87 7f       	andi	r24, 0xF7	; 247
    1828:	85 bd       	out	0x25, r24	; 37
    182a:	85 b5       	in	r24, 0x25	; 37
    182c:	8f 7b       	andi	r24, 0xBF	; 191
    182e:	85 bd       	out	0x25, r24	; 37
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	08 95       	ret
    1834:	85 b5       	in	r24, 0x25	; 37
    1836:	87 7f       	andi	r24, 0xF7	; 247
    1838:	85 bd       	out	0x25, r24	; 37
    183a:	85 b5       	in	r24, 0x25	; 37
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	85 bd       	out	0x25, r24	; 37
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	08 95       	ret
    1844:	85 b5       	in	r24, 0x25	; 37
    1846:	88 60       	ori	r24, 0x08	; 8
    1848:	85 bd       	out	0x25, r24	; 37
    184a:	85 b5       	in	r24, 0x25	; 37
    184c:	8f 7b       	andi	r24, 0xBF	; 191
    184e:	85 bd       	out	0x25, r24	; 37
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	08 95       	ret
    1854:	85 b5       	in	r24, 0x25	; 37
    1856:	88 60       	ori	r24, 0x08	; 8
    1858:	85 bd       	out	0x25, r24	; 37
    185a:	85 b5       	in	r24, 0x25	; 37
    185c:	80 64       	ori	r24, 0x40	; 64
    185e:	85 bd       	out	0x25, r24	; 37
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	08 95       	ret
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	08 95       	ret
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	08 95       	ret

0000186c <u8Timer2_setPrescallar>:
    186c:	88 30       	cpi	r24, 0x08	; 8
    186e:	70 f4       	brcc	.+28     	; 0x188c <u8Timer2_setPrescallar+0x20>
    1870:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <global_prescaller>
    1874:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <global_timerStatus>
    1878:	91 30       	cpi	r25, 0x01	; 1
    187a:	51 f4       	brne	.+20     	; 0x1890 <u8Timer2_setPrescallar+0x24>
    187c:	95 b5       	in	r25, 0x25	; 37
    187e:	98 7f       	andi	r25, 0xF8	; 248
    1880:	89 2b       	or	r24, r25
    1882:	95 b5       	in	r25, 0x25	; 37
    1884:	89 2b       	or	r24, r25
    1886:	85 bd       	out	0x25, r24	; 37
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	08 95       	ret
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	08 95       	ret
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	08 95       	ret

00001894 <vidTimer2_OvfIrqEnable>:
    1894:	89 b7       	in	r24, 0x39	; 57
    1896:	80 64       	ori	r24, 0x40	; 64
    1898:	89 bf       	out	0x39, r24	; 57
    189a:	8f b7       	in	r24, 0x3f	; 63
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	8f bf       	out	0x3f, r24	; 63
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	08 95       	ret

000018a4 <vidTimer2_start>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_start(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG |=  global_prescaller << PRESCALLER_OFFSET;
    18a4:	95 b5       	in	r25, 0x25	; 37
    18a6:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <global_prescaller>
    18aa:	89 2b       	or	r24, r25
    18ac:	85 bd       	out	0x25, r24	; 37
	global_timerStatus  = RUNNING;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <global_timerStatus>

	return errorStatus;
}
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	08 95       	ret

000018b8 <vidTimer2_stop>:
/*************************************************************************************************************/
enu_timerStatus_t vidTimer2_stop(void)
{
	enu_timerStatus_t errorStatus = TIMER_OK;

	TCCR2_REG &=  PRESCALLER_CLR_MSK;
    18b8:	85 b5       	in	r24, 0x25	; 37
    18ba:	88 7f       	andi	r24, 0xF8	; 248
    18bc:	85 bd       	out	0x25, r24	; 37
	global_timerStatus = STOPPED;
    18be:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <global_timerStatus>

	return errorStatus;
}
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	08 95       	ret

000018c6 <u8Timer2_setTime_ms>:
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
    18c6:	8f 92       	push	r8
    18c8:	9f 92       	push	r9
    18ca:	af 92       	push	r10
    18cc:	bf 92       	push	r11
    18ce:	cf 92       	push	r12
    18d0:	df 92       	push	r13
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
	enu_timerStatus_t errorStatus = TIMER_OK;
	Uint32_t desired_ticks;
	float32_t tick_time_ms;
	if( u32_time_ms < MAX_TIM_MS )
    18d6:	68 38       	cpi	r22, 0x88	; 136
    18d8:	23 e1       	ldi	r18, 0x13	; 19
    18da:	72 07       	cpc	r23, r18
    18dc:	81 05       	cpc	r24, r1
    18de:	91 05       	cpc	r25, r1
    18e0:	08 f0       	brcs	.+2      	; 0x18e4 <u8Timer2_setTime_ms+0x1e>
    18e2:	60 c0       	rjmp	.+192    	; 0x19a4 <u8Timer2_setTime_ms+0xde>
    18e4:	6b 01       	movw	r12, r22
    18e6:	7c 01       	movw	r14, r24
	{
		tick_time_ms = (float32_t)prescaller_map[global_prescaller] / ((Uint32_t)F_CPU / 1000U)  ;
    18e8:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <global_prescaller>
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	ee 0f       	add	r30, r30
    18f0:	ff 1f       	adc	r31, r31
    18f2:	e8 56       	subi	r30, 0x68	; 104
    18f4:	fd 4f       	sbci	r31, 0xFD	; 253
    18f6:	60 81       	ld	r22, Z
    18f8:	71 81       	ldd	r23, Z+1	; 0x01
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__floatunsisf>
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	55 e4       	ldi	r21, 0x45	; 69
    190a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__divsf3>
    190e:	4b 01       	movw	r8, r22
    1910:	5c 01       	movw	r10, r24
		desired_ticks = u32_time_ms / tick_time_ms;
    1912:	c7 01       	movw	r24, r14
    1914:	b6 01       	movw	r22, r12
    1916:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__floatunsisf>
    191a:	a5 01       	movw	r20, r10
    191c:	94 01       	movw	r18, r8
    191e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <__divsf3>
    1922:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__fixunssfsi>

		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
    1926:	61 15       	cp	r22, r1
    1928:	21 e0       	ldi	r18, 0x01	; 1
    192a:	72 07       	cpc	r23, r18
    192c:	81 05       	cpc	r24, r1
    192e:	91 05       	cpc	r25, r1
    1930:	29 f4       	brne	.+10     	; 0x193c <u8Timer2_setTime_ms+0x76>
		{
			global_ovf = 1;
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	39 c0       	rjmp	.+114    	; 0x19ae <u8Timer2_setTime_ms+0xe8>
		/* Compare ticks with OVF_ticks */
		if(desired_ticks == OVF_TICKS)
		{
			global_ovf = 1;
		}
		else if(desired_ticks < OVF_TICKS)
    193c:	6f 3f       	cpi	r22, 0xFF	; 255
    193e:	71 05       	cpc	r23, r1
    1940:	81 05       	cpc	r24, r1
    1942:	91 05       	cpc	r25, r1
    1944:	09 f0       	breq	.+2      	; 0x1948 <u8Timer2_setTime_ms+0x82>
    1946:	78 f4       	brcc	.+30     	; 0x1966 <u8Timer2_setTime_ms+0xa0>
		{
			preload = OVF_TICKS - desired_ticks;
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	31 e0       	ldi	r19, 0x01	; 1
    194c:	c9 01       	movw	r24, r18
    194e:	86 1b       	sub	r24, r22
    1950:	97 0b       	sbc	r25, r23
    1952:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <preload+0x1>
    1956:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <preload>
			TCNT2_REG = preload;
    195a:	84 bd       	out	0x24, r24	; 36
			global_ovf = 1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	24 c0       	rjmp	.+72     	; 0x19ae <u8Timer2_setTime_ms+0xe8>
		{
			preload = OVF_TICKS - desired_ticks;
			TCNT2_REG = preload;
			global_ovf = 1;
		}
		else if(desired_ticks > OVF_TICKS)
    1966:	61 30       	cpi	r22, 0x01	; 1
    1968:	21 e0       	ldi	r18, 0x01	; 1
    196a:	72 07       	cpc	r23, r18
    196c:	81 05       	cpc	r24, r1
    196e:	91 05       	cpc	r25, r1
    1970:	d8 f0       	brcs	.+54     	; 0x19a8 <u8Timer2_setTime_ms+0xe2>
		{
			global_ovf = (Uchar8_t)(desired_ticks / OVF_TICKS);
    1972:	70 93 cf 02 	sts	0x02CF, r23	; 0x8002cf <global_ovf>
			preload = (uint16_t)(OVF_TICKS - (desired_ticks % OVF_TICKS ));
    1976:	77 27       	eor	r23, r23
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	91 e0       	ldi	r25, 0x01	; 1
    197c:	86 1b       	sub	r24, r22
    197e:	97 0b       	sbc	r25, r23
    1980:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <preload+0x1>
    1984:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <preload>
			TCNT2_REG = preload;
    1988:	84 bd       	out	0x24, r24	; 36
			if (preload > 0U)
    198a:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <preload>
    198e:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <preload+0x1>
    1992:	89 2b       	or	r24, r25
    1994:	59 f0       	breq	.+22     	; 0x19ac <u8Timer2_setTime_ms+0xe6>
			{
				global_ovf++;
    1996:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <global_ovf>
    199a:	8f 5f       	subi	r24, 0xFF	; 255
    199c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <global_ovf>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <u8Timer2_setTime_ms+0xe8>
			}
		}
	}
		else
		{
			errorStatus = TIMER_NOK;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <u8Timer2_setTime_ms+0xe8>
	return errorStatus;
}
/*************************************************************************************************************/
enu_timerStatus_t u8Timer2_setTime_ms(Uint32_t u32_time_ms)
{
	enu_timerStatus_t errorStatus = TIMER_OK;
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <u8Timer2_setTime_ms+0xe8>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
			errorStatus = TIMER_NOK;
		}


		return errorStatus;
	}
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    19be:	08 95       	ret

000019c0 <vidTimer2_setcbf_OVF>:

/*************************************************************************************************************/
void vidTimer2_setcbf_OVF(cbf_t cbf)
{
	if (cbf != NULL)
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	21 f0       	breq	.+8      	; 0x19cc <vidTimer2_setcbf_OVF+0xc>
	{
		globalCallFunc = cbf;
    19c4:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <globalCallFunc+0x1>
    19c8:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <globalCallFunc>
    19cc:	08 95       	ret

000019ce <__vector_5>:

/*************************************************************************************************************
 * 							ISR Interrupt Handling
 ************************************************************************************************************/
ISR(TIMER2_OVF_vect)
{
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	11 24       	eor	r1, r1
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	4f 93       	push	r20
    19de:	5f 93       	push	r21
    19e0:	6f 93       	push	r22
    19e2:	7f 93       	push	r23
    19e4:	8f 93       	push	r24
    19e6:	9f 93       	push	r25
    19e8:	af 93       	push	r26
    19ea:	bf 93       	push	r27
    19ec:	ef 93       	push	r30
    19ee:	ff 93       	push	r31
	static Uchar8_t counter = 0;
	counter++;
    19f0:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <counter.1731>
    19f4:	8f 5f       	subi	r24, 0xFF	; 255
    19f6:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <counter.1731>
	if(counter == global_ovf)
    19fa:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <global_ovf>
    19fe:	89 13       	cpse	r24, r25
    1a00:	0c c0       	rjmp	.+24     	; 0x1a1a <__vector_5+0x4c>
	{
		if (globalCallFunc != NULL)
    1a02:	e0 91 cb 02 	lds	r30, 0x02CB	; 0x8002cb <globalCallFunc>
    1a06:	f0 91 cc 02 	lds	r31, 0x02CC	; 0x8002cc <globalCallFunc+0x1>
    1a0a:	30 97       	sbiw	r30, 0x00	; 0
    1a0c:	31 f0       	breq	.+12     	; 0x1a1a <__vector_5+0x4c>
		{
			counter = 0;
    1a0e:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <counter.1731>

			globalCallFunc();
    1a12:	09 95       	icall
			TCNT2_REG = preload;
    1a14:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <preload>
    1a18:	84 bd       	out	0x24, r24	; 36
//			global_ovf = 0;
//			vidTimer1_stop();
		}
	}
}
    1a1a:	ff 91       	pop	r31
    1a1c:	ef 91       	pop	r30
    1a1e:	bf 91       	pop	r27
    1a20:	af 91       	pop	r26
    1a22:	9f 91       	pop	r25
    1a24:	8f 91       	pop	r24
    1a26:	7f 91       	pop	r23
    1a28:	6f 91       	pop	r22
    1a2a:	5f 91       	pop	r21
    1a2c:	4f 91       	pop	r20
    1a2e:	3f 91       	pop	r19
    1a30:	2f 91       	pop	r18
    1a32:	0f 90       	pop	r0
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	0f 90       	pop	r0
    1a38:	1f 90       	pop	r1
    1a3a:	18 95       	reti

00001a3c <__subsf3>:
    1a3c:	50 58       	subi	r21, 0x80	; 128

00001a3e <__addsf3>:
    1a3e:	bb 27       	eor	r27, r27
    1a40:	aa 27       	eor	r26, r26
    1a42:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <__addsf3x>
    1a46:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__fp_round>
    1a4a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__fp_pscA>
    1a4e:	38 f0       	brcs	.+14     	; 0x1a5e <__addsf3+0x20>
    1a50:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__fp_pscB>
    1a54:	20 f0       	brcs	.+8      	; 0x1a5e <__addsf3+0x20>
    1a56:	39 f4       	brne	.+14     	; 0x1a66 <__addsf3+0x28>
    1a58:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5a:	19 f4       	brne	.+6      	; 0x1a62 <__addsf3+0x24>
    1a5c:	26 f4       	brtc	.+8      	; 0x1a66 <__addsf3+0x28>
    1a5e:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_nan>
    1a62:	0e f4       	brtc	.+2      	; 0x1a66 <__addsf3+0x28>
    1a64:	e0 95       	com	r30
    1a66:	e7 fb       	bst	r30, 7
    1a68:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>

00001a6c <__addsf3x>:
    1a6c:	e9 2f       	mov	r30, r25
    1a6e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_split3>
    1a72:	58 f3       	brcs	.-42     	; 0x1a4a <__addsf3+0xc>
    1a74:	ba 17       	cp	r27, r26
    1a76:	62 07       	cpc	r22, r18
    1a78:	73 07       	cpc	r23, r19
    1a7a:	84 07       	cpc	r24, r20
    1a7c:	95 07       	cpc	r25, r21
    1a7e:	20 f0       	brcs	.+8      	; 0x1a88 <__addsf3x+0x1c>
    1a80:	79 f4       	brne	.+30     	; 0x1aa0 <__addsf3x+0x34>
    1a82:	a6 f5       	brtc	.+104    	; 0x1aec <__addsf3x+0x80>
    1a84:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_zero>
    1a88:	0e f4       	brtc	.+2      	; 0x1a8c <__addsf3x+0x20>
    1a8a:	e0 95       	com	r30
    1a8c:	0b 2e       	mov	r0, r27
    1a8e:	ba 2f       	mov	r27, r26
    1a90:	a0 2d       	mov	r26, r0
    1a92:	0b 01       	movw	r0, r22
    1a94:	b9 01       	movw	r22, r18
    1a96:	90 01       	movw	r18, r0
    1a98:	0c 01       	movw	r0, r24
    1a9a:	ca 01       	movw	r24, r20
    1a9c:	a0 01       	movw	r20, r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	ff 27       	eor	r31, r31
    1aa2:	59 1b       	sub	r21, r25
    1aa4:	99 f0       	breq	.+38     	; 0x1acc <__addsf3x+0x60>
    1aa6:	59 3f       	cpi	r21, 0xF9	; 249
    1aa8:	50 f4       	brcc	.+20     	; 0x1abe <__addsf3x+0x52>
    1aaa:	50 3e       	cpi	r21, 0xE0	; 224
    1aac:	68 f1       	brcs	.+90     	; 0x1b08 <__addsf3x+0x9c>
    1aae:	1a 16       	cp	r1, r26
    1ab0:	f0 40       	sbci	r31, 0x00	; 0
    1ab2:	a2 2f       	mov	r26, r18
    1ab4:	23 2f       	mov	r18, r19
    1ab6:	34 2f       	mov	r19, r20
    1ab8:	44 27       	eor	r20, r20
    1aba:	58 5f       	subi	r21, 0xF8	; 248
    1abc:	f3 cf       	rjmp	.-26     	; 0x1aa4 <__addsf3x+0x38>
    1abe:	46 95       	lsr	r20
    1ac0:	37 95       	ror	r19
    1ac2:	27 95       	ror	r18
    1ac4:	a7 95       	ror	r26
    1ac6:	f0 40       	sbci	r31, 0x00	; 0
    1ac8:	53 95       	inc	r21
    1aca:	c9 f7       	brne	.-14     	; 0x1abe <__addsf3x+0x52>
    1acc:	7e f4       	brtc	.+30     	; 0x1aec <__addsf3x+0x80>
    1ace:	1f 16       	cp	r1, r31
    1ad0:	ba 0b       	sbc	r27, r26
    1ad2:	62 0b       	sbc	r22, r18
    1ad4:	73 0b       	sbc	r23, r19
    1ad6:	84 0b       	sbc	r24, r20
    1ad8:	ba f0       	brmi	.+46     	; 0x1b08 <__addsf3x+0x9c>
    1ada:	91 50       	subi	r25, 0x01	; 1
    1adc:	a1 f0       	breq	.+40     	; 0x1b06 <__addsf3x+0x9a>
    1ade:	ff 0f       	add	r31, r31
    1ae0:	bb 1f       	adc	r27, r27
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	c2 f7       	brpl	.-16     	; 0x1ada <__addsf3x+0x6e>
    1aea:	0e c0       	rjmp	.+28     	; 0x1b08 <__addsf3x+0x9c>
    1aec:	ba 0f       	add	r27, r26
    1aee:	62 1f       	adc	r22, r18
    1af0:	73 1f       	adc	r23, r19
    1af2:	84 1f       	adc	r24, r20
    1af4:	48 f4       	brcc	.+18     	; 0x1b08 <__addsf3x+0x9c>
    1af6:	87 95       	ror	r24
    1af8:	77 95       	ror	r23
    1afa:	67 95       	ror	r22
    1afc:	b7 95       	ror	r27
    1afe:	f7 95       	ror	r31
    1b00:	9e 3f       	cpi	r25, 0xFE	; 254
    1b02:	08 f0       	brcs	.+2      	; 0x1b06 <__addsf3x+0x9a>
    1b04:	b0 cf       	rjmp	.-160    	; 0x1a66 <__addsf3+0x28>
    1b06:	93 95       	inc	r25
    1b08:	88 0f       	add	r24, r24
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <__addsf3x+0xa2>
    1b0c:	99 27       	eor	r25, r25
    1b0e:	ee 0f       	add	r30, r30
    1b10:	97 95       	ror	r25
    1b12:	87 95       	ror	r24
    1b14:	08 95       	ret

00001b16 <__cmpsf2>:
    1b16:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <__fp_cmp>
    1b1a:	08 f4       	brcc	.+2      	; 0x1b1e <__cmpsf2+0x8>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	08 95       	ret

00001b20 <__divsf3>:
    1b20:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__divsf3x>
    1b24:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__fp_round>
    1b28:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__fp_pscB>
    1b2c:	58 f0       	brcs	.+22     	; 0x1b44 <__divsf3+0x24>
    1b2e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__fp_pscA>
    1b32:	40 f0       	brcs	.+16     	; 0x1b44 <__divsf3+0x24>
    1b34:	29 f4       	brne	.+10     	; 0x1b40 <__divsf3+0x20>
    1b36:	5f 3f       	cpi	r21, 0xFF	; 255
    1b38:	29 f0       	breq	.+10     	; 0x1b44 <__divsf3+0x24>
    1b3a:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>
    1b3e:	51 11       	cpse	r21, r1
    1b40:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_szero>
    1b44:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_nan>

00001b48 <__divsf3x>:
    1b48:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_split3>
    1b4c:	68 f3       	brcs	.-38     	; 0x1b28 <__divsf3+0x8>

00001b4e <__divsf3_pse>:
    1b4e:	99 23       	and	r25, r25
    1b50:	b1 f3       	breq	.-20     	; 0x1b3e <__divsf3+0x1e>
    1b52:	55 23       	and	r21, r21
    1b54:	91 f3       	breq	.-28     	; 0x1b3a <__divsf3+0x1a>
    1b56:	95 1b       	sub	r25, r21
    1b58:	55 0b       	sbc	r21, r21
    1b5a:	bb 27       	eor	r27, r27
    1b5c:	aa 27       	eor	r26, r26
    1b5e:	62 17       	cp	r22, r18
    1b60:	73 07       	cpc	r23, r19
    1b62:	84 07       	cpc	r24, r20
    1b64:	38 f0       	brcs	.+14     	; 0x1b74 <__divsf3_pse+0x26>
    1b66:	9f 5f       	subi	r25, 0xFF	; 255
    1b68:	5f 4f       	sbci	r21, 0xFF	; 255
    1b6a:	22 0f       	add	r18, r18
    1b6c:	33 1f       	adc	r19, r19
    1b6e:	44 1f       	adc	r20, r20
    1b70:	aa 1f       	adc	r26, r26
    1b72:	a9 f3       	breq	.-22     	; 0x1b5e <__divsf3_pse+0x10>
    1b74:	35 d0       	rcall	.+106    	; 0x1be0 <__divsf3_pse+0x92>
    1b76:	0e 2e       	mov	r0, r30
    1b78:	3a f0       	brmi	.+14     	; 0x1b88 <__divsf3_pse+0x3a>
    1b7a:	e0 e8       	ldi	r30, 0x80	; 128
    1b7c:	32 d0       	rcall	.+100    	; 0x1be2 <__divsf3_pse+0x94>
    1b7e:	91 50       	subi	r25, 0x01	; 1
    1b80:	50 40       	sbci	r21, 0x00	; 0
    1b82:	e6 95       	lsr	r30
    1b84:	00 1c       	adc	r0, r0
    1b86:	ca f7       	brpl	.-14     	; 0x1b7a <__divsf3_pse+0x2c>
    1b88:	2b d0       	rcall	.+86     	; 0x1be0 <__divsf3_pse+0x92>
    1b8a:	fe 2f       	mov	r31, r30
    1b8c:	29 d0       	rcall	.+82     	; 0x1be0 <__divsf3_pse+0x92>
    1b8e:	66 0f       	add	r22, r22
    1b90:	77 1f       	adc	r23, r23
    1b92:	88 1f       	adc	r24, r24
    1b94:	bb 1f       	adc	r27, r27
    1b96:	26 17       	cp	r18, r22
    1b98:	37 07       	cpc	r19, r23
    1b9a:	48 07       	cpc	r20, r24
    1b9c:	ab 07       	cpc	r26, r27
    1b9e:	b0 e8       	ldi	r27, 0x80	; 128
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <__divsf3_pse+0x56>
    1ba2:	bb 0b       	sbc	r27, r27
    1ba4:	80 2d       	mov	r24, r0
    1ba6:	bf 01       	movw	r22, r30
    1ba8:	ff 27       	eor	r31, r31
    1baa:	93 58       	subi	r25, 0x83	; 131
    1bac:	5f 4f       	sbci	r21, 0xFF	; 255
    1bae:	3a f0       	brmi	.+14     	; 0x1bbe <__divsf3_pse+0x70>
    1bb0:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	78 f0       	brcs	.+30     	; 0x1bd4 <__divsf3_pse+0x86>
    1bb6:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>
    1bba:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_szero>
    1bbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc0:	e4 f3       	brlt	.-8      	; 0x1bba <__divsf3_pse+0x6c>
    1bc2:	98 3e       	cpi	r25, 0xE8	; 232
    1bc4:	d4 f3       	brlt	.-12     	; 0x1bba <__divsf3_pse+0x6c>
    1bc6:	86 95       	lsr	r24
    1bc8:	77 95       	ror	r23
    1bca:	67 95       	ror	r22
    1bcc:	b7 95       	ror	r27
    1bce:	f7 95       	ror	r31
    1bd0:	9f 5f       	subi	r25, 0xFF	; 255
    1bd2:	c9 f7       	brne	.-14     	; 0x1bc6 <__divsf3_pse+0x78>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	91 1d       	adc	r25, r1
    1bd8:	96 95       	lsr	r25
    1bda:	87 95       	ror	r24
    1bdc:	97 f9       	bld	r25, 7
    1bde:	08 95       	ret
    1be0:	e1 e0       	ldi	r30, 0x01	; 1
    1be2:	66 0f       	add	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	88 1f       	adc	r24, r24
    1be8:	bb 1f       	adc	r27, r27
    1bea:	62 17       	cp	r22, r18
    1bec:	73 07       	cpc	r23, r19
    1bee:	84 07       	cpc	r24, r20
    1bf0:	ba 07       	cpc	r27, r26
    1bf2:	20 f0       	brcs	.+8      	; 0x1bfc <__divsf3_pse+0xae>
    1bf4:	62 1b       	sub	r22, r18
    1bf6:	73 0b       	sbc	r23, r19
    1bf8:	84 0b       	sbc	r24, r20
    1bfa:	ba 0b       	sbc	r27, r26
    1bfc:	ee 1f       	adc	r30, r30
    1bfe:	88 f7       	brcc	.-30     	; 0x1be2 <__divsf3_pse+0x94>
    1c00:	e0 95       	com	r30
    1c02:	08 95       	ret

00001c04 <__fixunssfsi>:
    1c04:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__fp_splitA>
    1c08:	88 f0       	brcs	.+34     	; 0x1c2c <__fixunssfsi+0x28>
    1c0a:	9f 57       	subi	r25, 0x7F	; 127
    1c0c:	98 f0       	brcs	.+38     	; 0x1c34 <__fixunssfsi+0x30>
    1c0e:	b9 2f       	mov	r27, r25
    1c10:	99 27       	eor	r25, r25
    1c12:	b7 51       	subi	r27, 0x17	; 23
    1c14:	b0 f0       	brcs	.+44     	; 0x1c42 <__fixunssfsi+0x3e>
    1c16:	e1 f0       	breq	.+56     	; 0x1c50 <__fixunssfsi+0x4c>
    1c18:	66 0f       	add	r22, r22
    1c1a:	77 1f       	adc	r23, r23
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	1a f0       	brmi	.+6      	; 0x1c28 <__fixunssfsi+0x24>
    1c22:	ba 95       	dec	r27
    1c24:	c9 f7       	brne	.-14     	; 0x1c18 <__fixunssfsi+0x14>
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <__fixunssfsi+0x4c>
    1c28:	b1 30       	cpi	r27, 0x01	; 1
    1c2a:	91 f0       	breq	.+36     	; 0x1c50 <__fixunssfsi+0x4c>
    1c2c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__fp_zero>
    1c30:	b1 e0       	ldi	r27, 0x01	; 1
    1c32:	08 95       	ret
    1c34:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__fp_zero>
    1c38:	67 2f       	mov	r22, r23
    1c3a:	78 2f       	mov	r23, r24
    1c3c:	88 27       	eor	r24, r24
    1c3e:	b8 5f       	subi	r27, 0xF8	; 248
    1c40:	39 f0       	breq	.+14     	; 0x1c50 <__fixunssfsi+0x4c>
    1c42:	b9 3f       	cpi	r27, 0xF9	; 249
    1c44:	cc f3       	brlt	.-14     	; 0x1c38 <__fixunssfsi+0x34>
    1c46:	86 95       	lsr	r24
    1c48:	77 95       	ror	r23
    1c4a:	67 95       	ror	r22
    1c4c:	b3 95       	inc	r27
    1c4e:	d9 f7       	brne	.-10     	; 0x1c46 <__fixunssfsi+0x42>
    1c50:	3e f4       	brtc	.+14     	; 0x1c60 <__fixunssfsi+0x5c>
    1c52:	90 95       	com	r25
    1c54:	80 95       	com	r24
    1c56:	70 95       	com	r23
    1c58:	61 95       	neg	r22
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c60:	08 95       	ret

00001c62 <__floatunsisf>:
    1c62:	e8 94       	clt
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <__floatsisf+0x12>

00001c66 <__floatsisf>:
    1c66:	97 fb       	bst	r25, 7
    1c68:	3e f4       	brtc	.+14     	; 0x1c78 <__floatsisf+0x12>
    1c6a:	90 95       	com	r25
    1c6c:	80 95       	com	r24
    1c6e:	70 95       	com	r23
    1c70:	61 95       	neg	r22
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	8f 4f       	sbci	r24, 0xFF	; 255
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	99 23       	and	r25, r25
    1c7a:	a9 f0       	breq	.+42     	; 0x1ca6 <__floatsisf+0x40>
    1c7c:	f9 2f       	mov	r31, r25
    1c7e:	96 e9       	ldi	r25, 0x96	; 150
    1c80:	bb 27       	eor	r27, r27
    1c82:	93 95       	inc	r25
    1c84:	f6 95       	lsr	r31
    1c86:	87 95       	ror	r24
    1c88:	77 95       	ror	r23
    1c8a:	67 95       	ror	r22
    1c8c:	b7 95       	ror	r27
    1c8e:	f1 11       	cpse	r31, r1
    1c90:	f8 cf       	rjmp	.-16     	; 0x1c82 <__floatsisf+0x1c>
    1c92:	fa f4       	brpl	.+62     	; 0x1cd2 <__floatsisf+0x6c>
    1c94:	bb 0f       	add	r27, r27
    1c96:	11 f4       	brne	.+4      	; 0x1c9c <__floatsisf+0x36>
    1c98:	60 ff       	sbrs	r22, 0
    1c9a:	1b c0       	rjmp	.+54     	; 0x1cd2 <__floatsisf+0x6c>
    1c9c:	6f 5f       	subi	r22, 0xFF	; 255
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	16 c0       	rjmp	.+44     	; 0x1cd2 <__floatsisf+0x6c>
    1ca6:	88 23       	and	r24, r24
    1ca8:	11 f0       	breq	.+4      	; 0x1cae <__floatsisf+0x48>
    1caa:	96 e9       	ldi	r25, 0x96	; 150
    1cac:	11 c0       	rjmp	.+34     	; 0x1cd0 <__floatsisf+0x6a>
    1cae:	77 23       	and	r23, r23
    1cb0:	21 f0       	breq	.+8      	; 0x1cba <__floatsisf+0x54>
    1cb2:	9e e8       	ldi	r25, 0x8E	; 142
    1cb4:	87 2f       	mov	r24, r23
    1cb6:	76 2f       	mov	r23, r22
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <__floatsisf+0x5e>
    1cba:	66 23       	and	r22, r22
    1cbc:	71 f0       	breq	.+28     	; 0x1cda <__floatsisf+0x74>
    1cbe:	96 e8       	ldi	r25, 0x86	; 134
    1cc0:	86 2f       	mov	r24, r22
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	2a f0       	brmi	.+10     	; 0x1cd2 <__floatsisf+0x6c>
    1cc8:	9a 95       	dec	r25
    1cca:	66 0f       	add	r22, r22
    1ccc:	77 1f       	adc	r23, r23
    1cce:	88 1f       	adc	r24, r24
    1cd0:	da f7       	brpl	.-10     	; 0x1cc8 <__floatsisf+0x62>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	96 95       	lsr	r25
    1cd6:	87 95       	ror	r24
    1cd8:	97 f9       	bld	r25, 7
    1cda:	08 95       	ret

00001cdc <__fp_cmp>:
    1cdc:	99 0f       	add	r25, r25
    1cde:	00 08       	sbc	r0, r0
    1ce0:	55 0f       	add	r21, r21
    1ce2:	aa 0b       	sbc	r26, r26
    1ce4:	e0 e8       	ldi	r30, 0x80	; 128
    1ce6:	fe ef       	ldi	r31, 0xFE	; 254
    1ce8:	16 16       	cp	r1, r22
    1cea:	17 06       	cpc	r1, r23
    1cec:	e8 07       	cpc	r30, r24
    1cee:	f9 07       	cpc	r31, r25
    1cf0:	c0 f0       	brcs	.+48     	; 0x1d22 <__fp_cmp+0x46>
    1cf2:	12 16       	cp	r1, r18
    1cf4:	13 06       	cpc	r1, r19
    1cf6:	e4 07       	cpc	r30, r20
    1cf8:	f5 07       	cpc	r31, r21
    1cfa:	98 f0       	brcs	.+38     	; 0x1d22 <__fp_cmp+0x46>
    1cfc:	62 1b       	sub	r22, r18
    1cfe:	73 0b       	sbc	r23, r19
    1d00:	84 0b       	sbc	r24, r20
    1d02:	95 0b       	sbc	r25, r21
    1d04:	39 f4       	brne	.+14     	; 0x1d14 <__fp_cmp+0x38>
    1d06:	0a 26       	eor	r0, r26
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <__fp_cmp+0x46>
    1d0a:	23 2b       	or	r18, r19
    1d0c:	24 2b       	or	r18, r20
    1d0e:	25 2b       	or	r18, r21
    1d10:	21 f4       	brne	.+8      	; 0x1d1a <__fp_cmp+0x3e>
    1d12:	08 95       	ret
    1d14:	0a 26       	eor	r0, r26
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <__fp_cmp+0x3e>
    1d18:	a1 40       	sbci	r26, 0x01	; 1
    1d1a:	a6 95       	lsr	r26
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	81 1d       	adc	r24, r1
    1d20:	81 1d       	adc	r24, r1
    1d22:	08 95       	ret

00001d24 <__fp_inf>:
    1d24:	97 f9       	bld	r25, 7
    1d26:	9f 67       	ori	r25, 0x7F	; 127
    1d28:	80 e8       	ldi	r24, 0x80	; 128
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	60 e0       	ldi	r22, 0x00	; 0
    1d2e:	08 95       	ret

00001d30 <__fp_nan>:
    1d30:	9f ef       	ldi	r25, 0xFF	; 255
    1d32:	80 ec       	ldi	r24, 0xC0	; 192
    1d34:	08 95       	ret

00001d36 <__fp_pscA>:
    1d36:	00 24       	eor	r0, r0
    1d38:	0a 94       	dec	r0
    1d3a:	16 16       	cp	r1, r22
    1d3c:	17 06       	cpc	r1, r23
    1d3e:	18 06       	cpc	r1, r24
    1d40:	09 06       	cpc	r0, r25
    1d42:	08 95       	ret

00001d44 <__fp_pscB>:
    1d44:	00 24       	eor	r0, r0
    1d46:	0a 94       	dec	r0
    1d48:	12 16       	cp	r1, r18
    1d4a:	13 06       	cpc	r1, r19
    1d4c:	14 06       	cpc	r1, r20
    1d4e:	05 06       	cpc	r0, r21
    1d50:	08 95       	ret

00001d52 <__fp_round>:
    1d52:	09 2e       	mov	r0, r25
    1d54:	03 94       	inc	r0
    1d56:	00 0c       	add	r0, r0
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <__fp_round+0xc>
    1d5a:	88 23       	and	r24, r24
    1d5c:	52 f0       	brmi	.+20     	; 0x1d72 <__fp_round+0x20>
    1d5e:	bb 0f       	add	r27, r27
    1d60:	40 f4       	brcc	.+16     	; 0x1d72 <__fp_round+0x20>
    1d62:	bf 2b       	or	r27, r31
    1d64:	11 f4       	brne	.+4      	; 0x1d6a <__fp_round+0x18>
    1d66:	60 ff       	sbrs	r22, 0
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <__fp_round+0x20>
    1d6a:	6f 5f       	subi	r22, 0xFF	; 255
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d70:	9f 4f       	sbci	r25, 0xFF	; 255
    1d72:	08 95       	ret

00001d74 <__fp_split3>:
    1d74:	57 fd       	sbrc	r21, 7
    1d76:	90 58       	subi	r25, 0x80	; 128
    1d78:	44 0f       	add	r20, r20
    1d7a:	55 1f       	adc	r21, r21
    1d7c:	59 f0       	breq	.+22     	; 0x1d94 <__fp_splitA+0x10>
    1d7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <__fp_splitA+0x1a>
    1d82:	47 95       	ror	r20

00001d84 <__fp_splitA>:
    1d84:	88 0f       	add	r24, r24
    1d86:	97 fb       	bst	r25, 7
    1d88:	99 1f       	adc	r25, r25
    1d8a:	61 f0       	breq	.+24     	; 0x1da4 <__fp_splitA+0x20>
    1d8c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d8e:	79 f0       	breq	.+30     	; 0x1dae <__fp_splitA+0x2a>
    1d90:	87 95       	ror	r24
    1d92:	08 95       	ret
    1d94:	12 16       	cp	r1, r18
    1d96:	13 06       	cpc	r1, r19
    1d98:	14 06       	cpc	r1, r20
    1d9a:	55 1f       	adc	r21, r21
    1d9c:	f2 cf       	rjmp	.-28     	; 0x1d82 <__fp_split3+0xe>
    1d9e:	46 95       	lsr	r20
    1da0:	f1 df       	rcall	.-30     	; 0x1d84 <__fp_splitA>
    1da2:	08 c0       	rjmp	.+16     	; 0x1db4 <__fp_splitA+0x30>
    1da4:	16 16       	cp	r1, r22
    1da6:	17 06       	cpc	r1, r23
    1da8:	18 06       	cpc	r1, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	f1 cf       	rjmp	.-30     	; 0x1d90 <__fp_splitA+0xc>
    1dae:	86 95       	lsr	r24
    1db0:	71 05       	cpc	r23, r1
    1db2:	61 05       	cpc	r22, r1
    1db4:	08 94       	sec
    1db6:	08 95       	ret

00001db8 <__fp_zero>:
    1db8:	e8 94       	clt

00001dba <__fp_szero>:
    1dba:	bb 27       	eor	r27, r27
    1dbc:	66 27       	eor	r22, r22
    1dbe:	77 27       	eor	r23, r23
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	97 f9       	bld	r25, 7
    1dc4:	08 95       	ret

00001dc6 <__mulsf3>:
    1dc6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__mulsf3x>
    1dca:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__fp_round>
    1dce:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__fp_pscA>
    1dd2:	38 f0       	brcs	.+14     	; 0x1de2 <__mulsf3+0x1c>
    1dd4:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <__fp_pscB>
    1dd8:	20 f0       	brcs	.+8      	; 0x1de2 <__mulsf3+0x1c>
    1dda:	95 23       	and	r25, r21
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <__mulsf3+0x1c>
    1dde:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>
    1de2:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_nan>
    1de6:	11 24       	eor	r1, r1
    1de8:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_szero>

00001dec <__mulsf3x>:
    1dec:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__fp_split3>
    1df0:	70 f3       	brcs	.-36     	; 0x1dce <__mulsf3+0x8>

00001df2 <__mulsf3_pse>:
    1df2:	95 9f       	mul	r25, r21
    1df4:	c1 f3       	breq	.-16     	; 0x1de6 <__mulsf3+0x20>
    1df6:	95 0f       	add	r25, r21
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	55 1f       	adc	r21, r21
    1dfc:	62 9f       	mul	r22, r18
    1dfe:	f0 01       	movw	r30, r0
    1e00:	72 9f       	mul	r23, r18
    1e02:	bb 27       	eor	r27, r27
    1e04:	f0 0d       	add	r31, r0
    1e06:	b1 1d       	adc	r27, r1
    1e08:	63 9f       	mul	r22, r19
    1e0a:	aa 27       	eor	r26, r26
    1e0c:	f0 0d       	add	r31, r0
    1e0e:	b1 1d       	adc	r27, r1
    1e10:	aa 1f       	adc	r26, r26
    1e12:	64 9f       	mul	r22, r20
    1e14:	66 27       	eor	r22, r22
    1e16:	b0 0d       	add	r27, r0
    1e18:	a1 1d       	adc	r26, r1
    1e1a:	66 1f       	adc	r22, r22
    1e1c:	82 9f       	mul	r24, r18
    1e1e:	22 27       	eor	r18, r18
    1e20:	b0 0d       	add	r27, r0
    1e22:	a1 1d       	adc	r26, r1
    1e24:	62 1f       	adc	r22, r18
    1e26:	73 9f       	mul	r23, r19
    1e28:	b0 0d       	add	r27, r0
    1e2a:	a1 1d       	adc	r26, r1
    1e2c:	62 1f       	adc	r22, r18
    1e2e:	83 9f       	mul	r24, r19
    1e30:	a0 0d       	add	r26, r0
    1e32:	61 1d       	adc	r22, r1
    1e34:	22 1f       	adc	r18, r18
    1e36:	74 9f       	mul	r23, r20
    1e38:	33 27       	eor	r19, r19
    1e3a:	a0 0d       	add	r26, r0
    1e3c:	61 1d       	adc	r22, r1
    1e3e:	23 1f       	adc	r18, r19
    1e40:	84 9f       	mul	r24, r20
    1e42:	60 0d       	add	r22, r0
    1e44:	21 1d       	adc	r18, r1
    1e46:	82 2f       	mov	r24, r18
    1e48:	76 2f       	mov	r23, r22
    1e4a:	6a 2f       	mov	r22, r26
    1e4c:	11 24       	eor	r1, r1
    1e4e:	9f 57       	subi	r25, 0x7F	; 127
    1e50:	50 40       	sbci	r21, 0x00	; 0
    1e52:	9a f0       	brmi	.+38     	; 0x1e7a <__mulsf3_pse+0x88>
    1e54:	f1 f0       	breq	.+60     	; 0x1e92 <__mulsf3_pse+0xa0>
    1e56:	88 23       	and	r24, r24
    1e58:	4a f0       	brmi	.+18     	; 0x1e6c <__mulsf3_pse+0x7a>
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	ff 1f       	adc	r31, r31
    1e5e:	bb 1f       	adc	r27, r27
    1e60:	66 1f       	adc	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	88 1f       	adc	r24, r24
    1e66:	91 50       	subi	r25, 0x01	; 1
    1e68:	50 40       	sbci	r21, 0x00	; 0
    1e6a:	a9 f7       	brne	.-22     	; 0x1e56 <__mulsf3_pse+0x64>
    1e6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e6e:	51 05       	cpc	r21, r1
    1e70:	80 f0       	brcs	.+32     	; 0x1e92 <__mulsf3_pse+0xa0>
    1e72:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_inf>
    1e76:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__fp_szero>
    1e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e7c:	e4 f3       	brlt	.-8      	; 0x1e76 <__mulsf3_pse+0x84>
    1e7e:	98 3e       	cpi	r25, 0xE8	; 232
    1e80:	d4 f3       	brlt	.-12     	; 0x1e76 <__mulsf3_pse+0x84>
    1e82:	86 95       	lsr	r24
    1e84:	77 95       	ror	r23
    1e86:	67 95       	ror	r22
    1e88:	b7 95       	ror	r27
    1e8a:	f7 95       	ror	r31
    1e8c:	e7 95       	ror	r30
    1e8e:	9f 5f       	subi	r25, 0xFF	; 255
    1e90:	c1 f7       	brne	.-16     	; 0x1e82 <__mulsf3_pse+0x90>
    1e92:	fe 2b       	or	r31, r30
    1e94:	88 0f       	add	r24, r24
    1e96:	91 1d       	adc	r25, r1
    1e98:	96 95       	lsr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	97 f9       	bld	r25, 7
    1e9e:	08 95       	ret

00001ea0 <__mulsi3>:
    1ea0:	db 01       	movw	r26, r22
    1ea2:	8f 93       	push	r24
    1ea4:	9f 93       	push	r25
    1ea6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__muluhisi3>
    1eaa:	bf 91       	pop	r27
    1eac:	af 91       	pop	r26
    1eae:	a2 9f       	mul	r26, r18
    1eb0:	80 0d       	add	r24, r0
    1eb2:	91 1d       	adc	r25, r1
    1eb4:	a3 9f       	mul	r26, r19
    1eb6:	90 0d       	add	r25, r0
    1eb8:	b2 9f       	mul	r27, r18
    1eba:	90 0d       	add	r25, r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	08 95       	ret

00001ec0 <__udivmodsi4>:
    1ec0:	a1 e2       	ldi	r26, 0x21	; 33
    1ec2:	1a 2e       	mov	r1, r26
    1ec4:	aa 1b       	sub	r26, r26
    1ec6:	bb 1b       	sub	r27, r27
    1ec8:	fd 01       	movw	r30, r26
    1eca:	0d c0       	rjmp	.+26     	; 0x1ee6 <__udivmodsi4_ep>

00001ecc <__udivmodsi4_loop>:
    1ecc:	aa 1f       	adc	r26, r26
    1ece:	bb 1f       	adc	r27, r27
    1ed0:	ee 1f       	adc	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	a2 17       	cp	r26, r18
    1ed6:	b3 07       	cpc	r27, r19
    1ed8:	e4 07       	cpc	r30, r20
    1eda:	f5 07       	cpc	r31, r21
    1edc:	20 f0       	brcs	.+8      	; 0x1ee6 <__udivmodsi4_ep>
    1ede:	a2 1b       	sub	r26, r18
    1ee0:	b3 0b       	sbc	r27, r19
    1ee2:	e4 0b       	sbc	r30, r20
    1ee4:	f5 0b       	sbc	r31, r21

00001ee6 <__udivmodsi4_ep>:
    1ee6:	66 1f       	adc	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	88 1f       	adc	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	1a 94       	dec	r1
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <__udivmodsi4_loop>
    1ef2:	60 95       	com	r22
    1ef4:	70 95       	com	r23
    1ef6:	80 95       	com	r24
    1ef8:	90 95       	com	r25
    1efa:	9b 01       	movw	r18, r22
    1efc:	ac 01       	movw	r20, r24
    1efe:	bd 01       	movw	r22, r26
    1f00:	cf 01       	movw	r24, r30
    1f02:	08 95       	ret

00001f04 <__muluhisi3>:
    1f04:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__umulhisi3>
    1f08:	a5 9f       	mul	r26, r21
    1f0a:	90 0d       	add	r25, r0
    1f0c:	b4 9f       	mul	r27, r20
    1f0e:	90 0d       	add	r25, r0
    1f10:	a4 9f       	mul	r26, r20
    1f12:	80 0d       	add	r24, r0
    1f14:	91 1d       	adc	r25, r1
    1f16:	11 24       	eor	r1, r1
    1f18:	08 95       	ret

00001f1a <__umulhisi3>:
    1f1a:	a2 9f       	mul	r26, r18
    1f1c:	b0 01       	movw	r22, r0
    1f1e:	b3 9f       	mul	r27, r19
    1f20:	c0 01       	movw	r24, r0
    1f22:	a3 9f       	mul	r26, r19
    1f24:	70 0d       	add	r23, r0
    1f26:	81 1d       	adc	r24, r1
    1f28:	11 24       	eor	r1, r1
    1f2a:	91 1d       	adc	r25, r1
    1f2c:	b2 9f       	mul	r27, r18
    1f2e:	70 0d       	add	r23, r0
    1f30:	81 1d       	adc	r24, r1
    1f32:	11 24       	eor	r1, r1
    1f34:	91 1d       	adc	r25, r1
    1f36:	08 95       	ret

00001f38 <atof>:
    1f38:	66 27       	eor	r22, r22
    1f3a:	77 27       	eor	r23, r23
    1f3c:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <strtod>

00001f40 <strcmp>:
    1f40:	fb 01       	movw	r30, r22
    1f42:	dc 01       	movw	r26, r24
    1f44:	8d 91       	ld	r24, X+
    1f46:	01 90       	ld	r0, Z+
    1f48:	80 19       	sub	r24, r0
    1f4a:	01 10       	cpse	r0, r1
    1f4c:	d9 f3       	breq	.-10     	; 0x1f44 <strcmp+0x4>
    1f4e:	99 0b       	sbc	r25, r25
    1f50:	08 95       	ret

00001f52 <strcpy>:
    1f52:	fb 01       	movw	r30, r22
    1f54:	dc 01       	movw	r26, r24
    1f56:	01 90       	ld	r0, Z+
    1f58:	0d 92       	st	X+, r0
    1f5a:	00 20       	and	r0, r0
    1f5c:	e1 f7       	brne	.-8      	; 0x1f56 <strcpy+0x4>
    1f5e:	08 95       	ret

00001f60 <strtod>:
    1f60:	a0 e0       	ldi	r26, 0x00	; 0
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	e6 eb       	ldi	r30, 0xB6	; 182
    1f66:	ff e0       	ldi	r31, 0x0F	; 15
    1f68:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__prologue_saves__+0xc>
    1f6c:	ec 01       	movw	r28, r24
    1f6e:	6b 01       	movw	r12, r22
    1f70:	61 15       	cp	r22, r1
    1f72:	71 05       	cpc	r23, r1
    1f74:	19 f0       	breq	.+6      	; 0x1f7c <strtod+0x1c>
    1f76:	fb 01       	movw	r30, r22
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24
    1f7c:	7e 01       	movw	r14, r28
    1f7e:	ff ef       	ldi	r31, 0xFF	; 255
    1f80:	ef 1a       	sub	r14, r31
    1f82:	ff 0a       	sbc	r15, r31
    1f84:	08 81       	ld	r16, Y
    1f86:	80 2f       	mov	r24, r16
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <isspace>
    1f8e:	89 2b       	or	r24, r25
    1f90:	11 f0       	breq	.+4      	; 0x1f96 <strtod+0x36>
    1f92:	e7 01       	movw	r28, r14
    1f94:	f3 cf       	rjmp	.-26     	; 0x1f7c <strtod+0x1c>
    1f96:	0d 32       	cpi	r16, 0x2D	; 45
    1f98:	39 f4       	brne	.+14     	; 0x1fa8 <strtod+0x48>
    1f9a:	7e 01       	movw	r14, r28
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	e8 0e       	add	r14, r24
    1fa0:	f1 1c       	adc	r15, r1
    1fa2:	09 81       	ldd	r16, Y+1	; 0x01
    1fa4:	11 e0       	ldi	r17, 0x01	; 1
    1fa6:	08 c0       	rjmp	.+16     	; 0x1fb8 <strtod+0x58>
    1fa8:	0b 32       	cpi	r16, 0x2B	; 43
    1faa:	29 f4       	brne	.+10     	; 0x1fb6 <strtod+0x56>
    1fac:	7e 01       	movw	r14, r28
    1fae:	92 e0       	ldi	r25, 0x02	; 2
    1fb0:	e9 0e       	add	r14, r25
    1fb2:	f1 1c       	adc	r15, r1
    1fb4:	09 81       	ldd	r16, Y+1	; 0x01
    1fb6:	10 e0       	ldi	r17, 0x00	; 0
    1fb8:	e7 01       	movw	r28, r14
    1fba:	21 97       	sbiw	r28, 0x01	; 1
    1fbc:	43 e0       	ldi	r20, 0x03	; 3
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
    1fc0:	6c e5       	ldi	r22, 0x5C	; 92
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	0e 94 07 11 	call	0x220e	; 0x220e <strncasecmp_P>
    1fca:	89 2b       	or	r24, r25
    1fcc:	c1 f4       	brne	.+48     	; 0x1ffe <strtod+0x9e>
    1fce:	23 96       	adiw	r28, 0x03	; 3
    1fd0:	45 e0       	ldi	r20, 0x05	; 5
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	67 e5       	ldi	r22, 0x57	; 87
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	ce 01       	movw	r24, r28
    1fda:	0e 94 07 11 	call	0x220e	; 0x220e <strncasecmp_P>
    1fde:	89 2b       	or	r24, r25
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <strtod+0x84>
    1fe2:	25 96       	adiw	r28, 0x05	; 5
    1fe4:	c1 14       	cp	r12, r1
    1fe6:	d1 04       	cpc	r13, r1
    1fe8:	19 f0       	breq	.+6      	; 0x1ff0 <strtod+0x90>
    1fea:	f6 01       	movw	r30, r12
    1fec:	d1 83       	std	Z+1, r29	; 0x01
    1fee:	c0 83       	st	Z, r28
    1ff0:	11 11       	cpse	r17, r1
    1ff2:	f6 c0       	rjmp	.+492    	; 0x21e0 <strtod+0x280>
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	80 e8       	ldi	r24, 0x80	; 128
    1ffa:	9f e7       	ldi	r25, 0x7F	; 127
    1ffc:	fa c0       	rjmp	.+500    	; 0x21f2 <strtod+0x292>
    1ffe:	43 e0       	ldi	r20, 0x03	; 3
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	64 e5       	ldi	r22, 0x54	; 84
    2004:	70 e0       	ldi	r23, 0x00	; 0
    2006:	ce 01       	movw	r24, r28
    2008:	0e 94 07 11 	call	0x220e	; 0x220e <strncasecmp_P>
    200c:	89 2b       	or	r24, r25
    200e:	59 f4       	brne	.+22     	; 0x2026 <strtod+0xc6>
    2010:	c1 14       	cp	r12, r1
    2012:	d1 04       	cpc	r13, r1
    2014:	09 f4       	brne	.+2      	; 0x2018 <strtod+0xb8>
    2016:	e9 c0       	rjmp	.+466    	; 0x21ea <strtod+0x28a>
    2018:	f2 e0       	ldi	r31, 0x02	; 2
    201a:	ef 0e       	add	r14, r31
    201c:	f1 1c       	adc	r15, r1
    201e:	f6 01       	movw	r30, r12
    2020:	f1 82       	std	Z+1, r15	; 0x01
    2022:	e0 82       	st	Z, r14
    2024:	e2 c0       	rjmp	.+452    	; 0x21ea <strtod+0x28a>
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	a9 01       	movw	r20, r18
    202c:	c0 e0       	ldi	r28, 0x00	; 0
    202e:	d0 e0       	ldi	r29, 0x00	; 0
    2030:	f7 01       	movw	r30, r14
    2032:	80 ed       	ldi	r24, 0xD0	; 208
    2034:	a8 2e       	mov	r10, r24
    2036:	a0 0e       	add	r10, r16
    2038:	89 e0       	ldi	r24, 0x09	; 9
    203a:	8a 15       	cp	r24, r10
    203c:	30 f1       	brcs	.+76     	; 0x208a <strtod+0x12a>
    203e:	91 2f       	mov	r25, r17
    2040:	92 60       	ori	r25, 0x02	; 2
    2042:	b9 2e       	mov	r11, r25
    2044:	81 2f       	mov	r24, r17
    2046:	88 70       	andi	r24, 0x08	; 8
    2048:	12 ff       	sbrs	r17, 2
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <strtod+0xf4>
    204c:	81 11       	cpse	r24, r1
    204e:	24 c0       	rjmp	.+72     	; 0x2098 <strtod+0x138>
    2050:	21 96       	adiw	r28, 0x01	; 1
    2052:	22 c0       	rjmp	.+68     	; 0x2098 <strtod+0x138>
    2054:	81 11       	cpse	r24, r1
    2056:	21 97       	sbiw	r28, 0x01	; 1
    2058:	a5 e0       	ldi	r26, 0x05	; 5
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__muluhisi3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	aa 1f       	adc	r26, r26
    206a:	bb 1f       	adc	r27, r27
    206c:	9c 01       	movw	r18, r24
    206e:	ad 01       	movw	r20, r26
    2070:	2a 0d       	add	r18, r10
    2072:	31 1d       	adc	r19, r1
    2074:	41 1d       	adc	r20, r1
    2076:	51 1d       	adc	r21, r1
    2078:	28 39       	cpi	r18, 0x98	; 152
    207a:	89 e9       	ldi	r24, 0x99	; 153
    207c:	38 07       	cpc	r19, r24
    207e:	48 07       	cpc	r20, r24
    2080:	89 e1       	ldi	r24, 0x19	; 25
    2082:	58 07       	cpc	r21, r24
    2084:	48 f0       	brcs	.+18     	; 0x2098 <strtod+0x138>
    2086:	16 60       	ori	r17, 0x06	; 6
    2088:	06 c0       	rjmp	.+12     	; 0x2096 <strtod+0x136>
    208a:	9e ef       	ldi	r25, 0xFE	; 254
    208c:	a9 12       	cpse	r10, r25
    208e:	0a c0       	rjmp	.+20     	; 0x20a4 <strtod+0x144>
    2090:	13 fd       	sbrc	r17, 3
    2092:	40 c0       	rjmp	.+128    	; 0x2114 <strtod+0x1b4>
    2094:	18 60       	ori	r17, 0x08	; 8
    2096:	b1 2e       	mov	r11, r17
    2098:	8f ef       	ldi	r24, 0xFF	; 255
    209a:	e8 1a       	sub	r14, r24
    209c:	f8 0a       	sbc	r15, r24
    209e:	00 81       	ld	r16, Z
    20a0:	1b 2d       	mov	r17, r11
    20a2:	c6 cf       	rjmp	.-116    	; 0x2030 <strtod+0xd0>
    20a4:	80 2f       	mov	r24, r16
    20a6:	8f 7d       	andi	r24, 0xDF	; 223
    20a8:	85 34       	cpi	r24, 0x45	; 69
    20aa:	a1 f5       	brne	.+104    	; 0x2114 <strtod+0x1b4>
    20ac:	80 81       	ld	r24, Z
    20ae:	8d 32       	cpi	r24, 0x2D	; 45
    20b0:	11 f4       	brne	.+4      	; 0x20b6 <strtod+0x156>
    20b2:	10 61       	ori	r17, 0x10	; 16
    20b4:	06 c0       	rjmp	.+12     	; 0x20c2 <strtod+0x162>
    20b6:	8b 32       	cpi	r24, 0x2B	; 43
    20b8:	21 f0       	breq	.+8      	; 0x20c2 <strtod+0x162>
    20ba:	31 96       	adiw	r30, 0x01	; 1
    20bc:	61 e0       	ldi	r22, 0x01	; 1
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <strtod+0x16a>
    20c2:	81 81       	ldd	r24, Z+1	; 0x01
    20c4:	32 96       	adiw	r30, 0x02	; 2
    20c6:	62 e0       	ldi	r22, 0x02	; 2
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	80 53       	subi	r24, 0x30	; 48
    20cc:	8a 30       	cpi	r24, 0x0A	; 10
    20ce:	18 f0       	brcs	.+6      	; 0x20d6 <strtod+0x176>
    20d0:	e6 1b       	sub	r30, r22
    20d2:	f7 0b       	sbc	r31, r23
    20d4:	1f c0       	rjmp	.+62     	; 0x2114 <strtod+0x1b4>
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	70 e0       	ldi	r23, 0x00	; 0
    20da:	60 38       	cpi	r22, 0x80	; 128
    20dc:	9c e0       	ldi	r25, 0x0C	; 12
    20de:	79 07       	cpc	r23, r25
    20e0:	5c f4       	brge	.+22     	; 0x20f8 <strtod+0x198>
    20e2:	db 01       	movw	r26, r22
    20e4:	aa 0f       	add	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	aa 0f       	add	r26, r26
    20ea:	bb 1f       	adc	r27, r27
    20ec:	6a 0f       	add	r22, r26
    20ee:	7b 1f       	adc	r23, r27
    20f0:	66 0f       	add	r22, r22
    20f2:	77 1f       	adc	r23, r23
    20f4:	68 0f       	add	r22, r24
    20f6:	71 1d       	adc	r23, r1
    20f8:	31 96       	adiw	r30, 0x01	; 1
    20fa:	df 01       	movw	r26, r30
    20fc:	11 97       	sbiw	r26, 0x01	; 1
    20fe:	8c 91       	ld	r24, X
    2100:	80 53       	subi	r24, 0x30	; 48
    2102:	8a 30       	cpi	r24, 0x0A	; 10
    2104:	50 f3       	brcs	.-44     	; 0x20da <strtod+0x17a>
    2106:	14 ff       	sbrs	r17, 4
    2108:	03 c0       	rjmp	.+6      	; 0x2110 <strtod+0x1b0>
    210a:	71 95       	neg	r23
    210c:	61 95       	neg	r22
    210e:	71 09       	sbc	r23, r1
    2110:	c6 0f       	add	r28, r22
    2112:	d7 1f       	adc	r29, r23
    2114:	11 ff       	sbrs	r17, 1
    2116:	08 c0       	rjmp	.+16     	; 0x2128 <strtod+0x1c8>
    2118:	c1 14       	cp	r12, r1
    211a:	d1 04       	cpc	r13, r1
    211c:	29 f0       	breq	.+10     	; 0x2128 <strtod+0x1c8>
    211e:	cf 01       	movw	r24, r30
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f6 01       	movw	r30, r12
    2124:	91 83       	std	Z+1, r25	; 0x01
    2126:	80 83       	st	Z, r24
    2128:	ca 01       	movw	r24, r20
    212a:	b9 01       	movw	r22, r18
    212c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__floatunsisf>
    2130:	21 2f       	mov	r18, r17
    2132:	23 70       	andi	r18, 0x03	; 3
    2134:	23 30       	cpi	r18, 0x03	; 3
    2136:	19 f0       	breq	.+6      	; 0x213e <strtod+0x1de>
    2138:	4b 01       	movw	r8, r22
    213a:	5c 01       	movw	r10, r24
    213c:	06 c0       	rjmp	.+12     	; 0x214a <strtod+0x1ea>
    213e:	4b 01       	movw	r8, r22
    2140:	5c 01       	movw	r10, r24
    2142:	b7 fa       	bst	r11, 7
    2144:	b0 94       	com	r11
    2146:	b7 f8       	bld	r11, 7
    2148:	b0 94       	com	r11
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	a9 01       	movw	r20, r18
    2150:	c5 01       	movw	r24, r10
    2152:	b4 01       	movw	r22, r8
    2154:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__cmpsf2>
    2158:	88 23       	and	r24, r24
    215a:	09 f4       	brne	.+2      	; 0x215e <strtod+0x1fe>
    215c:	3e c0       	rjmp	.+124    	; 0x21da <strtod+0x27a>
    215e:	d7 ff       	sbrs	r29, 7
    2160:	06 c0       	rjmp	.+12     	; 0x216e <strtod+0x20e>
    2162:	d1 95       	neg	r29
    2164:	c1 95       	neg	r28
    2166:	d1 09       	sbc	r29, r1
    2168:	03 e7       	ldi	r16, 0x73	; 115
    216a:	10 e0       	ldi	r17, 0x00	; 0
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <strtod+0x212>
    216e:	0b e8       	ldi	r16, 0x8B	; 139
    2170:	10 e0       	ldi	r17, 0x00	; 0
    2172:	68 01       	movw	r12, r16
    2174:	f8 e1       	ldi	r31, 0x18	; 24
    2176:	cf 1a       	sub	r12, r31
    2178:	d1 08       	sbc	r13, r1
    217a:	90 e2       	ldi	r25, 0x20	; 32
    217c:	e9 2e       	mov	r14, r25
    217e:	f1 2c       	mov	r15, r1
    2180:	ce 15       	cp	r28, r14
    2182:	df 05       	cpc	r29, r15
    2184:	74 f0       	brlt	.+28     	; 0x21a2 <strtod+0x242>
    2186:	f8 01       	movw	r30, r16
    2188:	25 91       	lpm	r18, Z+
    218a:	35 91       	lpm	r19, Z+
    218c:	45 91       	lpm	r20, Z+
    218e:	54 91       	lpm	r21, Z
    2190:	c5 01       	movw	r24, r10
    2192:	b4 01       	movw	r22, r8
    2194:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__mulsf3>
    2198:	4b 01       	movw	r8, r22
    219a:	5c 01       	movw	r10, r24
    219c:	ce 19       	sub	r28, r14
    219e:	df 09       	sbc	r29, r15
    21a0:	ef cf       	rjmp	.-34     	; 0x2180 <strtod+0x220>
    21a2:	04 50       	subi	r16, 0x04	; 4
    21a4:	11 09       	sbc	r17, r1
    21a6:	f5 94       	asr	r15
    21a8:	e7 94       	ror	r14
    21aa:	0c 15       	cp	r16, r12
    21ac:	1d 05       	cpc	r17, r13
    21ae:	41 f7       	brne	.-48     	; 0x2180 <strtod+0x220>
    21b0:	8a 2d       	mov	r24, r10
    21b2:	88 0f       	add	r24, r24
    21b4:	8b 2d       	mov	r24, r11
    21b6:	88 1f       	adc	r24, r24
    21b8:	8f 3f       	cpi	r24, 0xFF	; 255
    21ba:	49 f0       	breq	.+18     	; 0x21ce <strtod+0x26e>
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	a9 01       	movw	r20, r18
    21c2:	c5 01       	movw	r24, r10
    21c4:	b4 01       	movw	r22, r8
    21c6:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <__cmpsf2>
    21ca:	81 11       	cpse	r24, r1
    21cc:	06 c0       	rjmp	.+12     	; 0x21da <strtod+0x27a>
    21ce:	82 e2       	ldi	r24, 0x22	; 34
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <errno+0x1>
    21d6:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <errno>
    21da:	c5 01       	movw	r24, r10
    21dc:	b4 01       	movw	r22, r8
    21de:	09 c0       	rjmp	.+18     	; 0x21f2 <strtod+0x292>
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	80 e8       	ldi	r24, 0x80	; 128
    21e6:	9f ef       	ldi	r25, 0xFF	; 255
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <strtod+0x292>
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	80 ec       	ldi	r24, 0xC0	; 192
    21f0:	9f e7       	ldi	r25, 0x7F	; 127
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	ec e0       	ldi	r30, 0x0C	; 12
    21f8:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__epilogue_restores__+0xc>

000021fc <isspace>:
    21fc:	91 11       	cpse	r25, r1
    21fe:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__ctype_isfalse>
    2202:	80 32       	cpi	r24, 0x20	; 32
    2204:	19 f0       	breq	.+6      	; 0x220c <isspace+0x10>
    2206:	89 50       	subi	r24, 0x09	; 9
    2208:	85 50       	subi	r24, 0x05	; 5
    220a:	c8 f7       	brcc	.-14     	; 0x21fe <isspace+0x2>
    220c:	08 95       	ret

0000220e <strncasecmp_P>:
    220e:	fb 01       	movw	r30, r22
    2210:	dc 01       	movw	r26, r24
    2212:	41 50       	subi	r20, 0x01	; 1
    2214:	50 40       	sbci	r21, 0x00	; 0
    2216:	88 f0       	brcs	.+34     	; 0x223a <strncasecmp_P+0x2c>
    2218:	8d 91       	ld	r24, X+
    221a:	81 34       	cpi	r24, 0x41	; 65
    221c:	1c f0       	brlt	.+6      	; 0x2224 <strncasecmp_P+0x16>
    221e:	8b 35       	cpi	r24, 0x5B	; 91
    2220:	0c f4       	brge	.+2      	; 0x2224 <strncasecmp_P+0x16>
    2222:	80 5e       	subi	r24, 0xE0	; 224
    2224:	65 91       	lpm	r22, Z+
    2226:	61 34       	cpi	r22, 0x41	; 65
    2228:	1c f0       	brlt	.+6      	; 0x2230 <strncasecmp_P+0x22>
    222a:	6b 35       	cpi	r22, 0x5B	; 91
    222c:	0c f4       	brge	.+2      	; 0x2230 <strncasecmp_P+0x22>
    222e:	60 5e       	subi	r22, 0xE0	; 224
    2230:	86 1b       	sub	r24, r22
    2232:	61 11       	cpse	r22, r1
    2234:	71 f3       	breq	.-36     	; 0x2212 <strncasecmp_P+0x4>
    2236:	99 0b       	sbc	r25, r25
    2238:	08 95       	ret
    223a:	88 1b       	sub	r24, r24
    223c:	fc cf       	rjmp	.-8      	; 0x2236 <strncasecmp_P+0x28>

0000223e <__ctype_isfalse>:
    223e:	99 27       	eor	r25, r25
    2240:	88 27       	eor	r24, r24

00002242 <__ctype_istrue>:
    2242:	08 95       	ret

00002244 <__prologue_saves__>:
    2244:	2f 92       	push	r2
    2246:	3f 92       	push	r3
    2248:	4f 92       	push	r4
    224a:	5f 92       	push	r5
    224c:	6f 92       	push	r6
    224e:	7f 92       	push	r7
    2250:	8f 92       	push	r8
    2252:	9f 92       	push	r9
    2254:	af 92       	push	r10
    2256:	bf 92       	push	r11
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	0f 93       	push	r16
    2262:	1f 93       	push	r17
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	ca 1b       	sub	r28, r26
    226e:	db 0b       	sbc	r29, r27
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	09 94       	ijmp

0000227c <__epilogue_restores__>:
    227c:	2a 88       	ldd	r2, Y+18	; 0x12
    227e:	39 88       	ldd	r3, Y+17	; 0x11
    2280:	48 88       	ldd	r4, Y+16	; 0x10
    2282:	5f 84       	ldd	r5, Y+15	; 0x0f
    2284:	6e 84       	ldd	r6, Y+14	; 0x0e
    2286:	7d 84       	ldd	r7, Y+13	; 0x0d
    2288:	8c 84       	ldd	r8, Y+12	; 0x0c
    228a:	9b 84       	ldd	r9, Y+11	; 0x0b
    228c:	aa 84       	ldd	r10, Y+10	; 0x0a
    228e:	b9 84       	ldd	r11, Y+9	; 0x09
    2290:	c8 84       	ldd	r12, Y+8	; 0x08
    2292:	df 80       	ldd	r13, Y+7	; 0x07
    2294:	ee 80       	ldd	r14, Y+6	; 0x06
    2296:	fd 80       	ldd	r15, Y+5	; 0x05
    2298:	0c 81       	ldd	r16, Y+4	; 0x04
    229a:	1b 81       	ldd	r17, Y+3	; 0x03
    229c:	aa 81       	ldd	r26, Y+2	; 0x02
    229e:	b9 81       	ldd	r27, Y+1	; 0x01
    22a0:	ce 0f       	add	r28, r30
    22a2:	d1 1d       	adc	r29, r1
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	ed 01       	movw	r28, r26
    22b0:	08 95       	ret

000022b2 <_exit>:
    22b2:	f8 94       	cli

000022b4 <__stop_program>:
    22b4:	ff cf       	rjmp	.-2      	; 0x22b4 <__stop_program>
