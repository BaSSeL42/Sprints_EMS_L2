
ATM_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000244  00800060  00002294  00002328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008002a4  008002a4  0000256c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005c39  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a51  00000000  00000000  000086b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002de3  00000000  00000000  0000a106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b74  00000000  00000000  0000ceec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018d5  00000000  00000000  0000da60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f91  00000000  00000000  0000f335  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  000122c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__vector_1>
       8:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__vector_2>
       c:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <__vector_3>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_5>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__vector_11>
      30:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	12 e0       	ldi	r17, 0x02	; 2
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e4 e9       	ldi	r30, 0x94	; 148
      a4:	f2 e2       	ldi	r31, 0x22	; 34
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 3a       	cpi	r26, 0xA4	; 164
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a4 ea       	ldi	r26, 0xA4	; 164
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3e       	cpi	r26, 0xE1	; 225
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 37 09 	call	0x126e	; 0x126e <main>
      c6:	0c 94 48 11 	jmp	0x2290	; 0x2290 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <TriggerCallBack>:
/************************************************************************/
/* Notification function for slave (card) trigger                                                                     */
/************************************************************************/
void TriggerCallBack(void)
{
	TriggerState = TRIGGER;
      ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      d2:	08 95       	ret

000000d4 <timer_ovfCount>:
* RETURN			: void
*/

void timer_ovfCount(void)
{
	global_u8OVFCounter++;
      d4:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <global_u8OVFCounter>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <global_u8OVFCounter>
      de:	08 95       	ret

000000e0 <APP_Init>:
}

void APP_Init(void)
{
	(void)KEYPAD_init();
      e0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <KEYPAD_init>
	(void)HTimer_enInit();
      e4:	0e 94 c2 05 	call	0xb84	; 0xb84 <HTimer_enInit>
	(void)HTimer_enCBF(timer_ovfCount);
      e8:	8a e6       	ldi	r24, 0x6A	; 106
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 d4 05 	call	0xba8	; 0xba8 <HTimer_enCBF>
	(void)HLCD_vidInit();
      f0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <HLCD_vidInit>
	(void)HSPI_MasterInit();
      f4:	0e 94 b3 04 	call	0x966	; 0x966 <HSPI_MasterInit>
	(void)H_EXTINT_create(EXTINT0,RISING_EDGE,TriggerCallBack);
      f8:	47 e6       	ldi	r20, 0x67	; 103
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	62 e0       	ldi	r22, 0x02	; 2
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <H_EXTINT_create>
	(void)BUZ_Init(&st_g_Buzzer);
     104:	8c e6       	ldi	r24, 0x6C	; 108
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 9b 04 	call	0x936	; 0x936 <BUZ_Init>
	(void)HButton_ExtIntInit(DIO_PINB_2);
     10c:	8a e0       	ldi	r24, 0x0A	; 10
     10e:	0e 94 94 04 	call	0x928	; 0x928 <HButton_ExtIntInit>
	(void)H_EXTINT_create(EXTINT2, RISING_EDGE,EXTINT_FUNC);
     112:	45 e9       	ldi	r20, 0x95	; 149
     114:	51 e0       	ldi	r21, 0x01	; 1
     116:	62 e0       	ldi	r22, 0x02	; 2
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <H_EXTINT_create>
     11e:	08 95       	ret

00000120 <APP_Start>:


void APP_Start(void)
{
	
	switch(TriggerState)
     120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	c9 f1       	breq	.+114    	; 0x19a <APP_Start+0x7a>
     128:	18 f0       	brcs	.+6      	; 0x130 <APP_Start+0x10>
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	e1 f1       	breq	.+120    	; 0x1a6 <APP_Start+0x86>
     12e:	08 95       	ret
	{
		case TRIGGER:
		{
			//welcomeFlag = 0;
			/* Get pin and check it has 4 characters */
			if(Get_pin(arr_g_ATMpin)==PIN_NOT_OK)break;
     130:	87 ea       	ldi	r24, 0xA7	; 167
     132:	92 e0       	ldi	r25, 0x02	; 2
     134:	0e 94 37 02 	call	0x46e	; 0x46e <Get_pin>
     138:	84 30       	cpi	r24, 0x04	; 4
     13a:	09 f4       	brne	.+2      	; 0x13e <APP_Start+0x1e>
     13c:	f5 c0       	rjmp	.+490    	; 0x328 <APP_Start+0x208>
			
			/* Get card-holder's pan & pin for validation */
			if(ATM_GetCardData(arr_g_CARDpan, arr_g_CARDpin) != DATA_OK) break;
     13e:	65 ec       	ldi	r22, 0xC5	; 197
     140:	72 e0       	ldi	r23, 0x02	; 2
     142:	8a ec       	ldi	r24, 0xCA	; 202
     144:	92 e0       	ldi	r25, 0x02	; 2
     146:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ATM_GetCardData>
     14a:	81 11       	cpse	r24, r1
     14c:	ed c0       	rjmp	.+474    	; 0x328 <APP_Start+0x208>
			
			/* Check if entered pin matches card-holder's pin */
			if(PIN_checkPinMatching(arr_g_ATMpin, arr_g_CARDpin) == PIN_MATCHED)
     14e:	65 ec       	ldi	r22, 0xC5	; 197
     150:	72 e0       	ldi	r23, 0x02	; 2
     152:	87 ea       	ldi	r24, 0xA7	; 167
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	0e 94 a1 02 	call	0x542	; 0x542 <PIN_checkPinMatching>
     15a:	81 11       	cpse	r24, r1
     15c:	04 c0       	rjmp	.+8      	; 0x166 <APP_Start+0x46>
			{
				TriggerState = CHECKING;
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     164:	08 95       	ret
			}
			else
			{
				trialsFlag++;
     166:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <__data_end>
				/* Lock system if max tries exceeded */
				if(trialsFlag == 3)
     170:	83 30       	cpi	r24, 0x03	; 3
     172:	09 f0       	breq	.+2      	; 0x176 <APP_Start+0x56>
     174:	d9 c0       	rjmp	.+434    	; 0x328 <APP_Start+0x208>
				{
					HLCD_ClrDisplay();
     176:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
					HLCD_gotoXY(0,4);
     17a:	64 e0       	ldi	r22, 0x04	; 4
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("LOCKED");
     182:	82 e9       	ldi	r24, 0x92	; 146
     184:	91 e0       	ldi	r25, 0x01	; 1
     186:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					deinitAtm(&st_g_Buzzer);
     18a:	8c e6       	ldi	r24, 0x6C	; 108
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0e 94 cc 02 	call	0x598	; 0x598 <deinitAtm>
					TriggerState = IDLE;
     192:	83 e0       	ldi	r24, 0x03	; 3
     194:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     198:	08 95       	ret
			break;
		}
		/* Before Trigger */
		case N_TRIGGER:
		{
			Welcome();
     19a:	0e 94 c9 01 	call	0x392	; 0x392 <Welcome>
			//welcomeFlag = 1;
			TriggerState = IDLE;
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
     1a4:	08 95       	ret
		{/* Do Nothing */
			break;
		}
		case CHECKING:
		{
			get_amount_left(Entered_amount);
     1a6:	89 e6       	ldi	r24, 0x69	; 105
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 0b 03 	call	0x616	; 0x616 <get_amount_left>
			if(!strcmp((char*)Entered_amount, (char*)Default_Entered_amount))break;
     1ae:	61 e6       	ldi	r22, 0x61	; 97
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	89 e6       	ldi	r24, 0x69	; 105
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strcmp>
     1ba:	89 2b       	or	r24, r25
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <APP_Start+0xa0>
     1be:	b4 c0       	rjmp	.+360    	; 0x328 <APP_Start+0x208>
			HLCD_ClrDisplay();
     1c0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
			DB_CHECK = DATABASE_checking(arr_g_CARDpan,Entered_amount,&newAMOUNT);
     1c4:	40 ec       	ldi	r20, 0xC0	; 192
     1c6:	52 e0       	ldi	r21, 0x02	; 2
     1c8:	69 e6       	ldi	r22, 0x69	; 105
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	8a ec       	ldi	r24, 0xCA	; 202
     1ce:	92 e0       	ldi	r25, 0x02	; 2
     1d0:	0e 94 6f 04 	call	0x8de	; 0x8de <DATABASE_checking>
     1d4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <DB_CHECK>
			switch(DB_CHECK){
     1d8:	82 30       	cpi	r24, 0x02	; 2
     1da:	09 f4       	brne	.+2      	; 0x1de <APP_Start+0xbe>
     1dc:	43 c0       	rjmp	.+134    	; 0x264 <APP_Start+0x144>
     1de:	28 f4       	brcc	.+10     	; 0x1ea <APP_Start+0xca>
     1e0:	88 23       	and	r24, r24
     1e2:	51 f0       	breq	.+20     	; 0x1f8 <APP_Start+0xd8>
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	f9 f0       	breq	.+62     	; 0x226 <APP_Start+0x106>
     1e8:	08 95       	ret
     1ea:	83 30       	cpi	r24, 0x03	; 3
     1ec:	09 f4       	brne	.+2      	; 0x1f0 <APP_Start+0xd0>
     1ee:	59 c0       	rjmp	.+178    	; 0x2a2 <APP_Start+0x182>
     1f0:	84 30       	cpi	r24, 0x04	; 4
     1f2:	09 f4       	brne	.+2      	; 0x1f6 <APP_Start+0xd6>
     1f4:	79 c0       	rjmp	.+242    	; 0x2e8 <APP_Start+0x1c8>
     1f6:	08 95       	ret
				case APPROVED:
				{
					ATM_ApprovedCard(newAMOUNT);
     1f8:	60 91 c0 02 	lds	r22, 0x02C0	; 0x8002c0 <newAMOUNT>
     1fc:	70 91 c1 02 	lds	r23, 0x02C1	; 0x8002c1 <newAMOUNT+0x1>
     200:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <newAMOUNT+0x2>
     204:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <newAMOUNT+0x3>
     208:	0e 94 e5 01 	call	0x3ca	; 0x3ca <ATM_ApprovedCard>
					HSPI_SendChar(ATM_REQUEST_EJECTED);
     20c:	85 e4       	ldi	r24, 0x45	; 69
     20e:	0e 94 ce 04 	call	0x99c	; 0x99c <HSPI_SendChar>
					strcpy((char*)Entered_amount, (char*)Default_Entered_amount);
     212:	61 e6       	ldi	r22, 0x61	; 97
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	89 e6       	ldi	r24, 0x69	; 105
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <strcpy>
					TriggerState = N_TRIGGER;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
     224:	08 95       	ret
				}
				case FRAUD_CARD:
				{
					deinitAtm(&st_g_Buzzer);
     226:	8c e6       	ldi	r24, 0x6C	; 108
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 cc 02 	call	0x598	; 0x598 <deinitAtm>
					HLCD_gotoXY(0, 4);
     22e:	64 e0       	ldi	r22, 0x04	; 4
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("This is a");
     236:	89 e9       	ldi	r24, 0x99	; 153
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					HLCD_gotoXY(1, 2);
     23e:	62 e0       	ldi	r22, 0x02	; 2
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("Fraud Card");
     246:	83 ea       	ldi	r24, 0xA3	; 163
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					HTIM0_SyncDelay(1, Seconds);
     24e:	42 e0       	ldi	r20, 0x02	; 2
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
					TriggerState = IDLE;
     25c:	83 e0       	ldi	r24, 0x03	; 3
     25e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
     262:	08 95       	ret
				}
				case CARD_STOLEN:
				{
					deinitAtm(&st_g_Buzzer);
     264:	8c e6       	ldi	r24, 0x6C	; 108
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 cc 02 	call	0x598	; 0x598 <deinitAtm>
					HLCD_gotoXY(0, 4);
     26c:	64 e0       	ldi	r22, 0x04	; 4
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("This Card ");
     274:	8e ea       	ldi	r24, 0xAE	; 174
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					HLCD_gotoXY(1, 2);
     27c:	62 e0       	ldi	r22, 0x02	; 2
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("is Stolen");
     284:	89 eb       	ldi	r24, 0xB9	; 185
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					HTIM0_SyncDelay(1, Seconds);
     28c:	42 e0       	ldi	r20, 0x02	; 2
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
					TriggerState = IDLE;
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
     2a0:	08 95       	ret
				}
				case EXCEED_MAX_DAILY_AMOUNT:
				{
					
					HLCD_gotoXY(0, 4);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("Max Limit ");
     2aa:	83 ec       	ldi	r24, 0xC3	; 195
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					HLCD_gotoXY(1, 2);
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("is Exceeded");
     2ba:	8e ec       	ldi	r24, 0xCE	; 206
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					HTIM0_SyncDelay(1, Seconds);
     2c2:	42 e0       	ldi	r20, 0x02	; 2
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
					HLCD_ClrDisplay();
     2d0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
					strcpy((char*)Entered_amount, (char*)Default_Entered_amount);
     2d4:	61 e6       	ldi	r22, 0x61	; 97
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	89 e6       	ldi	r24, 0x69	; 105
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <strcpy>
					TriggerState = CHECKING;
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
     2e6:	08 95       	ret
				}
				case INSUFFICIENT_FUND:
				{
					
					HLCD_gotoXY(0, 4);
     2e8:	64 e0       	ldi	r22, 0x04	; 4
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("INSUFFICIENT ");
     2f0:	8a ed       	ldi	r24, 0xDA	; 218
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					HLCD_gotoXY(1, 5);
     2f8:	65 e0       	ldi	r22, 0x05	; 5
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_WriteString("FUND");
     300:	88 ee       	ldi	r24, 0xE8	; 232
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
					HTIM0_SyncDelay(1, Seconds);
     308:	42 e0       	ldi	r20, 0x02	; 2
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
					strcpy((char*)Entered_amount, (char*)Default_Entered_amount);
     316:	61 e6       	ldi	r22, 0x61	; 97
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	89 e6       	ldi	r24, 0x69	; 105
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <strcpy>
					TriggerState = CHECKING;
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     328:	08 95       	ret

0000032a <EXTINT_FUNC>:
* RETURN			: void
*/
void EXTINT_FUNC(void)
{
	static Uchar8_t counter = 0;
	if (counter == 0)
     32a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <counter.2063>
     32e:	81 11       	cpse	r24, r1
     330:	10 c0       	rjmp	.+32     	; 0x352 <EXTINT_FUNC+0x28>
	{
		(void)HTimer_vidDelayMs(100);
     332:	64 e6       	ldi	r22, 0x64	; 100
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 cc 05 	call	0xb98	; 0xb98 <HTimer_vidDelayMs>
		// (void)HButton_ExtIntInit(DIO_PINB_2);
		(void)H_EXTINT_create(EXTINT2, FALLING_EDGE,EXTINT_FUNC);
     33e:	45 e9       	ldi	r20, 0x95	; 149
     340:	51 e0       	ldi	r21, 0x01	; 1
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <H_EXTINT_create>
		counter = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <counter.2063>
     350:	08 95       	ret

	}
	else if(counter == 1)
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	e9 f4       	brne	.+58     	; 0x390 <EXTINT_FUNC+0x66>
	{
		(void)HTimer_enStop();
     356:	0e 94 d1 05 	call	0xba2	; 0xba2 <HTimer_enStop>
		if (global_u8OVFCounter < 20 && global_u8OVFCounter > 0)
     35a:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <global_u8OVFCounter>
     35e:	9f ef       	ldi	r25, 0xFF	; 255
     360:	98 0f       	add	r25, r24
     362:	93 31       	cpi	r25, 0x13	; 19
     364:	18 f4       	brcc	.+6      	; 0x36c <EXTINT_FUNC+0x42>
		{
			myState = ZERO;
     366:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <myState>
     36a:	05 c0       	rjmp	.+10     	; 0x376 <EXTINT_FUNC+0x4c>
			
		}
		else if(global_u8OVFCounter >= 20)
     36c:	84 31       	cpi	r24, 0x14	; 20
     36e:	18 f0       	brcs	.+6      	; 0x376 <EXTINT_FUNC+0x4c>
		{
			myState = ENTER;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
		}
		global_u8OVFCounter = 0;
     376:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <global_u8OVFCounter>

		(void)H_EXTINT_create(EXTINT2, RISING_EDGE,EXTINT_FUNC);
     37a:	45 e9       	ldi	r20, 0x95	; 149
     37c:	51 e0       	ldi	r21, 0x01	; 1
     37e:	62 e0       	ldi	r22, 0x02	; 2
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <H_EXTINT_create>
		(void)HButton_ExtIntInit(DIO_PINB_2);
     386:	8a e0       	ldi	r24, 0x0A	; 10
     388:	0e 94 94 04 	call	0x928	; 0x928 <HButton_ExtIntInit>

		counter = 0;
     38c:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <counter.2063>
     390:	08 95       	ret

00000392 <Welcome>:
* \brief Displays welcome routine
* \return void
*/
void Welcome(void)
{
	HLCD_ClrDisplay();
     392:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
	HLCD_gotoXY(0,0);
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString((char*)"Welcome To Atm");
     39e:	8d ee       	ldi	r24, 0xED	; 237
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	HTIM0_SyncDelay(1,Seconds);
     3a6:	42 e0       	ldi	r20, 0x02	; 2
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
	HLCD_ClrDisplay();
     3b4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
	HLCD_gotoXY(0,0);
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString((char*)"Insert Your Card");
     3c0:	8c ef       	ldi	r24, 0xFC	; 252
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
     3c8:	08 95       	ret

000003ca <ATM_ApprovedCard>:
* \brief Carries out the routine for approved card
* \param f32_a_NewBalance: the balance to display after transaction
* \return void
*/
void ATM_ApprovedCard(float32_t f32_a_NewBalance)
{
     3ca:	cf 92       	push	r12
     3cc:	df 92       	push	r13
     3ce:	ef 92       	push	r14
     3d0:	ff 92       	push	r15
     3d2:	6b 01       	movw	r12, r22
     3d4:	7c 01       	movw	r14, r24
	/* Display "Approved Transaction" for one second */
	HLCD_gotoXY(0, 4);
     3d6:	64 e0       	ldi	r22, 0x04	; 4
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString("Approved");
     3de:	8d e0       	ldi	r24, 0x0D	; 13
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	HLCD_gotoXY(1, 2);
     3e6:	62 e0       	ldi	r22, 0x02	; 2
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString("Transaction");
     3ee:	86 e1       	ldi	r24, 0x16	; 22
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	HTIM0_SyncDelay(1, Seconds);
     3f6:	42 e0       	ldi	r20, 0x02	; 2
     3f8:	61 e0       	ldi	r22, 0x01	; 1
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
	HLCD_ClrDisplay();
     404:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
	
	/* Display the remaining balance for one second */
	HLCD_gotoXY(0, 4);
     408:	64 e0       	ldi	r22, 0x04	; 4
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString("Remaining");
     410:	82 e2       	ldi	r24, 0x22	; 34
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	HLCD_gotoXY(1, 0);
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString("Balance  ");
     420:	8c e2       	ldi	r24, 0x2C	; 44
     422:	92 e0       	ldi	r25, 0x02	; 2
     424:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	HLCD_DisplayFloat(f32_a_NewBalance);
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	0e 94 9f 08 	call	0x113e	; 0x113e <HLCD_DisplayFloat>
	HTIM0_SyncDelay(1, Seconds);
     430:	42 e0       	ldi	r20, 0x02	; 2
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
	HLCD_ClrDisplay();
     43e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
	
	/* Display "Ejecting Card" for one second */
	HLCD_gotoXY(0, 1);
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString("Ejecting Card");
     44a:	86 e3       	ldi	r24, 0x36	; 54
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	HTIM0_SyncDelay(1, Seconds);
     452:	42 e0       	ldi	r20, 0x02	; 2
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
	HLCD_ClrDisplay();
     460:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
}
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	08 95       	ret

0000046e <Get_pin>:
* DESCRIPTION		: get pin from user (on the atm )
* ARGS		        : pointer to array (the size of array must be 5 or more) to store entered pin by user
* RETURN			: PIN_OK if user enters 4 numbers , PIN_NOT_OK otherwise
*/
EN_PinState Get_pin(Uchar8_t *enteredpin)
{
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	8c 01       	movw	r16, r24
	
	/* Clear Display and display enter your pin */
	HLCD_ClrDisplay();
     478:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
	HLCD_gotoXY(LCD_LINE_ZERO,LCD_COL_ZERO);
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString("Enter Your pin");
     484:	84 e4       	ldi	r24, 0x44	; 68
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	/* change cursor position to next line for user input */
	HLCD_gotoXY(LCD_LINE_ONE,LCD_COL_ZERO);
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	
	/* clear global (ENTER-ZERO) variable --> myState*/
	myState =NOTHING;
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
	Uchar8_t BTN = KEY_NOTHING , loc_counter=ZERO;
     49a:	c0 e0       	ldi	r28, 0x00	; 0
	
	/* loop terminates if the counter exceed pin length or enter button pressed */
	while (loc_counter < PIN_LENGTH-1 && myState != ENTER)
     49c:	2e c0       	rjmp	.+92     	; 0x4fa <Get_pin+0x8c>
	{
		/* Get Button from keypad*/
		BTN = KEYPAD_GetButton();
     49e:	0e 94 3e 07 	call	0xe7c	; 0xe7c <KEYPAD_GetButton>
		
		/* case nothing pressed on keypad*/
		if(BTN == KEY_NOTHING)
     4a2:	81 11       	cpse	r24, r1
     4a4:	17 c0       	rjmp	.+46     	; 0x4d4 <Get_pin+0x66>
		{
			
			/* check if zero pressed*/
			if(myState == ZERO)
     4a6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     4aa:	81 11       	cpse	r24, r1
     4ac:	26 c0       	rjmp	.+76     	; 0x4fa <Get_pin+0x8c>
			{
				
				/* clear global (ENTER-ZERO) variable --> myState*/
				myState = NOTHING;
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
				
				/* store zero in the array at counter position */
				enteredpin[loc_counter] = ZERO_CHAR;
     4b4:	f8 01       	movw	r30, r16
     4b6:	ec 0f       	add	r30, r28
     4b8:	f1 1d       	adc	r31, r1
     4ba:	80 e3       	ldi	r24, 0x30	; 48
     4bc:	80 83       	st	Z, r24
				
				/* Update cursor position and increament counter*/
				HLCD_gotoXY(LCD_LINE_ONE,loc_counter++);
     4be:	d1 e0       	ldi	r29, 0x01	; 1
     4c0:	dc 0f       	add	r29, r28
     4c2:	6c 2f       	mov	r22, r28
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
				HLCD_vidWriteChar('*');
     4ca:	8a e2       	ldi	r24, 0x2A	; 42
     4cc:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
				
				/* store zero in the array at counter position */
				enteredpin[loc_counter] = ZERO_CHAR;
				
				/* Update cursor position and increament counter*/
				HLCD_gotoXY(LCD_LINE_ONE,loc_counter++);
     4d0:	cd 2f       	mov	r28, r29
				HLCD_vidWriteChar('*');
				
			}
			
			/* repeat while */
			continue;
     4d2:	13 c0       	rjmp	.+38     	; 0x4fa <Get_pin+0x8c>
			
		/* case Button pressed on keypad*/
		else
		{
			/* store Button in the array at counter position */
			enteredpin[loc_counter] = keys_arr[BTN-1];
     4d4:	d8 01       	movw	r26, r16
     4d6:	ac 0f       	add	r26, r28
     4d8:	b1 1d       	adc	r27, r1
     4da:	e8 2f       	mov	r30, r24
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	e4 59       	subi	r30, 0x94	; 148
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	80 81       	ld	r24, Z
     4e4:	8c 93       	st	X, r24
			
			/* Update cursor position and increment counter*/
			HLCD_gotoXY(LCD_LINE_ONE,loc_counter++);
     4e6:	d1 e0       	ldi	r29, 0x01	; 1
     4e8:	dc 0f       	add	r29, r28
     4ea:	6c 2f       	mov	r22, r28
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
			HLCD_vidWriteChar('*');
     4f2:	8a e2       	ldi	r24, 0x2A	; 42
     4f4:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
		{
			/* store Button in the array at counter position */
			enteredpin[loc_counter] = keys_arr[BTN-1];
			
			/* Update cursor position and increment counter*/
			HLCD_gotoXY(LCD_LINE_ONE,loc_counter++);
     4f8:	cd 2f       	mov	r28, r29
	/* clear global (ENTER-ZERO) variable --> myState*/
	myState =NOTHING;
	Uchar8_t BTN = KEY_NOTHING , loc_counter=ZERO;
	
	/* loop terminates if the counter exceed pin length or enter button pressed */
	while (loc_counter < PIN_LENGTH-1 && myState != ENTER)
     4fa:	c4 30       	cpi	r28, 0x04	; 4
     4fc:	20 f4       	brcc	.+8      	; 0x506 <Get_pin+0x98>
     4fe:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	61 f6       	brne	.-104    	; 0x49e <Get_pin+0x30>
		}
	}
	
	
	/* check if user types less than pin length and press enter*/
	if(loc_counter<PIN_LENGTH-1)
     506:	c4 30       	cpi	r28, 0x04	; 4
     508:	b0 f4       	brcc	.+44     	; 0x536 <Get_pin+0xc8>
	{
		/* clear global (ENTER-ZERO) variable --> myState*/
		myState = NOTHING;
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
		
		/* Clear Display and display short pin */
		HLCD_ClrDisplay();
     510:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
		HLCD_gotoXY(LCD_LINE_ZERO,LCD_COL_ZERO);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
		HLCD_WriteString("Short Pin");
     51c:	83 e5       	ldi	r24, 0x53	; 83
     51e:	92 e0       	ldi	r25, 0x02	; 2
     520:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
		HTIM0_SyncDelay(LCD_LINE_ONE,Seconds);
     524:	42 e0       	ldi	r20, 0x02	; 2
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
		
		return PIN_NOT_OK;
     532:	84 e0       	ldi	r24, 0x04	; 4
     534:	01 c0       	rjmp	.+2      	; 0x538 <Get_pin+0xca>
	}
	
	return PIN_OK;
     536:	83 e0       	ldi	r24, 0x03	; 3
	
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <PIN_checkPinMatching>:
* \return EN_PinState This Is Enum Contain pin State
*/
EN_PinState PIN_checkPinMatching(Uchar8_t *pinFromAtm,Uchar8_t *pinFromServer)
{
	EN_PinState ret = PIN_NOT_MATCHED;
	if(pinFromAtm == NULL || pinFromServer == NULL) // Check If The Pointers Is Equal Null Or Not Equal
     542:	00 97       	sbiw	r24, 0x00	; 0
     544:	29 f1       	breq	.+74     	; 0x590 <PIN_checkPinMatching+0x4e>
     546:	61 15       	cp	r22, r1
     548:	71 05       	cpc	r23, r1
     54a:	21 f1       	breq	.+72     	; 0x594 <PIN_checkPinMatching+0x52>
	{
		ret = NULL_POINTER;//Return NULL_POINTER From PinState Enum
	}
	else
	{
		if(!strcmp((char*)pinFromAtm, (char*)pinFromServer)) // Compare This Two Array Equal Or Not
     54c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strcmp>
     550:	89 2b       	or	r24, r25
     552:	79 f4       	brne	.+30     	; 0x572 <PIN_checkPinMatching+0x30>
		{
			ret = PIN_MATCHED;//Return PIN_MATCHED From PinState Enum
			HLCD_ClrDisplay();// Clear Screen
     554:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
			HLCD_WriteString("PIN_MATCHED");//Print PIN_MATCHED On Lcd
     558:	8d e5       	ldi	r24, 0x5D	; 93
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
			HTIM0_SyncDelay(1, Seconds);
     560:	42 e0       	ldi	r20, 0x02	; 2
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
	}
	else
	{
		if(!strcmp((char*)pinFromAtm, (char*)pinFromServer)) // Compare This Two Array Equal Or Not
		{
			ret = PIN_MATCHED;//Return PIN_MATCHED From PinState Enum
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 95       	ret
			HTIM0_SyncDelay(1, Seconds);
		}
		else
		{
			ret = PIN_NOT_MATCHED;//Return PIN_NOT_MATCHED From PinState Enum
			HLCD_ClrDisplay();// Clear Screen
     572:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
			HLCD_WriteString("PIN_NOT_MATCHED");//Print PIN_NOT_MATCHED On Lcd
     576:	89 e6       	ldi	r24, 0x69	; 105
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
			HTIM0_SyncDelay(1, Seconds);
     57e:	42 e0       	ldi	r20, 0x02	; 2
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
			HLCD_WriteString("PIN_MATCHED");//Print PIN_MATCHED On Lcd
			HTIM0_SyncDelay(1, Seconds);
		}
		else
		{
			ret = PIN_NOT_MATCHED;//Return PIN_NOT_MATCHED From PinState Enum
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	08 95       	ret
EN_PinState PIN_checkPinMatching(Uchar8_t *pinFromAtm,Uchar8_t *pinFromServer)
{
	EN_PinState ret = PIN_NOT_MATCHED;
	if(pinFromAtm == NULL || pinFromServer == NULL) // Check If The Pointers Is Equal Null Or Not Equal
	{
		ret = NULL_POINTER;//Return NULL_POINTER From PinState Enum
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	08 95       	ret
     594:	82 e0       	ldi	r24, 0x02	; 2
			HLCD_WriteString("PIN_NOT_MATCHED");//Print PIN_NOT_MATCHED On Lcd
			HTIM0_SyncDelay(1, Seconds);
		}
	}
	return ret;
}
     596:	08 95       	ret

00000598 <deinitAtm>:
*/
en_BuzzerErrorState_t deinitAtm(st_Buzzer_t* pst_a_buzzer)
{
	en_BuzzerErrorState_t ret = BUZ_NOK;
	
	ret = BUZ_SetState(pst_a_buzzer,BUZ_ON);//Call This Function To Change Buzzer State To On
     598:	61 e0       	ldi	r22, 0x01	; 1
     59a:	0e 94 a9 04 	call	0x952	; 0x952 <BUZ_SetState>
	
	return ret;
}
     59e:	08 95       	ret

000005a0 <ATM_GetCardData>:
*/
en_CardDataErrorState_t ATM_GetCardData(Uchar8_t *pu8_a_pan, Uchar8_t *pu8_a_pin)
{
	en_CardDataErrorState_t en_l_DataErrorState = DATA_OK;
	
	if((pu8_a_pin != NULL) && (pu8_a_pan != NULL))
     5a0:	67 2b       	or	r22, r23
     5a2:	89 f1       	breq	.+98     	; 0x606 <ATM_GetCardData+0x66>
     5a4:	89 2b       	or	r24, r25
     5a6:	89 f1       	breq	.+98     	; 0x60a <ATM_GetCardData+0x6a>
	{
		/* Request PIN From Card */
		HSPI_SendChar(ATM_REQUEST_PIN);
     5a8:	80 e5       	ldi	r24, 0x50	; 80
     5aa:	0e 94 ce 04 	call	0x99c	; 0x99c <HSPI_SendChar>
		HTIM0_SyncDelay(5, mSeconds);
     5ae:	41 e0       	ldi	r20, 0x01	; 1
     5b0:	65 e0       	ldi	r22, 0x05	; 5
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
		HSPI_ReceiveData(arr_g_CARDpin, PIN_LENGTH);
     5bc:	65 e0       	ldi	r22, 0x05	; 5
     5be:	85 ec       	ldi	r24, 0xC5	; 197
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <HSPI_ReceiveData>
		HTIM0_SyncDelay(10, mSeconds);
     5c6:	41 e0       	ldi	r20, 0x01	; 1
     5c8:	6a e0       	ldi	r22, 0x0A	; 10
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
		
		/* Request PAN From Card */
		HSPI_SendChar(ATM_REQUEST_PAN);
     5d4:	87 e4       	ldi	r24, 0x47	; 71
     5d6:	0e 94 ce 04 	call	0x99c	; 0x99c <HSPI_SendChar>
		HTIM0_SyncDelay(5, mSeconds);
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	65 e0       	ldi	r22, 0x05	; 5
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 1c 05 	call	0xa38	; 0xa38 <HTIM0_SyncDelay>
		HSPI_ReceiveData(arr_g_CARDpan, MAX_PAN_LENGTH);
     5e8:	64 e1       	ldi	r22, 0x14	; 20
     5ea:	8a ec       	ldi	r24, 0xCA	; 202
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <HSPI_ReceiveData>
		
		if(arr_g_CARDpan[ZERO] == DATA_END || arr_g_CARDpin[ZERO] == DATA_END)
     5f2:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <arr_g_CARDpan>
     5f6:	83 32       	cpi	r24, 0x23	; 35
     5f8:	51 f0       	breq	.+20     	; 0x60e <ATM_GetCardData+0x6e>
     5fa:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <arr_g_CARDpin>
     5fe:	83 32       	cpi	r24, 0x23	; 35
     600:	41 f0       	breq	.+16     	; 0x612 <ATM_GetCardData+0x72>
* \param pu8_a_pin: reference to buffer to receive pin from card
* \return en_CardDataErrorState_t
*/
en_CardDataErrorState_t ATM_GetCardData(Uchar8_t *pu8_a_pan, Uchar8_t *pu8_a_pin)
{
	en_CardDataErrorState_t en_l_DataErrorState = DATA_OK;
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	08 95       	ret
			en_l_DataErrorState = DATA_NOT_RECEIVED;
		}
	}
	else
	{
		en_l_DataErrorState = NULL_DATA_PTR;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	08 95       	ret
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	08 95       	ret
		HTIM0_SyncDelay(5, mSeconds);
		HSPI_ReceiveData(arr_g_CARDpan, MAX_PAN_LENGTH);
		
		if(arr_g_CARDpan[ZERO] == DATA_END || arr_g_CARDpin[ZERO] == DATA_END)
		{
			en_l_DataErrorState = DATA_NOT_RECEIVED;
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	08 95       	ret
     612:	82 e0       	ldi	r24, 0x02	; 2
	{
		en_l_DataErrorState = NULL_DATA_PTR;
	}
	
	return en_l_DataErrorState;	
}
     614:	08 95       	ret

00000616 <get_amount_left>:
* DESCRIPTION		: get amount from user ( on the atm )
* ARGS		        : pointer to array (the size of array must be 8 or more and equal "0000.00" initial value) to store entered pin by user
* RETURN			: void
*/
void get_amount_left (Uchar8_t * amount)
{
     616:	df 92       	push	r13
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	7c 01       	movw	r14, r24
	/* Clear Display and display ENTER amount at first line */
	HLCD_ClrDisplay();
     626:	0e 94 60 08 	call	0x10c0	; 0x10c0 <HLCD_ClrDisplay>
	HLCD_gotoXY(LCD_LINE_ZERO,LCD_COL_ZERO);
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString("ENTER amount");
     632:	89 e7       	ldi	r24, 0x79	; 121
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	
	/* display amount at second line initially "0000.00" */
	HLCD_gotoXY(LCD_LINE_ONE,LCD_COL_ZERO);
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
	HLCD_WriteString((char*)amount);
     642:	c7 01       	movw	r24, r14
     644:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
	
	/* clear global (ENTER-ZERO) variable --> myState*/
	myState =NOTHING;
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
	/* display amount at second line initially "0000.00" */
	Uchar8_t BTN = KEY_NOTHING,loc_counter=ZERO,i=ZERO;
     64e:	d1 2c       	mov	r13, r1
	while(loc_counter<AMOUNT_LENGTH && myState !=ENTER)
     650:	71 c0       	rjmp	.+226    	; 0x734 <get_amount_left+0x11e>
	{
		
		/* Get Button from keypad*/
		BTN = KEYPAD_GetButton();
     652:	0e 94 3e 07 	call	0xe7c	; 0xe7c <KEYPAD_GetButton>
     656:	d8 2f       	mov	r29, r24
		
		/* Case Nothing pressed on keypad*/
		if(BTN == KEY_NOTHING)
     658:	81 11       	cpse	r24, r1
     65a:	59 c0       	rjmp	.+178    	; 0x70e <get_amount_left+0xf8>
		{
			/* check if zero pressed*/
			if(myState == ZERO)
     65c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     660:	81 11       	cpse	r24, r1
     662:	68 c0       	rjmp	.+208    	; 0x734 <get_amount_left+0x11e>
			{
				
				/* clear global (ENTER-ZERO) variable --> myState*/
				myState =NOTHING;
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
				
				/* loop to shift numbers left*/
				for(i=ZERO;i<AMOUNT_LENGTH;i++)
     66a:	c0 e0       	ldi	r28, 0x00	; 0
     66c:	20 c0       	rjmp	.+64     	; 0x6ae <get_amount_left+0x98>
				{
					
					/* check if index is before decimal*/
					if(i==3)
     66e:	c3 30       	cpi	r28, 0x03	; 3
     670:	79 f4       	brne	.+30     	; 0x690 <get_amount_left+0x7a>
					{
						/* shift the number before decimal left to after decimal at index 3*/
						amount[i]=amount[i+2];
     672:	87 01       	movw	r16, r14
     674:	0c 0f       	add	r16, r28
     676:	11 1d       	adc	r17, r1
     678:	f8 01       	movw	r30, r16
     67a:	82 81       	ldd	r24, Z+2	; 0x02
     67c:	80 83       	st	Z, r24
						HLCD_gotoXY(1,i);
     67e:	6c 2f       	mov	r22, r28
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
						HLCD_vidWriteChar(amount[i]);
     686:	f8 01       	movw	r30, r16
     688:	80 81       	ld	r24, Z
     68a:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
						/* skip decimal iteration and move after it*/
						i=5;
     68e:	c5 e0       	ldi	r28, 0x05	; 5
					};
					/* shift the number left*/
					amount[i]=amount[i+1];
     690:	87 01       	movw	r16, r14
     692:	0c 0f       	add	r16, r28
     694:	11 1d       	adc	r17, r1
     696:	f8 01       	movw	r30, r16
     698:	81 81       	ldd	r24, Z+1	; 0x01
     69a:	80 83       	st	Z, r24
					HLCD_gotoXY(1,i);
     69c:	6c 2f       	mov	r22, r28
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_vidWriteChar(amount[i]);
     6a4:	f8 01       	movw	r30, r16
     6a6:	80 81       	ld	r24, Z
     6a8:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
				
				/* clear global (ENTER-ZERO) variable --> myState*/
				myState =NOTHING;
				
				/* loop to shift numbers left*/
				for(i=ZERO;i<AMOUNT_LENGTH;i++)
     6ac:	cf 5f       	subi	r28, 0xFF	; 255
     6ae:	c6 30       	cpi	r28, 0x06	; 6
     6b0:	f0 f2       	brcs	.-68     	; 0x66e <get_amount_left+0x58>
					HLCD_gotoXY(1,i);
					HLCD_vidWriteChar(amount[i]);
				}
				
				/* store zero in the array at least position */
				amount[6] = '0';
     6b2:	80 e3       	ldi	r24, 0x30	; 48
     6b4:	f7 01       	movw	r30, r14
     6b6:	86 83       	std	Z+6, r24	; 0x06
				HLCD_gotoXY(1,AMOUNT_LENGTH);
     6b8:	66 e0       	ldi	r22, 0x06	; 6
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
				HLCD_vidWriteChar(amount[6]);
     6c0:	f7 01       	movw	r30, r14
     6c2:	86 81       	ldd	r24, Z+6	; 0x06
     6c4:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
				loc_counter++;
     6c8:	d3 94       	inc	r13
			}
			
			/* repeat while*/
			continue;
     6ca:	34 c0       	rjmp	.+104    	; 0x734 <get_amount_left+0x11e>
			/* loop to shift numbers left*/
			for(i=ZERO;i<AMOUNT_LENGTH;i++)
			{
				
				/* check if index is before decimal*/
				if(i==3)
     6cc:	c3 30       	cpi	r28, 0x03	; 3
     6ce:	79 f4       	brne	.+30     	; 0x6ee <get_amount_left+0xd8>
				{
					/* shift the number before decimal left to after decimal at index 3*/
					amount[i]=amount[i+2];
     6d0:	87 01       	movw	r16, r14
     6d2:	0c 0f       	add	r16, r28
     6d4:	11 1d       	adc	r17, r1
     6d6:	f8 01       	movw	r30, r16
     6d8:	82 81       	ldd	r24, Z+2	; 0x02
     6da:	80 83       	st	Z, r24
					HLCD_gotoXY(1,i);
     6dc:	6c 2f       	mov	r22, r28
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
					HLCD_vidWriteChar(amount[i]);
     6e4:	f8 01       	movw	r30, r16
     6e6:	80 81       	ld	r24, Z
     6e8:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
					/* skip decimal iteration and move after it*/
					i=5;
     6ec:	c5 e0       	ldi	r28, 0x05	; 5
				};
				/* shift the number left*/
				amount[i]=amount[i+1];
     6ee:	87 01       	movw	r16, r14
     6f0:	0c 0f       	add	r16, r28
     6f2:	11 1d       	adc	r17, r1
     6f4:	f8 01       	movw	r30, r16
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	80 83       	st	Z, r24
				HLCD_gotoXY(1,i);
     6fa:	6c 2f       	mov	r22, r28
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
				HLCD_vidWriteChar(amount[i]);
     702:	f8 01       	movw	r30, r16
     704:	80 81       	ld	r24, Z
     706:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
		/* case Button pressed on keypad*/
		else
		{
			
			/* loop to shift numbers left*/
			for(i=ZERO;i<AMOUNT_LENGTH;i++)
     70a:	cf 5f       	subi	r28, 0xFF	; 255
     70c:	01 c0       	rjmp	.+2      	; 0x710 <get_amount_left+0xfa>
     70e:	c0 e0       	ldi	r28, 0x00	; 0
     710:	c6 30       	cpi	r28, 0x06	; 6
     712:	e0 f2       	brcs	.-72     	; 0x6cc <get_amount_left+0xb6>
				HLCD_gotoXY(1,i);
				HLCD_vidWriteChar(amount[i]);
			}
			
			/* store Button in the array at least position */
			amount[6] = keys_arr[BTN-1];
     714:	ed 2f       	mov	r30, r29
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	e4 59       	subi	r30, 0x94	; 148
     71a:	fe 4f       	sbci	r31, 0xFE	; 254
     71c:	80 81       	ld	r24, Z
     71e:	f7 01       	movw	r30, r14
     720:	86 83       	std	Z+6, r24	; 0x06
			HLCD_gotoXY(1,6);
     722:	66 e0       	ldi	r22, 0x06	; 6
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 73 08 	call	0x10e6	; 0x10e6 <HLCD_gotoXY>
			HLCD_vidWriteChar(amount[6]);
     72a:	f7 01       	movw	r30, r14
     72c:	86 81       	ldd	r24, Z+6	; 0x06
     72e:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
			loc_counter++;
     732:	d3 94       	inc	r13
	
	/* clear global (ENTER-ZERO) variable --> myState*/
	myState =NOTHING;
	/* display amount at second line initially "0000.00" */
	Uchar8_t BTN = KEY_NOTHING,loc_counter=ZERO,i=ZERO;
	while(loc_counter<AMOUNT_LENGTH && myState !=ENTER)
     734:	f5 e0       	ldi	r31, 0x05	; 5
     736:	fd 15       	cp	r31, r13
     738:	28 f0       	brcs	.+10     	; 0x744 <get_amount_left+0x12e>
     73a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	09 f0       	breq	.+2      	; 0x744 <get_amount_left+0x12e>
     742:	87 cf       	rjmp	.-242    	; 0x652 <get_amount_left+0x3c>
		}
		
		
	}
	
	while(myState != ENTER);
     744:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <myState>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	e1 f7       	brne	.-8      	; 0x744 <get_amount_left+0x12e>
	
	myState = NOTHING;
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <myState>
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	08 95       	ret

00000762 <isBelowMaxDailyAmount>:
     762:	66 e8       	ldi	r22, 0x86	; 134
     764:	72 e0       	ldi	r23, 0x02	; 2
     766:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strcmp>
     76a:	18 16       	cp	r1, r24
     76c:	14 f0       	brlt	.+4      	; 0x772 <isBelowMaxDailyAmount+0x10>
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	08 95       	ret
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	08 95       	ret

00000776 <isValidPanAccount>:
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	8c 01       	movw	r16, r24
     77e:	c0 e0       	ldi	r28, 0x00	; 0
     780:	0c c0       	rjmp	.+24     	; 0x79a <isValidPanAccount+0x24>
     782:	89 e1       	ldi	r24, 0x19	; 25
     784:	c8 9f       	mul	r28, r24
     786:	b0 01       	movw	r22, r0
     788:	11 24       	eor	r1, r1
     78a:	69 58       	subi	r22, 0x89	; 137
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	c8 01       	movw	r24, r16
     790:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strcmp>
     794:	88 23       	and	r24, r24
     796:	29 f0       	breq	.+10     	; 0x7a2 <isValidPanAccount+0x2c>
     798:	cf 5f       	subi	r28, 0xFF	; 255
     79a:	ca 30       	cpi	r28, 0x0A	; 10
     79c:	90 f3       	brcs	.-28     	; 0x782 <isValidPanAccount+0xc>
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <isValidPanAccount+0x2e>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	08 95       	ret

000007ac <isRunningAccount>:
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	7c 01       	movw	r14, r24
     7b8:	c0 e0       	ldi	r28, 0x00	; 0
     7ba:	1d c0       	rjmp	.+58     	; 0x7f6 <isRunningAccount+0x4a>
     7bc:	0c 2f       	mov	r16, r28
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	89 e1       	ldi	r24, 0x19	; 25
     7c2:	80 9f       	mul	r24, r16
     7c4:	b0 01       	movw	r22, r0
     7c6:	81 9f       	mul	r24, r17
     7c8:	70 0d       	add	r23, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	69 58       	subi	r22, 0x89	; 137
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	c7 01       	movw	r24, r14
     7d2:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strcmp>
     7d6:	81 11       	cpse	r24, r1
     7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <isRunningAccount+0x48>
     7da:	89 e1       	ldi	r24, 0x19	; 25
     7dc:	80 9f       	mul	r24, r16
     7de:	f0 01       	movw	r30, r0
     7e0:	81 9f       	mul	r24, r17
     7e2:	f0 0d       	add	r31, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	ee 58       	subi	r30, 0x8E	; 142
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	84 81       	ldd	r24, Z+4	; 0x04
     7ec:	88 23       	and	r24, r24
     7ee:	39 f0       	breq	.+14     	; 0x7fe <isRunningAccount+0x52>
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	06 c0       	rjmp	.+12     	; 0x800 <__DATA_REGION_LENGTH__>
     7f4:	cf 5f       	subi	r28, 0xFF	; 255
     7f6:	ca 30       	cpi	r28, 0x0A	; 10
     7f8:	08 f3       	brcs	.-62     	; 0x7bc <isRunningAccount+0x10>
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	01 c0       	rjmp	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	08 95       	ret

0000080c <isValidAccountAmount>:
     80c:	4f 92       	push	r4
     80e:	5f 92       	push	r5
     810:	6f 92       	push	r6
     812:	7f 92       	push	r7
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	7c 01       	movw	r14, r24
     82c:	cb 01       	movw	r24, r22
     82e:	6a 01       	movw	r12, r20
     830:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <atof>
     834:	4b 01       	movw	r8, r22
     836:	5c 01       	movw	r10, r24
     838:	c0 e0       	ldi	r28, 0x00	; 0
     83a:	3d c0       	rjmp	.+122    	; 0x8b6 <__stack+0x57>
     83c:	0c 2f       	mov	r16, r28
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	89 e1       	ldi	r24, 0x19	; 25
     842:	80 9f       	mul	r24, r16
     844:	b0 01       	movw	r22, r0
     846:	81 9f       	mul	r24, r17
     848:	70 0d       	add	r23, r0
     84a:	11 24       	eor	r1, r1
     84c:	69 58       	subi	r22, 0x89	; 137
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
     850:	c7 01       	movw	r24, r14
     852:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <strcmp>
     856:	81 11       	cpse	r24, r1
     858:	2d c0       	rjmp	.+90     	; 0x8b4 <__stack+0x55>
     85a:	89 e1       	ldi	r24, 0x19	; 25
     85c:	80 9f       	mul	r24, r16
     85e:	f0 01       	movw	r30, r0
     860:	81 9f       	mul	r24, r17
     862:	f0 0d       	add	r31, r0
     864:	11 24       	eor	r1, r1
     866:	ee 58       	subi	r30, 0x8E	; 142
     868:	ff 4f       	sbci	r31, 0xFF	; 255
     86a:	40 80       	ld	r4, Z
     86c:	51 80       	ldd	r5, Z+1	; 0x01
     86e:	62 80       	ldd	r6, Z+2	; 0x02
     870:	73 80       	ldd	r7, Z+3	; 0x03
     872:	a3 01       	movw	r20, r6
     874:	92 01       	movw	r18, r4
     876:	c5 01       	movw	r24, r10
     878:	b4 01       	movw	r22, r8
     87a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__cmpsf2>
     87e:	18 16       	cp	r1, r24
     880:	cc f0       	brlt	.+50     	; 0x8b4 <__stack+0x55>
     882:	a5 01       	movw	r20, r10
     884:	94 01       	movw	r18, r8
     886:	c3 01       	movw	r24, r6
     888:	b2 01       	movw	r22, r4
     88a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__subsf3>
     88e:	29 e1       	ldi	r18, 0x19	; 25
     890:	20 9f       	mul	r18, r16
     892:	f0 01       	movw	r30, r0
     894:	21 9f       	mul	r18, r17
     896:	f0 0d       	add	r31, r0
     898:	11 24       	eor	r1, r1
     89a:	ee 58       	subi	r30, 0x8E	; 142
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	60 83       	st	Z, r22
     8a0:	71 83       	std	Z+1, r23	; 0x01
     8a2:	82 83       	std	Z+2, r24	; 0x02
     8a4:	93 83       	std	Z+3, r25	; 0x03
     8a6:	f6 01       	movw	r30, r12
     8a8:	60 83       	st	Z, r22
     8aa:	71 83       	std	Z+1, r23	; 0x01
     8ac:	82 83       	std	Z+2, r24	; 0x02
     8ae:	93 83       	std	Z+3, r25	; 0x03
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	05 c0       	rjmp	.+10     	; 0x8be <__stack+0x5f>
     8b4:	cf 5f       	subi	r28, 0xFF	; 255
     8b6:	ca 30       	cpi	r28, 0x0A	; 10
     8b8:	08 f4       	brcc	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	c0 cf       	rjmp	.-128    	; 0x83c <isValidAccountAmount+0x30>
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	df 90       	pop	r13
     8ca:	cf 90       	pop	r12
     8cc:	bf 90       	pop	r11
     8ce:	af 90       	pop	r10
     8d0:	9f 90       	pop	r9
     8d2:	8f 90       	pop	r8
     8d4:	7f 90       	pop	r7
     8d6:	6f 90       	pop	r6
     8d8:	5f 90       	pop	r5
     8da:	4f 90       	pop	r4
     8dc:	08 95       	ret

000008de <DATABASE_checking>:
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ec 01       	movw	r28, r24
     8ec:	8b 01       	movw	r16, r22
     8ee:	7a 01       	movw	r14, r20
     8f0:	0e 94 bb 03 	call	0x776	; 0x776 <isValidPanAccount>
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	89 f0       	breq	.+34     	; 0x91a <DATABASE_checking+0x3c>
     8f8:	ce 01       	movw	r24, r28
     8fa:	0e 94 d6 03 	call	0x7ac	; 0x7ac <isRunningAccount>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	61 f0       	breq	.+24     	; 0x91a <DATABASE_checking+0x3c>
     902:	c8 01       	movw	r24, r16
     904:	0e 94 b1 03 	call	0x762	; 0x762 <isBelowMaxDailyAmount>
     908:	83 30       	cpi	r24, 0x03	; 3
     90a:	39 f0       	breq	.+14     	; 0x91a <DATABASE_checking+0x3c>
     90c:	a7 01       	movw	r20, r14
     90e:	b8 01       	movw	r22, r16
     910:	ce 01       	movw	r24, r28
     912:	0e 94 06 04 	call	0x80c	; 0x80c <isValidAccountAmount>
     916:	84 30       	cpi	r24, 0x04	; 4
     918:	01 f0       	breq	.+0      	; 0x91a <DATABASE_checking+0x3c>
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	08 95       	ret

00000928 <HButton_ExtIntInit>:
     928:	80 32       	cpi	r24, 0x20	; 32
     92a:	18 f4       	brcc	.+6      	; 0x932 <HButton_ExtIntInit+0xa>
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	08 95       	ret

00000936 <BUZ_Init>:
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	ec 01       	movw	r28, r24
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	88 81       	ld	r24, Y
     940:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	88 81       	ld	r24, Y
     948:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <BUZ_SetState>:
     952:	00 97       	sbiw	r24, 0x00	; 0
     954:	31 f0       	breq	.+12     	; 0x962 <BUZ_SetState+0x10>
     956:	fc 01       	movw	r30, r24
     958:	80 81       	ld	r24, Z
     95a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 95       	ret
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	08 95       	ret

00000966 <HSPI_MasterInit>:
 * \return void
 */
void HSPI_MasterInit(void)
{
	/* Set MOSI pin as Output */
	DIO_s8SETPinDir(HSPI_MOSI, OUTPUT);
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	8d e0       	ldi	r24, 0x0D	; 13
     96a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>

	/* Set CLK pin as Output */
	DIO_s8SETPinDir(HSPI_CLK, OUTPUT);
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	8f e0       	ldi	r24, 0x0F	; 15
     972:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>

	/* Set Slave Select pin(s) as Output */
	DIO_s8SETPinDir(HSPI_SS, OUTPUT);
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	8c e0       	ldi	r24, 0x0C	; 12
     97a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	8c e0       	ldi	r24, 0x0C	; 12
     982:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
			
	/* Set MISO pin as Input */
	DIO_s8SETPinDir(HSPI_MISO, INPUT);
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	8e e0       	ldi	r24, 0x0E	; 14
     98a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
	
	/* Initialize EXTI pin for slave requests */
	EXTINT_init(MASTER_SLAVE_REQUEST_PIN, RISING_EDGE);
     98e:	62 e0       	ldi	r22, 0x02	; 2
     990:	8a e0       	ldi	r24, 0x0A	; 10
     992:	0e 94 e6 09 	call	0x13cc	; 0x13cc <EXTINT_init>
	
	/* Initialize SPI Registers */
	SPI_MasterInit();
     996:	0e 94 01 0b 	call	0x1602	; 0x1602 <SPI_MasterInit>
     99a:	08 95       	ret

0000099c <HSPI_SendChar>:
 * \param u8_a_character character to send
 * 
 * \return void
 */
void HSPI_SendChar(Uchar8_t u8_a_character)
{
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	1f 92       	push	r1
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	18 2f       	mov	r17, r24
	Uchar8_t u8_l_dummyVar;
	
	DIO_s8SETPinVal(HSPI_SS, LOW);
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	8c e0       	ldi	r24, 0x0C	; 12
     9ae:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
	SPI_TranscieveChar(u8_a_character, &u8_l_dummyVar);
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	81 2f       	mov	r24, r17
     9ba:	0e 94 19 0b 	call	0x1632	; 0x1632 <SPI_TranscieveChar>
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	8c e0       	ldi	r24, 0x0C	; 12
     9c2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
	
}
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	08 95       	ret

000009d0 <HSPI_ReceiveData>:
 * \param u8_a_DataSize: size of storage buffer
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	0f 93       	push	r16
     9da:	1f 93       	push	r17
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	1f 92       	push	r1
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	6c 01       	movw	r12, r24
     9e8:	06 2f       	mov	r16, r22
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;

	/* Select Slave */
	DIO_s8SETPinVal(HSPI_SS, LOW);	
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	8c e0       	ldi	r24, 0x0C	; 12
     9ee:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>

	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
     9f2:	be 01       	movw	r22, r28
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	83 e2       	ldi	r24, 0x23	; 35
     9fa:	0e 94 19 0b 	call	0x1632	; 0x1632 <SPI_TranscieveChar>
 * 
 * \return en_HSPI_ErrorState_t
 */
void HSPI_ReceiveData(Uchar8_t *pu8_a_data, Uchar8_t u8_a_DataSize)
{
	Uchar8_t u8_l_DataIterator = 0, u8_l_dummyVar;
     9fe:	10 e0       	ldi	r17, 0x00	; 0
	/* Initiate communication with dummy bit for synchronization */
	SPI_TranscieveChar(DATA_END, &u8_l_dummyVar);
	
	do
	{
		SPI_TranscieveChar(DATA_END, &pu8_a_data[u8_l_DataIterator]);
     a00:	76 01       	movw	r14, r12
     a02:	e1 0e       	add	r14, r17
     a04:	f1 1c       	adc	r15, r1
     a06:	b7 01       	movw	r22, r14
     a08:	83 e2       	ldi	r24, 0x23	; 35
     a0a:	0e 94 19 0b 	call	0x1632	; 0x1632 <SPI_TranscieveChar>
						
	}while((pu8_a_data[u8_l_DataIterator++]!=DATA_END) && (u8_l_DataIterator < u8_a_DataSize));
     a0e:	1f 5f       	subi	r17, 0xFF	; 255
     a10:	f7 01       	movw	r30, r14
     a12:	80 81       	ld	r24, Z
     a14:	83 32       	cpi	r24, 0x23	; 35
     a16:	11 f0       	breq	.+4      	; 0xa1c <HSPI_ReceiveData+0x4c>
     a18:	10 17       	cp	r17, r16
     a1a:	90 f3       	brcs	.-28     	; 0xa00 <HSPI_ReceiveData+0x30>
	
	/* Deselect Slave */
	DIO_s8SETPinVal(HSPI_SS, HIGH);
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	8c e0       	ldi	r24, 0x0C	; 12
     a20:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
}
     a24:	0f 90       	pop	r0
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	ef 90       	pop	r14
     a32:	df 90       	pop	r13
     a34:	cf 90       	pop	r12
     a36:	08 95       	ret

00000a38 <HTIM0_SyncDelay>:
     a38:	8f 92       	push	r8
     a3a:	9f 92       	push	r9
     a3c:	af 92       	push	r10
     a3e:	bf 92       	push	r11
     a40:	cf 92       	push	r12
     a42:	df 92       	push	r13
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	00 d0       	rcall	.+0      	; 0xa52 <HTIM0_SyncDelay+0x1a>
     a52:	cd b7       	in	r28, 0x3d	; 61
     a54:	de b7       	in	r29, 0x3e	; 62
     a56:	6b 01       	movw	r12, r22
     a58:	7c 01       	movw	r14, r24
     a5a:	42 30       	cpi	r20, 0x02	; 2
     a5c:	59 f4       	brne	.+22     	; 0xa74 <HTIM0_SyncDelay+0x3c>
     a5e:	9b 01       	movw	r18, r22
     a60:	ac 01       	movw	r20, r24
     a62:	60 e4       	ldi	r22, 0x40	; 64
     a64:	72 e4       	ldi	r23, 0x42	; 66
     a66:	8f e0       	ldi	r24, 0x0F	; 15
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <__mulsi3>
     a6e:	6b 01       	movw	r12, r22
     a70:	7c 01       	movw	r14, r24
     a72:	0d c0       	rjmp	.+26     	; 0xa8e <HTIM0_SyncDelay+0x56>
     a74:	41 30       	cpi	r20, 0x01	; 1
     a76:	49 f4       	brne	.+18     	; 0xa8a <HTIM0_SyncDelay+0x52>
     a78:	a8 ee       	ldi	r26, 0xE8	; 232
     a7a:	b3 e0       	ldi	r27, 0x03	; 3
     a7c:	9b 01       	movw	r18, r22
     a7e:	ac 01       	movw	r20, r24
     a80:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__muluhisi3>
     a84:	6b 01       	movw	r12, r22
     a86:	7c 01       	movw	r14, r24
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <HTIM0_SyncDelay+0x56>
     a8a:	41 11       	cpse	r20, r1
     a8c:	6b c0       	rjmp	.+214    	; 0xb64 <HTIM0_SyncDelay+0x12c>
     a8e:	88 e8       	ldi	r24, 0x88	; 136
     a90:	c8 16       	cp	r12, r24
     a92:	83 e1       	ldi	r24, 0x13	; 19
     a94:	d8 06       	cpc	r13, r24
     a96:	e1 04       	cpc	r14, r1
     a98:	f1 04       	cpc	r15, r1
     a9a:	c8 f0       	brcs	.+50     	; 0xace <HTIM0_SyncDelay+0x96>
     a9c:	88 ea       	ldi	r24, 0xA8	; 168
     a9e:	c8 16       	cp	r12, r24
     aa0:	81 e6       	ldi	r24, 0x61	; 97
     aa2:	d8 06       	cpc	r13, r24
     aa4:	e1 04       	cpc	r14, r1
     aa6:	f1 04       	cpc	r15, r1
     aa8:	a0 f0       	brcs	.+40     	; 0xad2 <HTIM0_SyncDelay+0x9a>
     aaa:	88 e4       	ldi	r24, 0x48	; 72
     aac:	c8 16       	cp	r12, r24
     aae:	88 ee       	ldi	r24, 0xE8	; 232
     ab0:	d8 06       	cpc	r13, r24
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	e8 06       	cpc	r14, r24
     ab6:	f1 04       	cpc	r15, r1
     ab8:	70 f0       	brcs	.+28     	; 0xad6 <HTIM0_SyncDelay+0x9e>
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	c8 16       	cp	r12, r24
     abe:	81 ea       	ldi	r24, 0xA1	; 161
     ac0:	d8 06       	cpc	r13, r24
     ac2:	87 e0       	ldi	r24, 0x07	; 7
     ac4:	e8 06       	cpc	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	40 f4       	brcc	.+16     	; 0xada <HTIM0_SyncDelay+0xa2>
     aca:	14 e0       	ldi	r17, 0x04	; 4
     acc:	07 c0       	rjmp	.+14     	; 0xadc <HTIM0_SyncDelay+0xa4>
     ace:	11 e0       	ldi	r17, 0x01	; 1
     ad0:	05 c0       	rjmp	.+10     	; 0xadc <HTIM0_SyncDelay+0xa4>
     ad2:	12 e0       	ldi	r17, 0x02	; 2
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <HTIM0_SyncDelay+0xa4>
     ad6:	13 e0       	ldi	r17, 0x03	; 3
     ad8:	01 c0       	rjmp	.+2      	; 0xadc <HTIM0_SyncDelay+0xa4>
     ada:	15 e0       	ldi	r17, 0x05	; 5
     adc:	e1 2f       	mov	r30, r17
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	e2 57       	subi	r30, 0x72	; 114
     ae8:	fd 4f       	sbci	r31, 0xFD	; 253
     aea:	60 81       	ld	r22, Z
     aec:	71 81       	ldd	r23, Z+1	; 0x01
     aee:	76 95       	lsr	r23
     af0:	67 95       	ror	r22
     af2:	76 95       	lsr	r23
     af4:	67 95       	ror	r22
     af6:	76 95       	lsr	r23
     af8:	67 95       	ror	r22
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__floatunsisf>
     b02:	4b 01       	movw	r8, r22
     b04:	5c 01       	movw	r10, r24
     b06:	c7 01       	movw	r24, r14
     b08:	b6 01       	movw	r22, r12
     b0a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__floatunsisf>
     b0e:	a5 01       	movw	r20, r10
     b10:	94 01       	movw	r18, r8
     b12:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__divsf3>
     b16:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
     b1a:	f6 2e       	mov	r15, r22
     b1c:	07 2f       	mov	r16, r23
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TIM0_voidInit>
     b24:	8f 2d       	mov	r24, r15
     b26:	81 95       	neg	r24
     b28:	0e 94 99 0b 	call	0x1732	; 0x1732 <TIM0_SetValue>
     b2c:	81 2f       	mov	r24, r17
     b2e:	0e 94 81 0b 	call	0x1702	; 0x1702 <TIM0_Start>
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	11 c0       	rjmp	.+34     	; 0xb58 <HTIM0_SyncDelay+0x120>
     b36:	ce 01       	movw	r24, r28
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <TIM0_GetOVF>
     b3e:	ce 01       	movw	r24, r28
     b40:	02 96       	adiw	r24, 0x02	; 2
     b42:	0e 94 a9 0b 	call	0x1752	; 0x1752 <TIM0_GetState>
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	81 11       	cpse	r24, r1
     b4a:	03 c0       	rjmp	.+6      	; 0xb52 <HTIM0_SyncDelay+0x11a>
     b4c:	8a 81       	ldd	r24, Y+2	; 0x02
     b4e:	81 11       	cpse	r24, r1
     b50:	f2 cf       	rjmp	.-28     	; 0xb36 <HTIM0_SyncDelay+0xfe>
     b52:	0e 94 a5 0b 	call	0x174a	; 0x174a <TIM0_ClearOVF>
     b56:	1f 5f       	subi	r17, 0xFF	; 255
     b58:	01 17       	cp	r16, r17
     b5a:	68 f7       	brcc	.-38     	; 0xb36 <HTIM0_SyncDelay+0xfe>
     b5c:	0e 94 8f 0b 	call	0x171e	; 0x171e <TIM0_Stop>
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <HTIM0_SyncDelay+0x12e>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	0f 91       	pop	r16
     b72:	ff 90       	pop	r15
     b74:	ef 90       	pop	r14
     b76:	df 90       	pop	r13
     b78:	cf 90       	pop	r12
     b7a:	bf 90       	pop	r11
     b7c:	af 90       	pop	r10
     b7e:	9f 90       	pop	r9
     b80:	8f 90       	pop	r8
     b82:	08 95       	ret

00000b84 <HTimer_enInit>:
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <enuTimer2_init>
     b8a:	84 e0       	ldi	r24, 0x04	; 4
     b8c:	0e 94 25 0c 	call	0x184a	; 0x184a <u8Timer2_setPrescallar>
     b90:	0e 94 39 0c 	call	0x1872	; 0x1872 <vidTimer2_OvfIrqEnable>
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	08 95       	ret

00000b98 <HTimer_vidDelayMs>:
     b98:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <u8Timer2_setTime_ms>
     b9c:	0e 94 41 0c 	call	0x1882	; 0x1882 <vidTimer2_start>
     ba0:	08 95       	ret

00000ba2 <HTimer_enStop>:
     ba2:	0e 94 4b 0c 	call	0x1896	; 0x1896 <vidTimer2_stop>
     ba6:	08 95       	ret

00000ba8 <HTimer_enCBF>:
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	21 f0       	breq	.+8      	; 0xbb4 <HTimer_enCBF+0xc>
     bac:	0e 94 cf 0c 	call	0x199e	; 0x199e <vidTimer2_setcbf_OVF>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 95       	ret
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	08 95       	ret

00000bb8 <H_EXTINT_create>:
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	c8 2f       	mov	r28, r24
     bc0:	8a 01       	movw	r16, r20
     bc2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <EXTINT_init>
     bc6:	81 11       	cpse	r24, r1
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <H_EXTINT_create+0x20>
     bca:	b8 01       	movw	r22, r16
     bcc:	8c 2f       	mov	r24, r28
     bce:	0e 94 6d 0a 	call	0x14da	; 0x14da <EXTINT_CallBack>
     bd2:	81 11       	cpse	r24, r1
     bd4:	03 c0       	rjmp	.+6      	; 0xbdc <H_EXTINT_create+0x24>
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <H_EXTINT_create+0x26>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	01 c0       	rjmp	.+2      	; 0xbde <H_EXTINT_create+0x26>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	08 95       	ret

00000be6 <KEYPAD_init>:
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	82 e1       	ldi	r24, 0x12	; 18
     bea:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     bee:	61 e0       	ldi	r22, 0x01	; 1
     bf0:	83 e1       	ldi	r24, 0x13	; 19
     bf2:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	84 e1       	ldi	r24, 0x14	; 20
     bfa:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	85 e1       	ldi	r24, 0x15	; 21
     c02:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	86 e1       	ldi	r24, 0x16	; 22
     c0a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	87 e1       	ldi	r24, 0x17	; 23
     c12:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     c16:	08 95       	ret

00000c18 <checkR1>:
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	1f 92       	push	r1
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	85 e1       	ldi	r24, 0x15	; 21
     c26:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	86 e1       	ldi	r24, 0x16	; 22
     c2e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	87 e1       	ldi	r24, 0x17	; 23
     c36:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	83 e1       	ldi	r24, 0x13	; 19
     c3e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	84 e1       	ldi	r24, 0x14	; 20
     c46:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	82 e1       	ldi	r24, 0x12	; 18
     c4e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	89 83       	std	Y+1, r24	; 0x01
     c56:	be 01       	movw	r22, r28
     c58:	6f 5f       	subi	r22, 0xFF	; 255
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	85 e1       	ldi	r24, 0x15	; 21
     c5e:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	88 23       	and	r24, r24
     c66:	39 f0       	breq	.+14     	; 0xc76 <checkR1+0x5e>
     c68:	0b c0       	rjmp	.+22     	; 0xc80 <checkR1+0x68>
     c6a:	be 01       	movw	r22, r28
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	85 e1       	ldi	r24, 0x15	; 21
     c72:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	88 23       	and	r24, r24
     c7a:	b9 f3       	breq	.-18     	; 0xc6a <checkR1+0x52>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	2e c0       	rjmp	.+92     	; 0xcdc <checkR1+0xc4>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	89 83       	std	Y+1, r24	; 0x01
     c84:	be 01       	movw	r22, r28
     c86:	6f 5f       	subi	r22, 0xFF	; 255
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	86 e1       	ldi	r24, 0x16	; 22
     c8c:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	88 23       	and	r24, r24
     c94:	39 f0       	breq	.+14     	; 0xca4 <checkR1+0x8c>
     c96:	0b c0       	rjmp	.+22     	; 0xcae <checkR1+0x96>
     c98:	be 01       	movw	r22, r28
     c9a:	6f 5f       	subi	r22, 0xFF	; 255
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	86 e1       	ldi	r24, 0x16	; 22
     ca0:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	88 23       	and	r24, r24
     ca8:	b9 f3       	breq	.-18     	; 0xc98 <checkR1+0x80>
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	17 c0       	rjmp	.+46     	; 0xcdc <checkR1+0xc4>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	89 83       	std	Y+1, r24	; 0x01
     cb2:	be 01       	movw	r22, r28
     cb4:	6f 5f       	subi	r22, 0xFF	; 255
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	87 e1       	ldi	r24, 0x17	; 23
     cba:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	41 f0       	breq	.+16     	; 0xcd4 <checkR1+0xbc>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0a c0       	rjmp	.+20     	; 0xcdc <checkR1+0xc4>
     cc8:	be 01       	movw	r22, r28
     cca:	6f 5f       	subi	r22, 0xFF	; 255
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	87 e1       	ldi	r24, 0x17	; 23
     cd0:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	88 23       	and	r24, r24
     cd8:	b9 f3       	breq	.-18     	; 0xcc8 <checkR1+0xb0>
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	0f 90       	pop	r0
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <checkR2>:
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	1f 92       	push	r1
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	85 e1       	ldi	r24, 0x15	; 21
     cf2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	86 e1       	ldi	r24, 0x16	; 22
     cfa:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	87 e1       	ldi	r24, 0x17	; 23
     d02:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	82 e1       	ldi	r24, 0x12	; 18
     d0a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	84 e1       	ldi	r24, 0x14	; 20
     d12:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	83 e1       	ldi	r24, 0x13	; 19
     d1a:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	be 01       	movw	r22, r28
     d24:	6f 5f       	subi	r22, 0xFF	; 255
     d26:	7f 4f       	sbci	r23, 0xFF	; 255
     d28:	85 e1       	ldi	r24, 0x15	; 21
     d2a:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	88 23       	and	r24, r24
     d32:	39 f0       	breq	.+14     	; 0xd42 <checkR2+0x5e>
     d34:	0b c0       	rjmp	.+22     	; 0xd4c <checkR2+0x68>
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	85 e1       	ldi	r24, 0x15	; 21
     d3e:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	88 23       	and	r24, r24
     d46:	b9 f3       	breq	.-18     	; 0xd36 <checkR2+0x52>
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	2e c0       	rjmp	.+92     	; 0xda8 <checkR2+0xc4>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	be 01       	movw	r22, r28
     d52:	6f 5f       	subi	r22, 0xFF	; 255
     d54:	7f 4f       	sbci	r23, 0xFF	; 255
     d56:	86 e1       	ldi	r24, 0x16	; 22
     d58:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 23       	and	r24, r24
     d60:	39 f0       	breq	.+14     	; 0xd70 <checkR2+0x8c>
     d62:	0b c0       	rjmp	.+22     	; 0xd7a <checkR2+0x96>
     d64:	be 01       	movw	r22, r28
     d66:	6f 5f       	subi	r22, 0xFF	; 255
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	86 e1       	ldi	r24, 0x16	; 22
     d6c:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	88 23       	and	r24, r24
     d74:	b9 f3       	breq	.-18     	; 0xd64 <checkR2+0x80>
     d76:	85 e0       	ldi	r24, 0x05	; 5
     d78:	17 c0       	rjmp	.+46     	; 0xda8 <checkR2+0xc4>
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	be 01       	movw	r22, r28
     d80:	6f 5f       	subi	r22, 0xFF	; 255
     d82:	7f 4f       	sbci	r23, 0xFF	; 255
     d84:	87 e1       	ldi	r24, 0x17	; 23
     d86:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	88 23       	and	r24, r24
     d8e:	41 f0       	breq	.+16     	; 0xda0 <checkR2+0xbc>
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <checkR2+0xc4>
     d94:	be 01       	movw	r22, r28
     d96:	6f 5f       	subi	r22, 0xFF	; 255
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	87 e1       	ldi	r24, 0x17	; 23
     d9c:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	88 23       	and	r24, r24
     da4:	b9 f3       	breq	.-18     	; 0xd94 <checkR2+0xb0>
     da6:	86 e0       	ldi	r24, 0x06	; 6
     da8:	0f 90       	pop	r0
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <checkR3>:
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	1f 92       	push	r1
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	85 e1       	ldi	r24, 0x15	; 21
     dbe:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	86 e1       	ldi	r24, 0x16	; 22
     dc6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	87 e1       	ldi	r24, 0x17	; 23
     dce:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	82 e1       	ldi	r24, 0x12	; 18
     dd6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	83 e1       	ldi	r24, 0x13	; 19
     dde:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	84 e1       	ldi	r24, 0x14	; 20
     de6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	85 e1       	ldi	r24, 0x15	; 21
     df6:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	88 23       	and	r24, r24
     dfe:	39 f0       	breq	.+14     	; 0xe0e <checkR3+0x5e>
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <checkR3+0x68>
     e02:	be 01       	movw	r22, r28
     e04:	6f 5f       	subi	r22, 0xFF	; 255
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
     e08:	85 e1       	ldi	r24, 0x15	; 21
     e0a:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	88 23       	and	r24, r24
     e12:	b9 f3       	breq	.-18     	; 0xe02 <checkR3+0x52>
     e14:	87 e0       	ldi	r24, 0x07	; 7
     e16:	2e c0       	rjmp	.+92     	; 0xe74 <checkR3+0xc4>
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	86 e1       	ldi	r24, 0x16	; 22
     e24:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	88 23       	and	r24, r24
     e2c:	39 f0       	breq	.+14     	; 0xe3c <checkR3+0x8c>
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <checkR3+0x96>
     e30:	be 01       	movw	r22, r28
     e32:	6f 5f       	subi	r22, 0xFF	; 255
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	86 e1       	ldi	r24, 0x16	; 22
     e38:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	88 23       	and	r24, r24
     e40:	b9 f3       	breq	.-18     	; 0xe30 <checkR3+0x80>
     e42:	88 e0       	ldi	r24, 0x08	; 8
     e44:	17 c0       	rjmp	.+46     	; 0xe74 <checkR3+0xc4>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	be 01       	movw	r22, r28
     e4c:	6f 5f       	subi	r22, 0xFF	; 255
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	87 e1       	ldi	r24, 0x17	; 23
     e52:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 23       	and	r24, r24
     e5a:	41 f0       	breq	.+16     	; 0xe6c <checkR3+0xbc>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0a c0       	rjmp	.+20     	; 0xe74 <checkR3+0xc4>
     e60:	be 01       	movw	r22, r28
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	87 e1       	ldi	r24, 0x17	; 23
     e68:	0e 94 bc 09 	call	0x1378	; 0x1378 <DIO_s8GETPinVal>
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	88 23       	and	r24, r24
     e70:	b9 f3       	breq	.-18     	; 0xe60 <checkR3+0xb0>
     e72:	89 e0       	ldi	r24, 0x09	; 9
     e74:	0f 90       	pop	r0
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <KEYPAD_GetButton>:
     e7c:	0e 94 0c 06 	call	0xc18	; 0xc18 <checkR1>
     e80:	81 11       	cpse	r24, r1
     e82:	06 c0       	rjmp	.+12     	; 0xe90 <KEYPAD_GetButton+0x14>
     e84:	0e 94 72 06 	call	0xce4	; 0xce4 <checkR2>
     e88:	81 11       	cpse	r24, r1
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <KEYPAD_GetButton+0x14>
     e8c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <checkR3>
     e90:	08 95       	ret

00000e92 <HLCD_vidWritecmd>:
     e92:	1f 93       	push	r17
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	d8 2f       	mov	r29, r24
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     eaa:	1d 2f       	mov	r17, r29
     eac:	12 95       	swap	r17
     eae:	1f 70       	andi	r17, 0x0F	; 15
     eb0:	c0 e0       	ldi	r28, 0x00	; 0
     eb2:	11 c0       	rjmp	.+34     	; 0xed6 <HLCD_vidWritecmd+0x44>
     eb4:	ec 2f       	mov	r30, r28
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	61 2f       	mov	r22, r17
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	0c 2e       	mov	r0, r28
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <HLCD_vidWritecmd+0x32>
     ec0:	75 95       	asr	r23
     ec2:	67 95       	ror	r22
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <HLCD_vidWritecmd+0x2e>
     ec8:	61 70       	andi	r22, 0x01	; 1
     eca:	ea 58       	subi	r30, 0x8A	; 138
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	80 81       	ld	r24, Z
     ed0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     ed4:	cf 5f       	subi	r28, 0xFF	; 255
     ed6:	c4 30       	cpi	r28, 0x04	; 4
     ed8:	68 f3       	brcs	.-38     	; 0xeb4 <HLCD_vidWritecmd+0x22>
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	83 e0       	ldi	r24, 0x03	; 3
     ede:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     ee2:	89 ef       	ldi	r24, 0xF9	; 249
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <HLCD_vidWritecmd+0x54>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <HLCD_vidWritecmd+0x5a>
     eec:	00 00       	nop
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     ef6:	92 e4       	ldi	r25, 0x42	; 66
     ef8:	9a 95       	dec	r25
     efa:	f1 f7       	brne	.-4      	; 0xef8 <HLCD_vidWritecmd+0x66>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <HLCD_vidWritecmd+0x6c>
     efe:	df 70       	andi	r29, 0x0F	; 15
     f00:	c0 e0       	ldi	r28, 0x00	; 0
     f02:	11 c0       	rjmp	.+34     	; 0xf26 <HLCD_vidWritecmd+0x94>
     f04:	ec 2f       	mov	r30, r28
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	6d 2f       	mov	r22, r29
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	0c 2e       	mov	r0, r28
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <HLCD_vidWritecmd+0x82>
     f10:	75 95       	asr	r23
     f12:	67 95       	ror	r22
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <HLCD_vidWritecmd+0x7e>
     f18:	61 70       	andi	r22, 0x01	; 1
     f1a:	ea 58       	subi	r30, 0x8A	; 138
     f1c:	fe 4f       	sbci	r31, 0xFE	; 254
     f1e:	80 81       	ld	r24, Z
     f20:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     f24:	cf 5f       	subi	r28, 0xFF	; 255
     f26:	c4 30       	cpi	r28, 0x04	; 4
     f28:	68 f3       	brcs	.-38     	; 0xf04 <HLCD_vidWritecmd+0x72>
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     f32:	89 ef       	ldi	r24, 0xF9	; 249
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <HLCD_vidWritecmd+0xa4>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <HLCD_vidWritecmd+0xaa>
     f3c:	00 00       	nop
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
     f46:	83 ef       	ldi	r24, 0xF3	; 243
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	f1 f7       	brne	.-4      	; 0xf4a <HLCD_vidWritecmd+0xb8>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <HLCD_vidWritecmd+0xbe>
     f50:	00 00       	nop
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	08 95       	ret

00000f5a <HLCD_vidInit>:
     f5a:	cf 93       	push	r28
     f5c:	c0 e0       	ldi	r28, 0x00	; 0
     f5e:	09 c0       	rjmp	.+18     	; 0xf72 <HLCD_vidInit+0x18>
     f60:	ec 2f       	mov	r30, r28
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	ea 58       	subi	r30, 0x8A	; 138
     f66:	fe 4f       	sbci	r31, 0xFE	; 254
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	80 81       	ld	r24, Z
     f6c:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     f70:	cf 5f       	subi	r28, 0xFF	; 255
     f72:	c4 30       	cpi	r28, 0x04	; 4
     f74:	a8 f3       	brcs	.-22     	; 0xf60 <HLCD_vidInit+0x6>
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_s8SETPinDir>
     f8e:	8f e0       	ldi	r24, 0x0F	; 15
     f90:	97 e2       	ldi	r25, 0x27	; 39
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <HLCD_vidInit+0x38>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <HLCD_vidInit+0x3e>
     f98:	00 00       	nop
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
     fa0:	89 ef       	ldi	r24, 0xF9	; 249
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <HLCD_vidInit+0x4a>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <HLCD_vidInit+0x50>
     faa:	00 00       	nop
     fac:	88 e2       	ldi	r24, 0x28	; 40
     fae:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
     fb2:	89 ef       	ldi	r24, 0xF9	; 249
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <HLCD_vidInit+0x5c>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <HLCD_vidInit+0x62>
     fbc:	00 00       	nop
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
     fc4:	87 ee       	ldi	r24, 0xE7	; 231
     fc6:	93 e0       	ldi	r25, 0x03	; 3
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <HLCD_vidInit+0x6e>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <HLCD_vidInit+0x74>
     fce:	00 00       	nop
     fd0:	86 e0       	ldi	r24, 0x06	; 6
     fd2:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
     fd6:	89 ef       	ldi	r24, 0xF9	; 249
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <HLCD_vidInit+0x80>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <HLCD_vidInit+0x86>
     fe0:	00 00       	nop
     fe2:	8e e0       	ldi	r24, 0x0E	; 14
     fe4:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
     fe8:	89 ef       	ldi	r24, 0xF9	; 249
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <HLCD_vidInit+0x92>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <HLCD_vidInit+0x98>
     ff2:	00 00       	nop
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <HLCD_vidWriteChar>:
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	d8 2f       	mov	r29, r24
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
    1010:	1d 2f       	mov	r17, r29
    1012:	12 95       	swap	r17
    1014:	1f 70       	andi	r17, 0x0F	; 15
    1016:	c0 e0       	ldi	r28, 0x00	; 0
    1018:	11 c0       	rjmp	.+34     	; 0x103c <HLCD_vidWriteChar+0x44>
    101a:	ec 2f       	mov	r30, r28
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	61 2f       	mov	r22, r17
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	0c 2e       	mov	r0, r28
    1024:	02 c0       	rjmp	.+4      	; 0x102a <HLCD_vidWriteChar+0x32>
    1026:	75 95       	asr	r23
    1028:	67 95       	ror	r22
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <HLCD_vidWriteChar+0x2e>
    102e:	61 70       	andi	r22, 0x01	; 1
    1030:	ea 58       	subi	r30, 0x8A	; 138
    1032:	fe 4f       	sbci	r31, 0xFE	; 254
    1034:	80 81       	ld	r24, Z
    1036:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
    103a:	cf 5f       	subi	r28, 0xFF	; 255
    103c:	c4 30       	cpi	r28, 0x04	; 4
    103e:	68 f3       	brcs	.-38     	; 0x101a <HLCD_vidWriteChar+0x22>
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
    1048:	89 ef       	ldi	r24, 0xF9	; 249
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <HLCD_vidWriteChar+0x54>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <HLCD_vidWriteChar+0x5a>
    1052:	00 00       	nop
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	83 e0       	ldi	r24, 0x03	; 3
    1058:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
    105c:	92 e4       	ldi	r25, 0x42	; 66
    105e:	9a 95       	dec	r25
    1060:	f1 f7       	brne	.-4      	; 0x105e <HLCD_vidWriteChar+0x66>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <HLCD_vidWriteChar+0x6c>
    1064:	df 70       	andi	r29, 0x0F	; 15
    1066:	c0 e0       	ldi	r28, 0x00	; 0
    1068:	11 c0       	rjmp	.+34     	; 0x108c <HLCD_vidWriteChar+0x94>
    106a:	ec 2f       	mov	r30, r28
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	6d 2f       	mov	r22, r29
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	0c 2e       	mov	r0, r28
    1074:	02 c0       	rjmp	.+4      	; 0x107a <HLCD_vidWriteChar+0x82>
    1076:	75 95       	asr	r23
    1078:	67 95       	ror	r22
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <HLCD_vidWriteChar+0x7e>
    107e:	61 70       	andi	r22, 0x01	; 1
    1080:	ea 58       	subi	r30, 0x8A	; 138
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	80 81       	ld	r24, Z
    1086:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
    108a:	cf 5f       	subi	r28, 0xFF	; 255
    108c:	c4 30       	cpi	r28, 0x04	; 4
    108e:	68 f3       	brcs	.-38     	; 0x106a <HLCD_vidWriteChar+0x72>
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	83 e0       	ldi	r24, 0x03	; 3
    1094:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
    1098:	89 ef       	ldi	r24, 0xF9	; 249
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <HLCD_vidWriteChar+0xa4>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <HLCD_vidWriteChar+0xaa>
    10a2:	00 00       	nop
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <DIO_s8SETPinVal>
    10ac:	83 ef       	ldi	r24, 0xF3	; 243
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <HLCD_vidWriteChar+0xb8>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <HLCD_vidWriteChar+0xbe>
    10b6:	00 00       	nop
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	08 95       	ret

000010c0 <HLCD_ClrDisplay>:
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
    10c6:	87 ee       	ldi	r24, 0xE7	; 231
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <HLCD_ClrDisplay+0xa>
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <HLCD_ClrDisplay+0x10>
    10d0:	00 00       	nop
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
    10d8:	87 ee       	ldi	r24, 0xE7	; 231
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <HLCD_ClrDisplay+0x1c>
    10e0:	00 c0       	rjmp	.+0      	; 0x10e2 <HLCD_ClrDisplay+0x22>
    10e2:	00 00       	nop
    10e4:	08 95       	ret

000010e6 <HLCD_gotoXY>:
    10e6:	81 11       	cpse	r24, r1
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <HLCD_gotoXY+0x14>
    10ea:	60 31       	cpi	r22, 0x10	; 16
    10ec:	30 f4       	brcc	.+12     	; 0x10fa <HLCD_gotoXY+0x14>
    10ee:	86 2f       	mov	r24, r22
    10f0:	8f 70       	andi	r24, 0x0F	; 15
    10f2:	80 68       	ori	r24, 0x80	; 128
    10f4:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
    10f8:	08 95       	ret
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	39 f4       	brne	.+14     	; 0x110c <HLCD_gotoXY+0x26>
    10fe:	60 31       	cpi	r22, 0x10	; 16
    1100:	28 f4       	brcc	.+10     	; 0x110c <HLCD_gotoXY+0x26>
    1102:	86 2f       	mov	r24, r22
    1104:	8f 70       	andi	r24, 0x0F	; 15
    1106:	80 6c       	ori	r24, 0xC0	; 192
    1108:	0e 94 49 07 	call	0xe92	; 0xe92 <HLCD_vidWritecmd>
    110c:	08 95       	ret

0000110e <HLCD_WriteString>:
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	8c 01       	movw	r16, r24
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
    111c:	c0 e0       	ldi	r28, 0x00	; 0
    111e:	d0 e0       	ldi	r29, 0x00	; 0
    1120:	07 c0       	rjmp	.+14     	; 0x1130 <HLCD_WriteString+0x22>
    1122:	0e 94 fc 07 	call	0xff8	; 0xff8 <HLCD_vidWriteChar>
    1126:	21 96       	adiw	r28, 0x01	; 1
    1128:	f8 01       	movw	r30, r16
    112a:	ec 0f       	add	r30, r28
    112c:	fd 1f       	adc	r31, r29
    112e:	80 81       	ld	r24, Z
    1130:	81 11       	cpse	r24, r1
    1132:	f7 cf       	rjmp	.-18     	; 0x1122 <HLCD_WriteString+0x14>
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	08 95       	ret

0000113e <HLCD_DisplayFloat>:
    113e:	8f 92       	push	r8
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	2c 97       	sbiw	r28, 0x0c	; 12
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	4b 01       	movw	r8, r22
    1166:	5c 01       	movw	r10, r24
    1168:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
    116c:	6b 01       	movw	r12, r22
    116e:	e1 2c       	mov	r14, r1
    1170:	f1 2c       	mov	r15, r1
    1172:	c7 01       	movw	r24, r14
    1174:	b6 01       	movw	r22, r12
    1176:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__floatunsisf>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	c5 01       	movw	r24, r10
    1180:	b4 01       	movw	r22, r8
    1182:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__subsf3>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	48 ec       	ldi	r20, 0xC8	; 200
    118c:	52 e4       	ldi	r21, 0x42	; 66
    118e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__mulsf3>
    1192:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
    1196:	8d ec       	ldi	r24, 0xCD	; 205
    1198:	68 9f       	mul	r22, r24
    119a:	81 2d       	mov	r24, r1
    119c:	11 24       	eor	r1, r1
    119e:	86 95       	lsr	r24
    11a0:	86 95       	lsr	r24
    11a2:	86 95       	lsr	r24
    11a4:	28 2f       	mov	r18, r24
    11a6:	22 0f       	add	r18, r18
    11a8:	92 2f       	mov	r25, r18
    11aa:	99 0f       	add	r25, r25
    11ac:	99 0f       	add	r25, r25
    11ae:	92 0f       	add	r25, r18
    11b0:	69 1b       	sub	r22, r25
    11b2:	60 5d       	subi	r22, 0xD0	; 208
    11b4:	69 83       	std	Y+1, r22	; 0x01
    11b6:	80 5d       	subi	r24, 0xD0	; 208
    11b8:	8a 83       	std	Y+2, r24	; 0x02
    11ba:	8e e2       	ldi	r24, 0x2E	; 46
    11bc:	8b 83       	std	Y+3, r24	; 0x03
    11be:	13 e0       	ldi	r17, 0x03	; 3
    11c0:	15 c0       	rjmp	.+42     	; 0x11ec <HLCD_DisplayFloat+0xae>
    11c2:	c7 01       	movw	r24, r14
    11c4:	b6 01       	movw	r22, r12
    11c6:	2a e0       	ldi	r18, 0x0A	; 10
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__udivmodsi4>
    11d2:	e1 e0       	ldi	r30, 0x01	; 1
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	ec 0f       	add	r30, r28
    11d8:	fd 1f       	adc	r31, r29
    11da:	e1 0f       	add	r30, r17
    11dc:	f1 1d       	adc	r31, r1
    11de:	60 5d       	subi	r22, 0xD0	; 208
    11e0:	60 83       	st	Z, r22
    11e2:	c2 2e       	mov	r12, r18
    11e4:	d3 2e       	mov	r13, r19
    11e6:	e4 2e       	mov	r14, r20
    11e8:	f5 2e       	mov	r15, r21
    11ea:	1f 5f       	subi	r17, 0xFF	; 255
    11ec:	c1 14       	cp	r12, r1
    11ee:	d1 04       	cpc	r13, r1
    11f0:	e1 04       	cpc	r14, r1
    11f2:	f1 04       	cpc	r15, r1
    11f4:	31 f7       	brne	.-52     	; 0x11c2 <HLCD_DisplayFloat+0x84>
    11f6:	41 2f       	mov	r20, r17
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	e1 e0       	ldi	r30, 0x01	; 1
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	ec 0f       	add	r30, r28
    1200:	fd 1f       	adc	r31, r29
    1202:	e4 0f       	add	r30, r20
    1204:	f5 1f       	adc	r31, r21
    1206:	10 82       	st	Z, r1
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	17 c0       	rjmp	.+46     	; 0x123a <HLCD_DisplayFloat+0xfc>
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	a1 e0       	ldi	r26, 0x01	; 1
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ac 0f       	add	r26, r28
    1216:	bd 1f       	adc	r27, r29
    1218:	a2 0f       	add	r26, r18
    121a:	b3 1f       	adc	r27, r19
    121c:	9c 91       	ld	r25, X
    121e:	fa 01       	movw	r30, r20
    1220:	e2 1b       	sub	r30, r18
    1222:	f3 0b       	sbc	r31, r19
    1224:	31 97       	sbiw	r30, 0x01	; 1
    1226:	21 e0       	ldi	r18, 0x01	; 1
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	2c 0f       	add	r18, r28
    122c:	3d 1f       	adc	r19, r29
    122e:	e2 0f       	add	r30, r18
    1230:	f3 1f       	adc	r31, r19
    1232:	20 81       	ld	r18, Z
    1234:	2c 93       	st	X, r18
    1236:	90 83       	st	Z, r25
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	91 2f       	mov	r25, r17
    123c:	96 95       	lsr	r25
    123e:	89 17       	cp	r24, r25
    1240:	28 f3       	brcs	.-54     	; 0x120c <HLCD_DisplayFloat+0xce>
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	0e 94 87 08 	call	0x110e	; 0x110e <HLCD_WriteString>
    124a:	2c 96       	adiw	r28, 0x0c	; 12
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	bf 90       	pop	r11
    1266:	af 90       	pop	r10
    1268:	9f 90       	pop	r9
    126a:	8f 90       	pop	r8
    126c:	08 95       	ret

0000126e <main>:
 */ 
#define F_CPU 8000000UL
#include "APP/app.h"
void main(void)
{
	APP_Init();
    126e:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_Init>

    while (1) 
    {
		APP_Start();
    1272:	0e 94 90 00 	call	0x120	; 0x120 <APP_Start>
    1276:	fd cf       	rjmp	.-6      	; 0x1272 <main+0x4>

00001278 <DIO_s8SETPinDir>:
    1278:	80 32       	cpi	r24, 0x20	; 32
    127a:	c0 f5       	brcc	.+112    	; 0x12ec <DIO_s8SETPinDir+0x74>
    127c:	62 30       	cpi	r22, 0x02	; 2
    127e:	c0 f5       	brcc	.+112    	; 0x12f0 <DIO_s8SETPinDir+0x78>
    1280:	e8 2f       	mov	r30, r24
    1282:	e6 95       	lsr	r30
    1284:	e6 95       	lsr	r30
    1286:	e6 95       	lsr	r30
    1288:	87 70       	andi	r24, 0x07	; 7
    128a:	61 11       	cpse	r22, r1
    128c:	17 c0       	rjmp	.+46     	; 0x12bc <DIO_s8SETPinDir+0x44>
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	ee 57       	subi	r30, 0x7E	; 126
    1296:	fe 4f       	sbci	r31, 0xFE	; 254
    1298:	01 90       	ld	r0, Z+
    129a:	f0 81       	ld	r31, Z
    129c:	e0 2d       	mov	r30, r0
    129e:	40 81       	ld	r20, Z
    12a0:	21 e0       	ldi	r18, 0x01	; 1
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	b9 01       	movw	r22, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_s8SETPinDir+0x34>
    12a8:	66 0f       	add	r22, r22
    12aa:	77 1f       	adc	r23, r23
    12ac:	8a 95       	dec	r24
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_s8SETPinDir+0x30>
    12b0:	cb 01       	movw	r24, r22
    12b2:	80 95       	com	r24
    12b4:	84 23       	and	r24, r20
    12b6:	80 83       	st	Z, r24
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	08 95       	ret
    12bc:	61 30       	cpi	r22, 0x01	; 1
    12be:	d1 f4       	brne	.+52     	; 0x12f4 <DIO_s8SETPinDir+0x7c>
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	ee 57       	subi	r30, 0x7E	; 126
    12c8:	fe 4f       	sbci	r31, 0xFE	; 254
    12ca:	01 90       	ld	r0, Z+
    12cc:	f0 81       	ld	r31, Z
    12ce:	e0 2d       	mov	r30, r0
    12d0:	40 81       	ld	r20, Z
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	b9 01       	movw	r22, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_s8SETPinDir+0x66>
    12da:	66 0f       	add	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	8a 95       	dec	r24
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_s8SETPinDir+0x62>
    12e2:	cb 01       	movw	r24, r22
    12e4:	84 2b       	or	r24, r20
    12e6:	80 83       	st	Z, r24
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	08 95       	ret
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	08 95       	ret
    12f0:	8f ef       	ldi	r24, 0xFF	; 255
    12f2:	08 95       	ret
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	08 95       	ret

000012f8 <DIO_s8SETPinVal>:
    12f8:	80 32       	cpi	r24, 0x20	; 32
    12fa:	c0 f5       	brcc	.+112    	; 0x136c <DIO_s8SETPinVal+0x74>
    12fc:	62 30       	cpi	r22, 0x02	; 2
    12fe:	c0 f5       	brcc	.+112    	; 0x1370 <DIO_s8SETPinVal+0x78>
    1300:	e8 2f       	mov	r30, r24
    1302:	e6 95       	lsr	r30
    1304:	e6 95       	lsr	r30
    1306:	e6 95       	lsr	r30
    1308:	87 70       	andi	r24, 0x07	; 7
    130a:	61 11       	cpse	r22, r1
    130c:	17 c0       	rjmp	.+46     	; 0x133c <DIO_s8SETPinVal+0x44>
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	ee 0f       	add	r30, r30
    1312:	ff 1f       	adc	r31, r31
    1314:	e6 57       	subi	r30, 0x76	; 118
    1316:	fe 4f       	sbci	r31, 0xFE	; 254
    1318:	01 90       	ld	r0, Z+
    131a:	f0 81       	ld	r31, Z
    131c:	e0 2d       	mov	r30, r0
    131e:	40 81       	ld	r20, Z
    1320:	21 e0       	ldi	r18, 0x01	; 1
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	b9 01       	movw	r22, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_s8SETPinVal+0x34>
    1328:	66 0f       	add	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_s8SETPinVal+0x30>
    1330:	cb 01       	movw	r24, r22
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	80 83       	st	Z, r24
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	08 95       	ret
    133c:	61 30       	cpi	r22, 0x01	; 1
    133e:	d1 f4       	brne	.+52     	; 0x1374 <DIO_s8SETPinVal+0x7c>
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	e6 57       	subi	r30, 0x76	; 118
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	01 90       	ld	r0, Z+
    134c:	f0 81       	ld	r31, Z
    134e:	e0 2d       	mov	r30, r0
    1350:	40 81       	ld	r20, Z
    1352:	21 e0       	ldi	r18, 0x01	; 1
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	b9 01       	movw	r22, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_s8SETPinVal+0x66>
    135a:	66 0f       	add	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	8a 95       	dec	r24
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_s8SETPinVal+0x62>
    1362:	cb 01       	movw	r24, r22
    1364:	84 2b       	or	r24, r20
    1366:	80 83       	st	Z, r24
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	08 95       	ret
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	08 95       	ret
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	08 95       	ret
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	08 95       	ret

00001378 <DIO_s8GETPinVal>:
    1378:	80 32       	cpi	r24, 0x20	; 32
    137a:	d8 f4       	brcc	.+54     	; 0x13b2 <DIO_s8GETPinVal+0x3a>
    137c:	e8 2f       	mov	r30, r24
    137e:	e6 95       	lsr	r30
    1380:	e6 95       	lsr	r30
    1382:	e6 95       	lsr	r30
    1384:	87 70       	andi	r24, 0x07	; 7
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	e6 58       	subi	r30, 0x86	; 134
    138e:	fe 4f       	sbci	r31, 0xFE	; 254
    1390:	01 90       	ld	r0, Z+
    1392:	f0 81       	ld	r31, Z
    1394:	e0 2d       	mov	r30, r0
    1396:	20 81       	ld	r18, Z
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	a9 01       	movw	r20, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_s8GETPinVal+0x2a>
    139e:	55 95       	asr	r21
    13a0:	47 95       	ror	r20
    13a2:	8a 95       	dec	r24
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_s8GETPinVal+0x26>
    13a6:	ca 01       	movw	r24, r20
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	fb 01       	movw	r30, r22
    13ac:	80 83       	st	Z, r24
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	08 95       	ret
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	08 95       	ret

000013b6 <SET_GLOBAL_INTERRUPT>:
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	19 f4       	brne	.+6      	; 0x13c0 <SET_GLOBAL_INTERRUPT+0xa>
    13ba:	78 94       	sei
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	08 95       	ret
    13c0:	81 11       	cpse	r24, r1
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <SET_GLOBAL_INTERRUPT+0x12>
    13c4:	f8 94       	cli
    13c6:	08 95       	ret
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	08 95       	ret

000013cc <EXTINT_init>:
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	c8 2f       	mov	r28, r24
    13d2:	d6 2f       	mov	r29, r22
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SET_GLOBAL_INTERRUPT>
    13da:	c1 30       	cpi	r28, 0x01	; 1
    13dc:	99 f1       	breq	.+102    	; 0x1444 <EXTINT_init+0x78>
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <EXTINT_init+0x1c>
    13e0:	c2 30       	cpi	r28, 0x02	; 2
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <EXTINT_init+0x1a>
    13e4:	5d c0       	rjmp	.+186    	; 0x14a0 <EXTINT_init+0xd4>
    13e6:	72 c0       	rjmp	.+228    	; 0x14cc <EXTINT_init+0x100>
    13e8:	d1 11       	cpse	r29, r1
    13ea:	07 c0       	rjmp	.+14     	; 0x13fa <EXTINT_init+0x2e>
    13ec:	85 b7       	in	r24, 0x35	; 53
    13ee:	8e 7f       	andi	r24, 0xFE	; 254
    13f0:	85 bf       	out	0x35, r24	; 53
    13f2:	85 b7       	in	r24, 0x35	; 53
    13f4:	8d 7f       	andi	r24, 0xFD	; 253
    13f6:	85 bf       	out	0x35, r24	; 53
    13f8:	20 c0       	rjmp	.+64     	; 0x143a <EXTINT_init+0x6e>
    13fa:	d1 30       	cpi	r29, 0x01	; 1
    13fc:	39 f4       	brne	.+14     	; 0x140c <EXTINT_init+0x40>
    13fe:	85 b7       	in	r24, 0x35	; 53
    1400:	8e 7f       	andi	r24, 0xFE	; 254
    1402:	85 bf       	out	0x35, r24	; 53
    1404:	85 b7       	in	r24, 0x35	; 53
    1406:	82 60       	ori	r24, 0x02	; 2
    1408:	85 bf       	out	0x35, r24	; 53
    140a:	17 c0       	rjmp	.+46     	; 0x143a <EXTINT_init+0x6e>
    140c:	d2 30       	cpi	r29, 0x02	; 2
    140e:	39 f4       	brne	.+14     	; 0x141e <EXTINT_init+0x52>
    1410:	85 b7       	in	r24, 0x35	; 53
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	85 bf       	out	0x35, r24	; 53
    1416:	85 b7       	in	r24, 0x35	; 53
    1418:	82 60       	ori	r24, 0x02	; 2
    141a:	85 bf       	out	0x35, r24	; 53
    141c:	0e c0       	rjmp	.+28     	; 0x143a <EXTINT_init+0x6e>
    141e:	d3 30       	cpi	r29, 0x03	; 3
    1420:	39 f4       	brne	.+14     	; 0x1430 <EXTINT_init+0x64>
    1422:	85 b7       	in	r24, 0x35	; 53
    1424:	81 60       	ori	r24, 0x01	; 1
    1426:	85 bf       	out	0x35, r24	; 53
    1428:	85 b7       	in	r24, 0x35	; 53
    142a:	8d 7f       	andi	r24, 0xFD	; 253
    142c:	85 bf       	out	0x35, r24	; 53
    142e:	05 c0       	rjmp	.+10     	; 0x143a <EXTINT_init+0x6e>
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SET_GLOBAL_INTERRUPT>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	4d c0       	rjmp	.+154    	; 0x14d4 <EXTINT_init+0x108>
    143a:	8b b7       	in	r24, 0x3b	; 59
    143c:	80 64       	ori	r24, 0x40	; 64
    143e:	8b bf       	out	0x3b, r24	; 59
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	48 c0       	rjmp	.+144    	; 0x14d4 <EXTINT_init+0x108>
    1444:	d1 11       	cpse	r29, r1
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <EXTINT_init+0x8a>
    1448:	85 b7       	in	r24, 0x35	; 53
    144a:	8b 7f       	andi	r24, 0xFB	; 251
    144c:	85 bf       	out	0x35, r24	; 53
    144e:	85 b7       	in	r24, 0x35	; 53
    1450:	87 7f       	andi	r24, 0xF7	; 247
    1452:	85 bf       	out	0x35, r24	; 53
    1454:	20 c0       	rjmp	.+64     	; 0x1496 <EXTINT_init+0xca>
    1456:	d1 30       	cpi	r29, 0x01	; 1
    1458:	39 f4       	brne	.+14     	; 0x1468 <EXTINT_init+0x9c>
    145a:	85 b7       	in	r24, 0x35	; 53
    145c:	8b 7f       	andi	r24, 0xFB	; 251
    145e:	85 bf       	out	0x35, r24	; 53
    1460:	85 b7       	in	r24, 0x35	; 53
    1462:	88 60       	ori	r24, 0x08	; 8
    1464:	85 bf       	out	0x35, r24	; 53
    1466:	17 c0       	rjmp	.+46     	; 0x1496 <EXTINT_init+0xca>
    1468:	d2 30       	cpi	r29, 0x02	; 2
    146a:	39 f4       	brne	.+14     	; 0x147a <EXTINT_init+0xae>
    146c:	85 b7       	in	r24, 0x35	; 53
    146e:	84 60       	ori	r24, 0x04	; 4
    1470:	85 bf       	out	0x35, r24	; 53
    1472:	85 b7       	in	r24, 0x35	; 53
    1474:	88 60       	ori	r24, 0x08	; 8
    1476:	85 bf       	out	0x35, r24	; 53
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <EXTINT_init+0xca>
    147a:	d3 30       	cpi	r29, 0x03	; 3
    147c:	39 f4       	brne	.+14     	; 0x148c <EXTINT_init+0xc0>
    147e:	85 b7       	in	r24, 0x35	; 53
    1480:	84 60       	ori	r24, 0x04	; 4
    1482:	85 bf       	out	0x35, r24	; 53
    1484:	85 b7       	in	r24, 0x35	; 53
    1486:	87 7f       	andi	r24, 0xF7	; 247
    1488:	85 bf       	out	0x35, r24	; 53
    148a:	05 c0       	rjmp	.+10     	; 0x1496 <EXTINT_init+0xca>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SET_GLOBAL_INTERRUPT>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	1f c0       	rjmp	.+62     	; 0x14d4 <EXTINT_init+0x108>
    1496:	8b b7       	in	r24, 0x3b	; 59
    1498:	80 68       	ori	r24, 0x80	; 128
    149a:	8b bf       	out	0x3b, r24	; 59
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	1a c0       	rjmp	.+52     	; 0x14d4 <EXTINT_init+0x108>
    14a0:	d1 30       	cpi	r29, 0x01	; 1
    14a2:	21 f4       	brne	.+8      	; 0x14ac <EXTINT_init+0xe0>
    14a4:	84 b7       	in	r24, 0x34	; 52
    14a6:	8f 7b       	andi	r24, 0xBF	; 191
    14a8:	84 bf       	out	0x34, r24	; 52
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <EXTINT_init+0xf6>
    14ac:	d2 30       	cpi	r29, 0x02	; 2
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <EXTINT_init+0xec>
    14b0:	84 b7       	in	r24, 0x34	; 52
    14b2:	80 64       	ori	r24, 0x40	; 64
    14b4:	84 bf       	out	0x34, r24	; 52
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <EXTINT_init+0xf6>
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SET_GLOBAL_INTERRUPT>
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	09 c0       	rjmp	.+18     	; 0x14d4 <EXTINT_init+0x108>
    14c2:	8b b7       	in	r24, 0x3b	; 59
    14c4:	80 62       	ori	r24, 0x20	; 32
    14c6:	8b bf       	out	0x3b, r24	; 59
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <EXTINT_init+0x108>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 db 09 	call	0x13b6	; 0x13b6 <SET_GLOBAL_INTERRUPT>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <EXTINT_CallBack>:
    14da:	81 11       	cpse	r24, r1
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <EXTINT_CallBack+0xe>
    14de:	70 93 b1 02 	sts	0x02B1, r23	; 0x8002b1 <ptrINT0+0x1>
    14e2:	60 93 b0 02 	sts	0x02B0, r22	; 0x8002b0 <ptrINT0>
    14e6:	08 95       	ret
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	31 f4       	brne	.+12     	; 0x14f8 <EXTINT_CallBack+0x1e>
    14ec:	70 93 af 02 	sts	0x02AF, r23	; 0x8002af <ptrINT1+0x1>
    14f0:	60 93 ae 02 	sts	0x02AE, r22	; 0x8002ae <ptrINT1>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	08 95       	ret
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	31 f4       	brne	.+12     	; 0x1508 <EXTINT_CallBack+0x2e>
    14fc:	70 93 ad 02 	sts	0x02AD, r23	; 0x8002ad <ptrINT2+0x1>
    1500:	60 93 ac 02 	sts	0x02AC, r22	; 0x8002ac <ptrINT2>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	08 95       	ret
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	08 95       	ret

0000150c <__vector_1>:
    150c:	1f 92       	push	r1
    150e:	0f 92       	push	r0
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	0f 92       	push	r0
    1514:	11 24       	eor	r1, r1
    1516:	2f 93       	push	r18
    1518:	3f 93       	push	r19
    151a:	4f 93       	push	r20
    151c:	5f 93       	push	r21
    151e:	6f 93       	push	r22
    1520:	7f 93       	push	r23
    1522:	8f 93       	push	r24
    1524:	9f 93       	push	r25
    1526:	af 93       	push	r26
    1528:	bf 93       	push	r27
    152a:	ef 93       	push	r30
    152c:	ff 93       	push	r31
    152e:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <ptrINT0>
    1532:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <ptrINT0+0x1>
    1536:	30 97       	sbiw	r30, 0x00	; 0
    1538:	09 f0       	breq	.+2      	; 0x153c <__vector_1+0x30>
    153a:	09 95       	icall
    153c:	ff 91       	pop	r31
    153e:	ef 91       	pop	r30
    1540:	bf 91       	pop	r27
    1542:	af 91       	pop	r26
    1544:	9f 91       	pop	r25
    1546:	8f 91       	pop	r24
    1548:	7f 91       	pop	r23
    154a:	6f 91       	pop	r22
    154c:	5f 91       	pop	r21
    154e:	4f 91       	pop	r20
    1550:	3f 91       	pop	r19
    1552:	2f 91       	pop	r18
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	0f 90       	pop	r0
    155a:	1f 90       	pop	r1
    155c:	18 95       	reti

0000155e <__vector_2>:
    155e:	1f 92       	push	r1
    1560:	0f 92       	push	r0
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1
    1568:	2f 93       	push	r18
    156a:	3f 93       	push	r19
    156c:	4f 93       	push	r20
    156e:	5f 93       	push	r21
    1570:	6f 93       	push	r22
    1572:	7f 93       	push	r23
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	af 93       	push	r26
    157a:	bf 93       	push	r27
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
    1580:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <ptrINT1>
    1584:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <ptrINT1+0x1>
    1588:	30 97       	sbiw	r30, 0x00	; 0
    158a:	09 f0       	breq	.+2      	; 0x158e <__vector_2+0x30>
    158c:	09 95       	icall
    158e:	ff 91       	pop	r31
    1590:	ef 91       	pop	r30
    1592:	bf 91       	pop	r27
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	0f 90       	pop	r0
    15ac:	1f 90       	pop	r1
    15ae:	18 95       	reti

000015b0 <__vector_3>:
    15b0:	1f 92       	push	r1
    15b2:	0f 92       	push	r0
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	0f 92       	push	r0
    15b8:	11 24       	eor	r1, r1
    15ba:	2f 93       	push	r18
    15bc:	3f 93       	push	r19
    15be:	4f 93       	push	r20
    15c0:	5f 93       	push	r21
    15c2:	6f 93       	push	r22
    15c4:	7f 93       	push	r23
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	af 93       	push	r26
    15cc:	bf 93       	push	r27
    15ce:	ef 93       	push	r30
    15d0:	ff 93       	push	r31
    15d2:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <ptrINT2>
    15d6:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <ptrINT2+0x1>
    15da:	30 97       	sbiw	r30, 0x00	; 0
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <__vector_3+0x30>
    15de:	09 95       	icall
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	0f 90       	pop	r0
    15fe:	1f 90       	pop	r1
    1600:	18 95       	reti

00001602 <SPI_MasterInit>:
	{
		return SPI_NOK;
	}
	
	return SPI_OK;
}
    1602:	8d b1       	in	r24, 0x0d	; 13
    1604:	80 61       	ori	r24, 0x10	; 16
    1606:	8d b9       	out	0x0d, r24	; 13
    1608:	8d b1       	in	r24, 0x0d	; 13
    160a:	9e b1       	in	r25, 0x0e	; 14
    160c:	8e 7f       	andi	r24, 0xFE	; 254
    160e:	9c 7f       	andi	r25, 0xFC	; 252
    1610:	9e b9       	out	0x0e, r25	; 14
    1612:	8d b9       	out	0x0d, r24	; 13
    1614:	8d b1       	in	r24, 0x0d	; 13
    1616:	9e b1       	in	r25, 0x0e	; 14
    1618:	93 60       	ori	r25, 0x03	; 3
    161a:	9e b9       	out	0x0e, r25	; 14
    161c:	8d b9       	out	0x0d, r24	; 13
    161e:	8d b1       	in	r24, 0x0d	; 13
    1620:	87 7f       	andi	r24, 0xF7	; 247
    1622:	8d b9       	out	0x0d, r24	; 13
    1624:	8d b1       	in	r24, 0x0d	; 13
    1626:	8b 7f       	andi	r24, 0xFB	; 251
    1628:	8d b9       	out	0x0d, r24	; 13
    162a:	8d b1       	in	r24, 0x0d	; 13
    162c:	80 64       	ori	r24, 0x40	; 64
    162e:	8d b9       	out	0x0d, r24	; 13
    1630:	08 95       	ret

00001632 <SPI_TranscieveChar>:
    1632:	61 15       	cp	r22, r1
    1634:	71 05       	cpc	r23, r1
    1636:	f9 f0       	breq	.+62     	; 0x1676 <SPI_TranscieveChar+0x44>
    1638:	8f b9       	out	0x0f, r24	; 15
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	dc 01       	movw	r26, r24
    1640:	03 c0       	rjmp	.+6      	; 0x1648 <SPI_TranscieveChar+0x16>
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	a1 1d       	adc	r26, r1
    1646:	b1 1d       	adc	r27, r1
    1648:	77 99       	sbic	0x0e, 7	; 14
    164a:	07 c0       	rjmp	.+14     	; 0x165a <SPI_TranscieveChar+0x28>
    164c:	80 3a       	cpi	r24, 0xA0	; 160
    164e:	26 e8       	ldi	r18, 0x86	; 134
    1650:	92 07       	cpc	r25, r18
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	a2 07       	cpc	r26, r18
    1656:	b1 05       	cpc	r27, r1
    1658:	a0 f3       	brcs	.-24     	; 0x1642 <SPI_TranscieveChar+0x10>
    165a:	80 3a       	cpi	r24, 0xA0	; 160
    165c:	96 48       	sbci	r25, 0x86	; 134
    165e:	a1 40       	sbci	r26, 0x01	; 1
    1660:	b1 05       	cpc	r27, r1
    1662:	59 f0       	breq	.+22     	; 0x167a <SPI_TranscieveChar+0x48>
    1664:	8f b1       	in	r24, 0x0f	; 15
    1666:	fb 01       	movw	r30, r22
    1668:	80 83       	st	Z, r24
    166a:	f1 e2       	ldi	r31, 0x21	; 33
    166c:	fa 95       	dec	r31
    166e:	f1 f7       	brne	.-4      	; 0x166c <SPI_TranscieveChar+0x3a>
    1670:	00 00       	nop
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	08 95       	ret
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	08 95       	ret
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	08 95       	ret

0000167e <__vector_12>:

/*************************************************************************************************************
 * 													  ISRs
 ************************************************************************************************************/
ISR(SPI_STC_INT)
{
    167e:	1f 92       	push	r1
    1680:	0f 92       	push	r0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	0f 92       	push	r0
    1686:	11 24       	eor	r1, r1
    1688:	2f 93       	push	r18
    168a:	3f 93       	push	r19
    168c:	4f 93       	push	r20
    168e:	5f 93       	push	r21
    1690:	6f 93       	push	r22
    1692:	7f 93       	push	r23
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
    169c:	ef 93       	push	r30
    169e:	ff 93       	push	r31
	if(SPI_CallbackFn != NULL)
    16a0:	e0 91 b2 02 	lds	r30, 0x02B2	; 0x8002b2 <SPI_CallbackFn>
    16a4:	f0 91 b3 02 	lds	r31, 0x02B3	; 0x8002b3 <SPI_CallbackFn+0x1>
    16a8:	30 97       	sbiw	r30, 0x00	; 0
    16aa:	09 f0       	breq	.+2      	; 0x16ae <__vector_12+0x30>
	{
		SPI_CallbackFn();
    16ac:	09 95       	icall
	}
	else
	{
		/* Do Nothing */
	}
    16ae:	ff 91       	pop	r31
    16b0:	ef 91       	pop	r30
    16b2:	bf 91       	pop	r27
    16b4:	af 91       	pop	r26
    16b6:	9f 91       	pop	r25
    16b8:	8f 91       	pop	r24
    16ba:	7f 91       	pop	r23
    16bc:	6f 91       	pop	r22
    16be:	5f 91       	pop	r21
    16c0:	4f 91       	pop	r20
    16c2:	3f 91       	pop	r19
    16c4:	2f 91       	pop	r18
    16c6:	0f 90       	pop	r0
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	0f 90       	pop	r0
    16cc:	1f 90       	pop	r1
    16ce:	18 95       	reti

000016d0 <TIM0_voidInit>:
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	61 f0       	breq	.+24     	; 0x16ec <TIM0_voidInit+0x1c>
    16d4:	28 f0       	brcs	.+10     	; 0x16e0 <TIM0_voidInit+0x10>
    16d6:	82 30       	cpi	r24, 0x02	; 2
    16d8:	29 f0       	breq	.+10     	; 0x16e4 <TIM0_voidInit+0x14>
    16da:	83 30       	cpi	r24, 0x03	; 3
    16dc:	29 f0       	breq	.+10     	; 0x16e8 <TIM0_voidInit+0x18>
    16de:	0f c0       	rjmp	.+30     	; 0x16fe <TIM0_voidInit+0x2e>
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	05 c0       	rjmp	.+10     	; 0x16ee <TIM0_voidInit+0x1e>
    16e4:	28 e0       	ldi	r18, 0x08	; 8
    16e6:	03 c0       	rjmp	.+6      	; 0x16ee <TIM0_voidInit+0x1e>
    16e8:	28 e4       	ldi	r18, 0x48	; 72
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <TIM0_voidInit+0x1e>
    16ec:	20 e4       	ldi	r18, 0x40	; 64
    16ee:	93 b7       	in	r25, 0x33	; 51
    16f0:	97 7b       	andi	r25, 0xB7	; 183
    16f2:	93 bf       	out	0x33, r25	; 51
    16f4:	83 b7       	in	r24, 0x33	; 51
    16f6:	82 2b       	or	r24, r18
    16f8:	83 bf       	out	0x33, r24	; 51
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	08 95       	ret
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	08 95       	ret

00001702 <TIM0_Start>:
    1702:	9f ef       	ldi	r25, 0xFF	; 255
    1704:	98 0f       	add	r25, r24
    1706:	97 30       	cpi	r25, 0x07	; 7
    1708:	40 f4       	brcc	.+16     	; 0x171a <TIM0_Start+0x18>
    170a:	93 b7       	in	r25, 0x33	; 51
    170c:	98 7f       	andi	r25, 0xF8	; 248
    170e:	93 bf       	out	0x33, r25	; 51
    1710:	93 b7       	in	r25, 0x33	; 51
    1712:	89 2b       	or	r24, r25
    1714:	83 bf       	out	0x33, r24	; 51
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	08 95       	ret
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	08 95       	ret

0000171e <TIM0_Stop>:
    171e:	83 b7       	in	r24, 0x33	; 51
    1720:	88 7f       	andi	r24, 0xF8	; 248
    1722:	83 bf       	out	0x33, r24	; 51
    1724:	12 be       	out	0x32, r1	; 50
    1726:	88 b7       	in	r24, 0x38	; 56
    1728:	8e 7f       	andi	r24, 0xFE	; 254
    172a:	88 bf       	out	0x38, r24	; 56
    172c:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <u8_gs_OVFCount>
    1730:	08 95       	ret

00001732 <TIM0_SetValue>:
    1732:	82 bf       	out	0x32, r24	; 50
    1734:	08 95       	ret

00001736 <TIM0_GetOVF>:
    1736:	fc 01       	movw	r30, r24
    1738:	89 2b       	or	r24, r25
    173a:	29 f0       	breq	.+10     	; 0x1746 <TIM0_GetOVF+0x10>
    173c:	98 b7       	in	r25, 0x38	; 56
    173e:	91 70       	andi	r25, 0x01	; 1
    1740:	90 83       	st	Z, r25
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	08 95       	ret
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	08 95       	ret

0000174a <TIM0_ClearOVF>:
    174a:	88 b7       	in	r24, 0x38	; 56
    174c:	81 60       	ori	r24, 0x01	; 1
    174e:	88 bf       	out	0x38, r24	; 56
    1750:	08 95       	ret

00001752 <TIM0_GetState>:
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	61 f0       	breq	.+24     	; 0x176e <TIM0_GetState+0x1c>
    1756:	03 b6       	in	r0, 0x33	; 51
    1758:	00 fe       	sbrs	r0, 0
    175a:	05 c0       	rjmp	.+10     	; 0x1766 <TIM0_GetState+0x14>
    175c:	21 e0       	ldi	r18, 0x01	; 1
    175e:	fc 01       	movw	r30, r24
    1760:	20 83       	st	Z, r18
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	08 95       	ret
    1766:	fc 01       	movw	r30, r24
    1768:	10 82       	st	Z, r1
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	08 95       	ret
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	08 95       	ret

00001772 <__vector_11>:
    1772:	1f 92       	push	r1
    1774:	0f 92       	push	r0
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	0f 92       	push	r0
    177a:	11 24       	eor	r1, r1
    177c:	2f 93       	push	r18
    177e:	3f 93       	push	r19
    1780:	4f 93       	push	r20
    1782:	5f 93       	push	r21
    1784:	6f 93       	push	r22
    1786:	7f 93       	push	r23
    1788:	8f 93       	push	r24
    178a:	9f 93       	push	r25
    178c:	af 93       	push	r26
    178e:	bf 93       	push	r27
    1790:	ef 93       	push	r30
    1792:	ff 93       	push	r31
    1794:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <TIM0_OVFCallbackFn>
    1798:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <TIM0_OVFCallbackFn+0x1>
    179c:	89 2b       	or	r24, r25
    179e:	b1 f0       	breq	.+44     	; 0x17cc <__vector_11+0x5a>
    17a0:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <u8_gs_OVFCount>
    17a4:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <u8_g_TotalOVF>
    17a8:	89 13       	cpse	r24, r25
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <__vector_11+0x54>
    17ac:	0e 94 8f 0b 	call	0x171e	; 0x171e <TIM0_Stop>
    17b0:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <u8_gs_OVFCount>
    17b4:	89 b7       	in	r24, 0x39	; 57
    17b6:	8e 7f       	andi	r24, 0xFE	; 254
    17b8:	89 bf       	out	0x39, r24	; 57
    17ba:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <TIM0_OVFCallbackFn>
    17be:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <TIM0_OVFCallbackFn+0x1>
    17c2:	09 95       	icall
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <__vector_11+0x5a>
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <u8_gs_OVFCount>
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	bf 91       	pop	r27
    17d2:	af 91       	pop	r26
    17d4:	9f 91       	pop	r25
    17d6:	8f 91       	pop	r24
    17d8:	7f 91       	pop	r23
    17da:	6f 91       	pop	r22
    17dc:	5f 91       	pop	r21
    17de:	4f 91       	pop	r20
    17e0:	3f 91       	pop	r19
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <enuTimer2_init>:
    17ee:	84 30       	cpi	r24, 0x04	; 4
    17f0:	40 f5       	brcc	.+80     	; 0x1842 <enuTimer2_init+0x54>
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	71 f0       	breq	.+28     	; 0x1812 <enuTimer2_init+0x24>
    17f6:	28 f0       	brcs	.+10     	; 0x1802 <enuTimer2_init+0x14>
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	99 f0       	breq	.+38     	; 0x1822 <enuTimer2_init+0x34>
    17fc:	83 30       	cpi	r24, 0x03	; 3
    17fe:	c9 f0       	breq	.+50     	; 0x1832 <enuTimer2_init+0x44>
    1800:	22 c0       	rjmp	.+68     	; 0x1846 <enuTimer2_init+0x58>
    1802:	85 b5       	in	r24, 0x25	; 37
    1804:	87 7f       	andi	r24, 0xF7	; 247
    1806:	85 bd       	out	0x25, r24	; 37
    1808:	85 b5       	in	r24, 0x25	; 37
    180a:	8f 7b       	andi	r24, 0xBF	; 191
    180c:	85 bd       	out	0x25, r24	; 37
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	08 95       	ret
    1812:	85 b5       	in	r24, 0x25	; 37
    1814:	87 7f       	andi	r24, 0xF7	; 247
    1816:	85 bd       	out	0x25, r24	; 37
    1818:	85 b5       	in	r24, 0x25	; 37
    181a:	80 64       	ori	r24, 0x40	; 64
    181c:	85 bd       	out	0x25, r24	; 37
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	08 95       	ret
    1822:	85 b5       	in	r24, 0x25	; 37
    1824:	88 60       	ori	r24, 0x08	; 8
    1826:	85 bd       	out	0x25, r24	; 37
    1828:	85 b5       	in	r24, 0x25	; 37
    182a:	8f 7b       	andi	r24, 0xBF	; 191
    182c:	85 bd       	out	0x25, r24	; 37
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	08 95       	ret
    1832:	85 b5       	in	r24, 0x25	; 37
    1834:	88 60       	ori	r24, 0x08	; 8
    1836:	85 bd       	out	0x25, r24	; 37
    1838:	85 b5       	in	r24, 0x25	; 37
    183a:	80 64       	ori	r24, 0x40	; 64
    183c:	85 bd       	out	0x25, r24	; 37
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	08 95       	ret
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	08 95       	ret
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	08 95       	ret

0000184a <u8Timer2_setPrescallar>:
    184a:	88 30       	cpi	r24, 0x08	; 8
    184c:	70 f4       	brcc	.+28     	; 0x186a <u8Timer2_setPrescallar+0x20>
    184e:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <global_prescaller>
    1852:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <global_timerStatus>
    1856:	91 30       	cpi	r25, 0x01	; 1
    1858:	51 f4       	brne	.+20     	; 0x186e <u8Timer2_setPrescallar+0x24>
    185a:	95 b5       	in	r25, 0x25	; 37
    185c:	98 7f       	andi	r25, 0xF8	; 248
    185e:	89 2b       	or	r24, r25
    1860:	95 b5       	in	r25, 0x25	; 37
    1862:	89 2b       	or	r24, r25
    1864:	85 bd       	out	0x25, r24	; 37
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	08 95       	ret
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	08 95       	ret
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	08 95       	ret

00001872 <vidTimer2_OvfIrqEnable>:
    1872:	89 b7       	in	r24, 0x39	; 57
    1874:	80 64       	ori	r24, 0x40	; 64
    1876:	89 bf       	out	0x39, r24	; 57
    1878:	8f b7       	in	r24, 0x3f	; 63
    187a:	80 68       	ori	r24, 0x80	; 128
    187c:	8f bf       	out	0x3f, r24	; 63
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	08 95       	ret

00001882 <vidTimer2_start>:
    1882:	95 b5       	in	r25, 0x25	; 37
    1884:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <global_prescaller>
    1888:	89 2b       	or	r24, r25
    188a:	85 bd       	out	0x25, r24	; 37
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <global_timerStatus>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	08 95       	ret

00001896 <vidTimer2_stop>:
    1896:	85 b5       	in	r24, 0x25	; 37
    1898:	88 7f       	andi	r24, 0xF8	; 248
    189a:	85 bd       	out	0x25, r24	; 37
    189c:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <global_timerStatus>
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	08 95       	ret

000018a4 <u8Timer2_setTime_ms>:
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	68 38       	cpi	r22, 0x88	; 136
    18b6:	23 e1       	ldi	r18, 0x13	; 19
    18b8:	72 07       	cpc	r23, r18
    18ba:	81 05       	cpc	r24, r1
    18bc:	91 05       	cpc	r25, r1
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <u8Timer2_setTime_ms+0x1e>
    18c0:	60 c0       	rjmp	.+192    	; 0x1982 <u8Timer2_setTime_ms+0xde>
    18c2:	6b 01       	movw	r12, r22
    18c4:	7c 01       	movw	r14, r24
    18c6:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <global_prescaller>
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	ee 0f       	add	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	e8 56       	subi	r30, 0x68	; 104
    18d2:	fd 4f       	sbci	r31, 0xFD	; 253
    18d4:	60 81       	ld	r22, Z
    18d6:	71 81       	ldd	r23, Z+1	; 0x01
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__floatunsisf>
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	4a ef       	ldi	r20, 0xFA	; 250
    18e6:	55 e4       	ldi	r21, 0x45	; 69
    18e8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__divsf3>
    18ec:	4b 01       	movw	r8, r22
    18ee:	5c 01       	movw	r10, r24
    18f0:	c7 01       	movw	r24, r14
    18f2:	b6 01       	movw	r22, r12
    18f4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__floatunsisf>
    18f8:	a5 01       	movw	r20, r10
    18fa:	94 01       	movw	r18, r8
    18fc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__divsf3>
    1900:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <__fixunssfsi>
    1904:	61 15       	cp	r22, r1
    1906:	21 e0       	ldi	r18, 0x01	; 1
    1908:	72 07       	cpc	r23, r18
    190a:	81 05       	cpc	r24, r1
    190c:	91 05       	cpc	r25, r1
    190e:	29 f4       	brne	.+10     	; 0x191a <u8Timer2_setTime_ms+0x76>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <global_ovf>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	39 c0       	rjmp	.+114    	; 0x198c <u8Timer2_setTime_ms+0xe8>
    191a:	6f 3f       	cpi	r22, 0xFF	; 255
    191c:	71 05       	cpc	r23, r1
    191e:	81 05       	cpc	r24, r1
    1920:	91 05       	cpc	r25, r1
    1922:	09 f0       	breq	.+2      	; 0x1926 <u8Timer2_setTime_ms+0x82>
    1924:	78 f4       	brcc	.+30     	; 0x1944 <u8Timer2_setTime_ms+0xa0>
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	31 e0       	ldi	r19, 0x01	; 1
    192a:	c9 01       	movw	r24, r18
    192c:	86 1b       	sub	r24, r22
    192e:	97 0b       	sbc	r25, r23
    1930:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <preload+0x1>
    1934:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <preload>
    1938:	84 bd       	out	0x24, r24	; 36
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <global_ovf>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	24 c0       	rjmp	.+72     	; 0x198c <u8Timer2_setTime_ms+0xe8>
    1944:	61 30       	cpi	r22, 0x01	; 1
    1946:	21 e0       	ldi	r18, 0x01	; 1
    1948:	72 07       	cpc	r23, r18
    194a:	81 05       	cpc	r24, r1
    194c:	91 05       	cpc	r25, r1
    194e:	d8 f0       	brcs	.+54     	; 0x1986 <u8Timer2_setTime_ms+0xe2>
    1950:	70 93 bd 02 	sts	0x02BD, r23	; 0x8002bd <global_ovf>
    1954:	77 27       	eor	r23, r23
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	86 1b       	sub	r24, r22
    195c:	97 0b       	sbc	r25, r23
    195e:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <preload+0x1>
    1962:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <preload>
    1966:	84 bd       	out	0x24, r24	; 36
    1968:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <preload>
    196c:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <preload+0x1>
    1970:	89 2b       	or	r24, r25
    1972:	59 f0       	breq	.+22     	; 0x198a <u8Timer2_setTime_ms+0xe6>
    1974:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <global_ovf>
    1978:	8f 5f       	subi	r24, 0xFF	; 255
    197a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <global_ovf>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	05 c0       	rjmp	.+10     	; 0x198c <u8Timer2_setTime_ms+0xe8>
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	03 c0       	rjmp	.+6      	; 0x198c <u8Timer2_setTime_ms+0xe8>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	01 c0       	rjmp	.+2      	; 0x198c <u8Timer2_setTime_ms+0xe8>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	ff 90       	pop	r15
    198e:	ef 90       	pop	r14
    1990:	df 90       	pop	r13
    1992:	cf 90       	pop	r12
    1994:	bf 90       	pop	r11
    1996:	af 90       	pop	r10
    1998:	9f 90       	pop	r9
    199a:	8f 90       	pop	r8
    199c:	08 95       	ret

0000199e <vidTimer2_setcbf_OVF>:
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	21 f0       	breq	.+8      	; 0x19aa <vidTimer2_setcbf_OVF+0xc>
    19a2:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <globalCallFunc+0x1>
    19a6:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <globalCallFunc>
    19aa:	08 95       	ret

000019ac <__vector_5>:
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <counter.1731>
    19d2:	8f 5f       	subi	r24, 0xFF	; 255
    19d4:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <counter.1731>
    19d8:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <global_ovf>
    19dc:	89 13       	cpse	r24, r25
    19de:	0c c0       	rjmp	.+24     	; 0x19f8 <__vector_5+0x4c>
    19e0:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <globalCallFunc>
    19e4:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <globalCallFunc+0x1>
    19e8:	30 97       	sbiw	r30, 0x00	; 0
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <__vector_5+0x4c>
    19ec:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <counter.1731>
    19f0:	09 95       	icall
    19f2:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <preload>
    19f6:	84 bd       	out	0x24, r24	; 36
    19f8:	ff 91       	pop	r31
    19fa:	ef 91       	pop	r30
    19fc:	bf 91       	pop	r27
    19fe:	af 91       	pop	r26
    1a00:	9f 91       	pop	r25
    1a02:	8f 91       	pop	r24
    1a04:	7f 91       	pop	r23
    1a06:	6f 91       	pop	r22
    1a08:	5f 91       	pop	r21
    1a0a:	4f 91       	pop	r20
    1a0c:	3f 91       	pop	r19
    1a0e:	2f 91       	pop	r18
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <__subsf3>:
    1a1a:	50 58       	subi	r21, 0x80	; 128

00001a1c <__addsf3>:
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	aa 27       	eor	r26, r26
    1a20:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__addsf3x>
    1a24:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_round>
    1a28:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__fp_pscA>
    1a2c:	38 f0       	brcs	.+14     	; 0x1a3c <__addsf3+0x20>
    1a2e:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__fp_pscB>
    1a32:	20 f0       	brcs	.+8      	; 0x1a3c <__addsf3+0x20>
    1a34:	39 f4       	brne	.+14     	; 0x1a44 <__addsf3+0x28>
    1a36:	9f 3f       	cpi	r25, 0xFF	; 255
    1a38:	19 f4       	brne	.+6      	; 0x1a40 <__addsf3+0x24>
    1a3a:	26 f4       	brtc	.+8      	; 0x1a44 <__addsf3+0x28>
    1a3c:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__fp_nan>
    1a40:	0e f4       	brtc	.+2      	; 0x1a44 <__addsf3+0x28>
    1a42:	e0 95       	com	r30
    1a44:	e7 fb       	bst	r30, 7
    1a46:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__fp_inf>

00001a4a <__addsf3x>:
    1a4a:	e9 2f       	mov	r30, r25
    1a4c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__fp_split3>
    1a50:	58 f3       	brcs	.-42     	; 0x1a28 <__addsf3+0xc>
    1a52:	ba 17       	cp	r27, r26
    1a54:	62 07       	cpc	r22, r18
    1a56:	73 07       	cpc	r23, r19
    1a58:	84 07       	cpc	r24, r20
    1a5a:	95 07       	cpc	r25, r21
    1a5c:	20 f0       	brcs	.+8      	; 0x1a66 <__addsf3x+0x1c>
    1a5e:	79 f4       	brne	.+30     	; 0x1a7e <__addsf3x+0x34>
    1a60:	a6 f5       	brtc	.+104    	; 0x1aca <__addsf3x+0x80>
    1a62:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__fp_zero>
    1a66:	0e f4       	brtc	.+2      	; 0x1a6a <__addsf3x+0x20>
    1a68:	e0 95       	com	r30
    1a6a:	0b 2e       	mov	r0, r27
    1a6c:	ba 2f       	mov	r27, r26
    1a6e:	a0 2d       	mov	r26, r0
    1a70:	0b 01       	movw	r0, r22
    1a72:	b9 01       	movw	r22, r18
    1a74:	90 01       	movw	r18, r0
    1a76:	0c 01       	movw	r0, r24
    1a78:	ca 01       	movw	r24, r20
    1a7a:	a0 01       	movw	r20, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	ff 27       	eor	r31, r31
    1a80:	59 1b       	sub	r21, r25
    1a82:	99 f0       	breq	.+38     	; 0x1aaa <__addsf3x+0x60>
    1a84:	59 3f       	cpi	r21, 0xF9	; 249
    1a86:	50 f4       	brcc	.+20     	; 0x1a9c <__addsf3x+0x52>
    1a88:	50 3e       	cpi	r21, 0xE0	; 224
    1a8a:	68 f1       	brcs	.+90     	; 0x1ae6 <__addsf3x+0x9c>
    1a8c:	1a 16       	cp	r1, r26
    1a8e:	f0 40       	sbci	r31, 0x00	; 0
    1a90:	a2 2f       	mov	r26, r18
    1a92:	23 2f       	mov	r18, r19
    1a94:	34 2f       	mov	r19, r20
    1a96:	44 27       	eor	r20, r20
    1a98:	58 5f       	subi	r21, 0xF8	; 248
    1a9a:	f3 cf       	rjmp	.-26     	; 0x1a82 <__addsf3x+0x38>
    1a9c:	46 95       	lsr	r20
    1a9e:	37 95       	ror	r19
    1aa0:	27 95       	ror	r18
    1aa2:	a7 95       	ror	r26
    1aa4:	f0 40       	sbci	r31, 0x00	; 0
    1aa6:	53 95       	inc	r21
    1aa8:	c9 f7       	brne	.-14     	; 0x1a9c <__addsf3x+0x52>
    1aaa:	7e f4       	brtc	.+30     	; 0x1aca <__addsf3x+0x80>
    1aac:	1f 16       	cp	r1, r31
    1aae:	ba 0b       	sbc	r27, r26
    1ab0:	62 0b       	sbc	r22, r18
    1ab2:	73 0b       	sbc	r23, r19
    1ab4:	84 0b       	sbc	r24, r20
    1ab6:	ba f0       	brmi	.+46     	; 0x1ae6 <__addsf3x+0x9c>
    1ab8:	91 50       	subi	r25, 0x01	; 1
    1aba:	a1 f0       	breq	.+40     	; 0x1ae4 <__addsf3x+0x9a>
    1abc:	ff 0f       	add	r31, r31
    1abe:	bb 1f       	adc	r27, r27
    1ac0:	66 1f       	adc	r22, r22
    1ac2:	77 1f       	adc	r23, r23
    1ac4:	88 1f       	adc	r24, r24
    1ac6:	c2 f7       	brpl	.-16     	; 0x1ab8 <__addsf3x+0x6e>
    1ac8:	0e c0       	rjmp	.+28     	; 0x1ae6 <__addsf3x+0x9c>
    1aca:	ba 0f       	add	r27, r26
    1acc:	62 1f       	adc	r22, r18
    1ace:	73 1f       	adc	r23, r19
    1ad0:	84 1f       	adc	r24, r20
    1ad2:	48 f4       	brcc	.+18     	; 0x1ae6 <__addsf3x+0x9c>
    1ad4:	87 95       	ror	r24
    1ad6:	77 95       	ror	r23
    1ad8:	67 95       	ror	r22
    1ada:	b7 95       	ror	r27
    1adc:	f7 95       	ror	r31
    1ade:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae0:	08 f0       	brcs	.+2      	; 0x1ae4 <__addsf3x+0x9a>
    1ae2:	b0 cf       	rjmp	.-160    	; 0x1a44 <__addsf3+0x28>
    1ae4:	93 95       	inc	r25
    1ae6:	88 0f       	add	r24, r24
    1ae8:	08 f0       	brcs	.+2      	; 0x1aec <__addsf3x+0xa2>
    1aea:	99 27       	eor	r25, r25
    1aec:	ee 0f       	add	r30, r30
    1aee:	97 95       	ror	r25
    1af0:	87 95       	ror	r24
    1af2:	08 95       	ret

00001af4 <__cmpsf2>:
    1af4:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__fp_cmp>
    1af8:	08 f4       	brcc	.+2      	; 0x1afc <__cmpsf2+0x8>
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	08 95       	ret

00001afe <__divsf3>:
    1afe:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <__divsf3x>
    1b02:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_round>
    1b06:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__fp_pscB>
    1b0a:	58 f0       	brcs	.+22     	; 0x1b22 <__divsf3+0x24>
    1b0c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__fp_pscA>
    1b10:	40 f0       	brcs	.+16     	; 0x1b22 <__divsf3+0x24>
    1b12:	29 f4       	brne	.+10     	; 0x1b1e <__divsf3+0x20>
    1b14:	5f 3f       	cpi	r21, 0xFF	; 255
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <__divsf3+0x24>
    1b18:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__fp_inf>
    1b1c:	51 11       	cpse	r21, r1
    1b1e:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__fp_szero>
    1b22:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__fp_nan>

00001b26 <__divsf3x>:
    1b26:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__fp_split3>
    1b2a:	68 f3       	brcs	.-38     	; 0x1b06 <__divsf3+0x8>

00001b2c <__divsf3_pse>:
    1b2c:	99 23       	and	r25, r25
    1b2e:	b1 f3       	breq	.-20     	; 0x1b1c <__divsf3+0x1e>
    1b30:	55 23       	and	r21, r21
    1b32:	91 f3       	breq	.-28     	; 0x1b18 <__divsf3+0x1a>
    1b34:	95 1b       	sub	r25, r21
    1b36:	55 0b       	sbc	r21, r21
    1b38:	bb 27       	eor	r27, r27
    1b3a:	aa 27       	eor	r26, r26
    1b3c:	62 17       	cp	r22, r18
    1b3e:	73 07       	cpc	r23, r19
    1b40:	84 07       	cpc	r24, r20
    1b42:	38 f0       	brcs	.+14     	; 0x1b52 <__divsf3_pse+0x26>
    1b44:	9f 5f       	subi	r25, 0xFF	; 255
    1b46:	5f 4f       	sbci	r21, 0xFF	; 255
    1b48:	22 0f       	add	r18, r18
    1b4a:	33 1f       	adc	r19, r19
    1b4c:	44 1f       	adc	r20, r20
    1b4e:	aa 1f       	adc	r26, r26
    1b50:	a9 f3       	breq	.-22     	; 0x1b3c <__divsf3_pse+0x10>
    1b52:	35 d0       	rcall	.+106    	; 0x1bbe <__divsf3_pse+0x92>
    1b54:	0e 2e       	mov	r0, r30
    1b56:	3a f0       	brmi	.+14     	; 0x1b66 <__divsf3_pse+0x3a>
    1b58:	e0 e8       	ldi	r30, 0x80	; 128
    1b5a:	32 d0       	rcall	.+100    	; 0x1bc0 <__divsf3_pse+0x94>
    1b5c:	91 50       	subi	r25, 0x01	; 1
    1b5e:	50 40       	sbci	r21, 0x00	; 0
    1b60:	e6 95       	lsr	r30
    1b62:	00 1c       	adc	r0, r0
    1b64:	ca f7       	brpl	.-14     	; 0x1b58 <__divsf3_pse+0x2c>
    1b66:	2b d0       	rcall	.+86     	; 0x1bbe <__divsf3_pse+0x92>
    1b68:	fe 2f       	mov	r31, r30
    1b6a:	29 d0       	rcall	.+82     	; 0x1bbe <__divsf3_pse+0x92>
    1b6c:	66 0f       	add	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	bb 1f       	adc	r27, r27
    1b74:	26 17       	cp	r18, r22
    1b76:	37 07       	cpc	r19, r23
    1b78:	48 07       	cpc	r20, r24
    1b7a:	ab 07       	cpc	r26, r27
    1b7c:	b0 e8       	ldi	r27, 0x80	; 128
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <__divsf3_pse+0x56>
    1b80:	bb 0b       	sbc	r27, r27
    1b82:	80 2d       	mov	r24, r0
    1b84:	bf 01       	movw	r22, r30
    1b86:	ff 27       	eor	r31, r31
    1b88:	93 58       	subi	r25, 0x83	; 131
    1b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8c:	3a f0       	brmi	.+14     	; 0x1b9c <__divsf3_pse+0x70>
    1b8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b90:	51 05       	cpc	r21, r1
    1b92:	78 f0       	brcs	.+30     	; 0x1bb2 <__divsf3_pse+0x86>
    1b94:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__fp_inf>
    1b98:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__fp_szero>
    1b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b9e:	e4 f3       	brlt	.-8      	; 0x1b98 <__divsf3_pse+0x6c>
    1ba0:	98 3e       	cpi	r25, 0xE8	; 232
    1ba2:	d4 f3       	brlt	.-12     	; 0x1b98 <__divsf3_pse+0x6c>
    1ba4:	86 95       	lsr	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	b7 95       	ror	r27
    1bac:	f7 95       	ror	r31
    1bae:	9f 5f       	subi	r25, 0xFF	; 255
    1bb0:	c9 f7       	brne	.-14     	; 0x1ba4 <__divsf3_pse+0x78>
    1bb2:	88 0f       	add	r24, r24
    1bb4:	91 1d       	adc	r25, r1
    1bb6:	96 95       	lsr	r25
    1bb8:	87 95       	ror	r24
    1bba:	97 f9       	bld	r25, 7
    1bbc:	08 95       	ret
    1bbe:	e1 e0       	ldi	r30, 0x01	; 1
    1bc0:	66 0f       	add	r22, r22
    1bc2:	77 1f       	adc	r23, r23
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	bb 1f       	adc	r27, r27
    1bc8:	62 17       	cp	r22, r18
    1bca:	73 07       	cpc	r23, r19
    1bcc:	84 07       	cpc	r24, r20
    1bce:	ba 07       	cpc	r27, r26
    1bd0:	20 f0       	brcs	.+8      	; 0x1bda <__divsf3_pse+0xae>
    1bd2:	62 1b       	sub	r22, r18
    1bd4:	73 0b       	sbc	r23, r19
    1bd6:	84 0b       	sbc	r24, r20
    1bd8:	ba 0b       	sbc	r27, r26
    1bda:	ee 1f       	adc	r30, r30
    1bdc:	88 f7       	brcc	.-30     	; 0x1bc0 <__divsf3_pse+0x94>
    1bde:	e0 95       	com	r30
    1be0:	08 95       	ret

00001be2 <__fixunssfsi>:
    1be2:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__fp_splitA>
    1be6:	88 f0       	brcs	.+34     	; 0x1c0a <__fixunssfsi+0x28>
    1be8:	9f 57       	subi	r25, 0x7F	; 127
    1bea:	98 f0       	brcs	.+38     	; 0x1c12 <__fixunssfsi+0x30>
    1bec:	b9 2f       	mov	r27, r25
    1bee:	99 27       	eor	r25, r25
    1bf0:	b7 51       	subi	r27, 0x17	; 23
    1bf2:	b0 f0       	brcs	.+44     	; 0x1c20 <__fixunssfsi+0x3e>
    1bf4:	e1 f0       	breq	.+56     	; 0x1c2e <__fixunssfsi+0x4c>
    1bf6:	66 0f       	add	r22, r22
    1bf8:	77 1f       	adc	r23, r23
    1bfa:	88 1f       	adc	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	1a f0       	brmi	.+6      	; 0x1c06 <__fixunssfsi+0x24>
    1c00:	ba 95       	dec	r27
    1c02:	c9 f7       	brne	.-14     	; 0x1bf6 <__fixunssfsi+0x14>
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <__fixunssfsi+0x4c>
    1c06:	b1 30       	cpi	r27, 0x01	; 1
    1c08:	91 f0       	breq	.+36     	; 0x1c2e <__fixunssfsi+0x4c>
    1c0a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__fp_zero>
    1c0e:	b1 e0       	ldi	r27, 0x01	; 1
    1c10:	08 95       	ret
    1c12:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <__fp_zero>
    1c16:	67 2f       	mov	r22, r23
    1c18:	78 2f       	mov	r23, r24
    1c1a:	88 27       	eor	r24, r24
    1c1c:	b8 5f       	subi	r27, 0xF8	; 248
    1c1e:	39 f0       	breq	.+14     	; 0x1c2e <__fixunssfsi+0x4c>
    1c20:	b9 3f       	cpi	r27, 0xF9	; 249
    1c22:	cc f3       	brlt	.-14     	; 0x1c16 <__fixunssfsi+0x34>
    1c24:	86 95       	lsr	r24
    1c26:	77 95       	ror	r23
    1c28:	67 95       	ror	r22
    1c2a:	b3 95       	inc	r27
    1c2c:	d9 f7       	brne	.-10     	; 0x1c24 <__fixunssfsi+0x42>
    1c2e:	3e f4       	brtc	.+14     	; 0x1c3e <__fixunssfsi+0x5c>
    1c30:	90 95       	com	r25
    1c32:	80 95       	com	r24
    1c34:	70 95       	com	r23
    1c36:	61 95       	neg	r22
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	08 95       	ret

00001c40 <__floatunsisf>:
    1c40:	e8 94       	clt
    1c42:	09 c0       	rjmp	.+18     	; 0x1c56 <__floatsisf+0x12>

00001c44 <__floatsisf>:
    1c44:	97 fb       	bst	r25, 7
    1c46:	3e f4       	brtc	.+14     	; 0x1c56 <__floatsisf+0x12>
    1c48:	90 95       	com	r25
    1c4a:	80 95       	com	r24
    1c4c:	70 95       	com	r23
    1c4e:	61 95       	neg	r22
    1c50:	7f 4f       	sbci	r23, 0xFF	; 255
    1c52:	8f 4f       	sbci	r24, 0xFF	; 255
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	99 23       	and	r25, r25
    1c58:	a9 f0       	breq	.+42     	; 0x1c84 <__floatsisf+0x40>
    1c5a:	f9 2f       	mov	r31, r25
    1c5c:	96 e9       	ldi	r25, 0x96	; 150
    1c5e:	bb 27       	eor	r27, r27
    1c60:	93 95       	inc	r25
    1c62:	f6 95       	lsr	r31
    1c64:	87 95       	ror	r24
    1c66:	77 95       	ror	r23
    1c68:	67 95       	ror	r22
    1c6a:	b7 95       	ror	r27
    1c6c:	f1 11       	cpse	r31, r1
    1c6e:	f8 cf       	rjmp	.-16     	; 0x1c60 <__floatsisf+0x1c>
    1c70:	fa f4       	brpl	.+62     	; 0x1cb0 <__floatsisf+0x6c>
    1c72:	bb 0f       	add	r27, r27
    1c74:	11 f4       	brne	.+4      	; 0x1c7a <__floatsisf+0x36>
    1c76:	60 ff       	sbrs	r22, 0
    1c78:	1b c0       	rjmp	.+54     	; 0x1cb0 <__floatsisf+0x6c>
    1c7a:	6f 5f       	subi	r22, 0xFF	; 255
    1c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	16 c0       	rjmp	.+44     	; 0x1cb0 <__floatsisf+0x6c>
    1c84:	88 23       	and	r24, r24
    1c86:	11 f0       	breq	.+4      	; 0x1c8c <__floatsisf+0x48>
    1c88:	96 e9       	ldi	r25, 0x96	; 150
    1c8a:	11 c0       	rjmp	.+34     	; 0x1cae <__floatsisf+0x6a>
    1c8c:	77 23       	and	r23, r23
    1c8e:	21 f0       	breq	.+8      	; 0x1c98 <__floatsisf+0x54>
    1c90:	9e e8       	ldi	r25, 0x8E	; 142
    1c92:	87 2f       	mov	r24, r23
    1c94:	76 2f       	mov	r23, r22
    1c96:	05 c0       	rjmp	.+10     	; 0x1ca2 <__floatsisf+0x5e>
    1c98:	66 23       	and	r22, r22
    1c9a:	71 f0       	breq	.+28     	; 0x1cb8 <__floatsisf+0x74>
    1c9c:	96 e8       	ldi	r25, 0x86	; 134
    1c9e:	86 2f       	mov	r24, r22
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	60 e0       	ldi	r22, 0x00	; 0
    1ca4:	2a f0       	brmi	.+10     	; 0x1cb0 <__floatsisf+0x6c>
    1ca6:	9a 95       	dec	r25
    1ca8:	66 0f       	add	r22, r22
    1caa:	77 1f       	adc	r23, r23
    1cac:	88 1f       	adc	r24, r24
    1cae:	da f7       	brpl	.-10     	; 0x1ca6 <__floatsisf+0x62>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	96 95       	lsr	r25
    1cb4:	87 95       	ror	r24
    1cb6:	97 f9       	bld	r25, 7
    1cb8:	08 95       	ret

00001cba <__fp_cmp>:
    1cba:	99 0f       	add	r25, r25
    1cbc:	00 08       	sbc	r0, r0
    1cbe:	55 0f       	add	r21, r21
    1cc0:	aa 0b       	sbc	r26, r26
    1cc2:	e0 e8       	ldi	r30, 0x80	; 128
    1cc4:	fe ef       	ldi	r31, 0xFE	; 254
    1cc6:	16 16       	cp	r1, r22
    1cc8:	17 06       	cpc	r1, r23
    1cca:	e8 07       	cpc	r30, r24
    1ccc:	f9 07       	cpc	r31, r25
    1cce:	c0 f0       	brcs	.+48     	; 0x1d00 <__fp_cmp+0x46>
    1cd0:	12 16       	cp	r1, r18
    1cd2:	13 06       	cpc	r1, r19
    1cd4:	e4 07       	cpc	r30, r20
    1cd6:	f5 07       	cpc	r31, r21
    1cd8:	98 f0       	brcs	.+38     	; 0x1d00 <__fp_cmp+0x46>
    1cda:	62 1b       	sub	r22, r18
    1cdc:	73 0b       	sbc	r23, r19
    1cde:	84 0b       	sbc	r24, r20
    1ce0:	95 0b       	sbc	r25, r21
    1ce2:	39 f4       	brne	.+14     	; 0x1cf2 <__fp_cmp+0x38>
    1ce4:	0a 26       	eor	r0, r26
    1ce6:	61 f0       	breq	.+24     	; 0x1d00 <__fp_cmp+0x46>
    1ce8:	23 2b       	or	r18, r19
    1cea:	24 2b       	or	r18, r20
    1cec:	25 2b       	or	r18, r21
    1cee:	21 f4       	brne	.+8      	; 0x1cf8 <__fp_cmp+0x3e>
    1cf0:	08 95       	ret
    1cf2:	0a 26       	eor	r0, r26
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <__fp_cmp+0x3e>
    1cf6:	a1 40       	sbci	r26, 0x01	; 1
    1cf8:	a6 95       	lsr	r26
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	81 1d       	adc	r24, r1
    1cfe:	81 1d       	adc	r24, r1
    1d00:	08 95       	ret

00001d02 <__fp_inf>:
    1d02:	97 f9       	bld	r25, 7
    1d04:	9f 67       	ori	r25, 0x7F	; 127
    1d06:	80 e8       	ldi	r24, 0x80	; 128
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	08 95       	ret

00001d0e <__fp_nan>:
    1d0e:	9f ef       	ldi	r25, 0xFF	; 255
    1d10:	80 ec       	ldi	r24, 0xC0	; 192
    1d12:	08 95       	ret

00001d14 <__fp_pscA>:
    1d14:	00 24       	eor	r0, r0
    1d16:	0a 94       	dec	r0
    1d18:	16 16       	cp	r1, r22
    1d1a:	17 06       	cpc	r1, r23
    1d1c:	18 06       	cpc	r1, r24
    1d1e:	09 06       	cpc	r0, r25
    1d20:	08 95       	ret

00001d22 <__fp_pscB>:
    1d22:	00 24       	eor	r0, r0
    1d24:	0a 94       	dec	r0
    1d26:	12 16       	cp	r1, r18
    1d28:	13 06       	cpc	r1, r19
    1d2a:	14 06       	cpc	r1, r20
    1d2c:	05 06       	cpc	r0, r21
    1d2e:	08 95       	ret

00001d30 <__fp_round>:
    1d30:	09 2e       	mov	r0, r25
    1d32:	03 94       	inc	r0
    1d34:	00 0c       	add	r0, r0
    1d36:	11 f4       	brne	.+4      	; 0x1d3c <__fp_round+0xc>
    1d38:	88 23       	and	r24, r24
    1d3a:	52 f0       	brmi	.+20     	; 0x1d50 <__fp_round+0x20>
    1d3c:	bb 0f       	add	r27, r27
    1d3e:	40 f4       	brcc	.+16     	; 0x1d50 <__fp_round+0x20>
    1d40:	bf 2b       	or	r27, r31
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <__fp_round+0x18>
    1d44:	60 ff       	sbrs	r22, 0
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <__fp_round+0x20>
    1d48:	6f 5f       	subi	r22, 0xFF	; 255
    1d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	08 95       	ret

00001d52 <__fp_split3>:
    1d52:	57 fd       	sbrc	r21, 7
    1d54:	90 58       	subi	r25, 0x80	; 128
    1d56:	44 0f       	add	r20, r20
    1d58:	55 1f       	adc	r21, r21
    1d5a:	59 f0       	breq	.+22     	; 0x1d72 <__fp_splitA+0x10>
    1d5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <__fp_splitA+0x1a>
    1d60:	47 95       	ror	r20

00001d62 <__fp_splitA>:
    1d62:	88 0f       	add	r24, r24
    1d64:	97 fb       	bst	r25, 7
    1d66:	99 1f       	adc	r25, r25
    1d68:	61 f0       	breq	.+24     	; 0x1d82 <__fp_splitA+0x20>
    1d6a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d6c:	79 f0       	breq	.+30     	; 0x1d8c <__fp_splitA+0x2a>
    1d6e:	87 95       	ror	r24
    1d70:	08 95       	ret
    1d72:	12 16       	cp	r1, r18
    1d74:	13 06       	cpc	r1, r19
    1d76:	14 06       	cpc	r1, r20
    1d78:	55 1f       	adc	r21, r21
    1d7a:	f2 cf       	rjmp	.-28     	; 0x1d60 <__fp_split3+0xe>
    1d7c:	46 95       	lsr	r20
    1d7e:	f1 df       	rcall	.-30     	; 0x1d62 <__fp_splitA>
    1d80:	08 c0       	rjmp	.+16     	; 0x1d92 <__fp_splitA+0x30>
    1d82:	16 16       	cp	r1, r22
    1d84:	17 06       	cpc	r1, r23
    1d86:	18 06       	cpc	r1, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	f1 cf       	rjmp	.-30     	; 0x1d6e <__fp_splitA+0xc>
    1d8c:	86 95       	lsr	r24
    1d8e:	71 05       	cpc	r23, r1
    1d90:	61 05       	cpc	r22, r1
    1d92:	08 94       	sec
    1d94:	08 95       	ret

00001d96 <__fp_zero>:
    1d96:	e8 94       	clt

00001d98 <__fp_szero>:
    1d98:	bb 27       	eor	r27, r27
    1d9a:	66 27       	eor	r22, r22
    1d9c:	77 27       	eor	r23, r23
    1d9e:	cb 01       	movw	r24, r22
    1da0:	97 f9       	bld	r25, 7
    1da2:	08 95       	ret

00001da4 <__mulsf3>:
    1da4:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__mulsf3x>
    1da8:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__fp_round>
    1dac:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__fp_pscA>
    1db0:	38 f0       	brcs	.+14     	; 0x1dc0 <__mulsf3+0x1c>
    1db2:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__fp_pscB>
    1db6:	20 f0       	brcs	.+8      	; 0x1dc0 <__mulsf3+0x1c>
    1db8:	95 23       	and	r25, r21
    1dba:	11 f0       	breq	.+4      	; 0x1dc0 <__mulsf3+0x1c>
    1dbc:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__fp_inf>
    1dc0:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__fp_nan>
    1dc4:	11 24       	eor	r1, r1
    1dc6:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__fp_szero>

00001dca <__mulsf3x>:
    1dca:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <__fp_split3>
    1dce:	70 f3       	brcs	.-36     	; 0x1dac <__mulsf3+0x8>

00001dd0 <__mulsf3_pse>:
    1dd0:	95 9f       	mul	r25, r21
    1dd2:	c1 f3       	breq	.-16     	; 0x1dc4 <__mulsf3+0x20>
    1dd4:	95 0f       	add	r25, r21
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	55 1f       	adc	r21, r21
    1dda:	62 9f       	mul	r22, r18
    1ddc:	f0 01       	movw	r30, r0
    1dde:	72 9f       	mul	r23, r18
    1de0:	bb 27       	eor	r27, r27
    1de2:	f0 0d       	add	r31, r0
    1de4:	b1 1d       	adc	r27, r1
    1de6:	63 9f       	mul	r22, r19
    1de8:	aa 27       	eor	r26, r26
    1dea:	f0 0d       	add	r31, r0
    1dec:	b1 1d       	adc	r27, r1
    1dee:	aa 1f       	adc	r26, r26
    1df0:	64 9f       	mul	r22, r20
    1df2:	66 27       	eor	r22, r22
    1df4:	b0 0d       	add	r27, r0
    1df6:	a1 1d       	adc	r26, r1
    1df8:	66 1f       	adc	r22, r22
    1dfa:	82 9f       	mul	r24, r18
    1dfc:	22 27       	eor	r18, r18
    1dfe:	b0 0d       	add	r27, r0
    1e00:	a1 1d       	adc	r26, r1
    1e02:	62 1f       	adc	r22, r18
    1e04:	73 9f       	mul	r23, r19
    1e06:	b0 0d       	add	r27, r0
    1e08:	a1 1d       	adc	r26, r1
    1e0a:	62 1f       	adc	r22, r18
    1e0c:	83 9f       	mul	r24, r19
    1e0e:	a0 0d       	add	r26, r0
    1e10:	61 1d       	adc	r22, r1
    1e12:	22 1f       	adc	r18, r18
    1e14:	74 9f       	mul	r23, r20
    1e16:	33 27       	eor	r19, r19
    1e18:	a0 0d       	add	r26, r0
    1e1a:	61 1d       	adc	r22, r1
    1e1c:	23 1f       	adc	r18, r19
    1e1e:	84 9f       	mul	r24, r20
    1e20:	60 0d       	add	r22, r0
    1e22:	21 1d       	adc	r18, r1
    1e24:	82 2f       	mov	r24, r18
    1e26:	76 2f       	mov	r23, r22
    1e28:	6a 2f       	mov	r22, r26
    1e2a:	11 24       	eor	r1, r1
    1e2c:	9f 57       	subi	r25, 0x7F	; 127
    1e2e:	50 40       	sbci	r21, 0x00	; 0
    1e30:	9a f0       	brmi	.+38     	; 0x1e58 <__mulsf3_pse+0x88>
    1e32:	f1 f0       	breq	.+60     	; 0x1e70 <__mulsf3_pse+0xa0>
    1e34:	88 23       	and	r24, r24
    1e36:	4a f0       	brmi	.+18     	; 0x1e4a <__mulsf3_pse+0x7a>
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	bb 1f       	adc	r27, r27
    1e3e:	66 1f       	adc	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	88 1f       	adc	r24, r24
    1e44:	91 50       	subi	r25, 0x01	; 1
    1e46:	50 40       	sbci	r21, 0x00	; 0
    1e48:	a9 f7       	brne	.-22     	; 0x1e34 <__mulsf3_pse+0x64>
    1e4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e4c:	51 05       	cpc	r21, r1
    1e4e:	80 f0       	brcs	.+32     	; 0x1e70 <__mulsf3_pse+0xa0>
    1e50:	0c 94 81 0e 	jmp	0x1d02	; 0x1d02 <__fp_inf>
    1e54:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <__fp_szero>
    1e58:	5f 3f       	cpi	r21, 0xFF	; 255
    1e5a:	e4 f3       	brlt	.-8      	; 0x1e54 <__mulsf3_pse+0x84>
    1e5c:	98 3e       	cpi	r25, 0xE8	; 232
    1e5e:	d4 f3       	brlt	.-12     	; 0x1e54 <__mulsf3_pse+0x84>
    1e60:	86 95       	lsr	r24
    1e62:	77 95       	ror	r23
    1e64:	67 95       	ror	r22
    1e66:	b7 95       	ror	r27
    1e68:	f7 95       	ror	r31
    1e6a:	e7 95       	ror	r30
    1e6c:	9f 5f       	subi	r25, 0xFF	; 255
    1e6e:	c1 f7       	brne	.-16     	; 0x1e60 <__mulsf3_pse+0x90>
    1e70:	fe 2b       	or	r31, r30
    1e72:	88 0f       	add	r24, r24
    1e74:	91 1d       	adc	r25, r1
    1e76:	96 95       	lsr	r25
    1e78:	87 95       	ror	r24
    1e7a:	97 f9       	bld	r25, 7
    1e7c:	08 95       	ret

00001e7e <__mulsi3>:
    1e7e:	db 01       	movw	r26, r22
    1e80:	8f 93       	push	r24
    1e82:	9f 93       	push	r25
    1e84:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__muluhisi3>
    1e88:	bf 91       	pop	r27
    1e8a:	af 91       	pop	r26
    1e8c:	a2 9f       	mul	r26, r18
    1e8e:	80 0d       	add	r24, r0
    1e90:	91 1d       	adc	r25, r1
    1e92:	a3 9f       	mul	r26, r19
    1e94:	90 0d       	add	r25, r0
    1e96:	b2 9f       	mul	r27, r18
    1e98:	90 0d       	add	r25, r0
    1e9a:	11 24       	eor	r1, r1
    1e9c:	08 95       	ret

00001e9e <__udivmodsi4>:
    1e9e:	a1 e2       	ldi	r26, 0x21	; 33
    1ea0:	1a 2e       	mov	r1, r26
    1ea2:	aa 1b       	sub	r26, r26
    1ea4:	bb 1b       	sub	r27, r27
    1ea6:	fd 01       	movw	r30, r26
    1ea8:	0d c0       	rjmp	.+26     	; 0x1ec4 <__udivmodsi4_ep>

00001eaa <__udivmodsi4_loop>:
    1eaa:	aa 1f       	adc	r26, r26
    1eac:	bb 1f       	adc	r27, r27
    1eae:	ee 1f       	adc	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	a2 17       	cp	r26, r18
    1eb4:	b3 07       	cpc	r27, r19
    1eb6:	e4 07       	cpc	r30, r20
    1eb8:	f5 07       	cpc	r31, r21
    1eba:	20 f0       	brcs	.+8      	; 0x1ec4 <__udivmodsi4_ep>
    1ebc:	a2 1b       	sub	r26, r18
    1ebe:	b3 0b       	sbc	r27, r19
    1ec0:	e4 0b       	sbc	r30, r20
    1ec2:	f5 0b       	sbc	r31, r21

00001ec4 <__udivmodsi4_ep>:
    1ec4:	66 1f       	adc	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	1a 94       	dec	r1
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <__udivmodsi4_loop>
    1ed0:	60 95       	com	r22
    1ed2:	70 95       	com	r23
    1ed4:	80 95       	com	r24
    1ed6:	90 95       	com	r25
    1ed8:	9b 01       	movw	r18, r22
    1eda:	ac 01       	movw	r20, r24
    1edc:	bd 01       	movw	r22, r26
    1ede:	cf 01       	movw	r24, r30
    1ee0:	08 95       	ret

00001ee2 <__muluhisi3>:
    1ee2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__umulhisi3>
    1ee6:	a5 9f       	mul	r26, r21
    1ee8:	90 0d       	add	r25, r0
    1eea:	b4 9f       	mul	r27, r20
    1eec:	90 0d       	add	r25, r0
    1eee:	a4 9f       	mul	r26, r20
    1ef0:	80 0d       	add	r24, r0
    1ef2:	91 1d       	adc	r25, r1
    1ef4:	11 24       	eor	r1, r1
    1ef6:	08 95       	ret

00001ef8 <__umulhisi3>:
    1ef8:	a2 9f       	mul	r26, r18
    1efa:	b0 01       	movw	r22, r0
    1efc:	b3 9f       	mul	r27, r19
    1efe:	c0 01       	movw	r24, r0
    1f00:	a3 9f       	mul	r26, r19
    1f02:	70 0d       	add	r23, r0
    1f04:	81 1d       	adc	r24, r1
    1f06:	11 24       	eor	r1, r1
    1f08:	91 1d       	adc	r25, r1
    1f0a:	b2 9f       	mul	r27, r18
    1f0c:	70 0d       	add	r23, r0
    1f0e:	81 1d       	adc	r24, r1
    1f10:	11 24       	eor	r1, r1
    1f12:	91 1d       	adc	r25, r1
    1f14:	08 95       	ret

00001f16 <atof>:
    1f16:	66 27       	eor	r22, r22
    1f18:	77 27       	eor	r23, r23
    1f1a:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <strtod>

00001f1e <strcmp>:
    1f1e:	fb 01       	movw	r30, r22
    1f20:	dc 01       	movw	r26, r24
    1f22:	8d 91       	ld	r24, X+
    1f24:	01 90       	ld	r0, Z+
    1f26:	80 19       	sub	r24, r0
    1f28:	01 10       	cpse	r0, r1
    1f2a:	d9 f3       	breq	.-10     	; 0x1f22 <strcmp+0x4>
    1f2c:	99 0b       	sbc	r25, r25
    1f2e:	08 95       	ret

00001f30 <strcpy>:
    1f30:	fb 01       	movw	r30, r22
    1f32:	dc 01       	movw	r26, r24
    1f34:	01 90       	ld	r0, Z+
    1f36:	0d 92       	st	X+, r0
    1f38:	00 20       	and	r0, r0
    1f3a:	e1 f7       	brne	.-8      	; 0x1f34 <strcpy+0x4>
    1f3c:	08 95       	ret

00001f3e <strtod>:
    1f3e:	a0 e0       	ldi	r26, 0x00	; 0
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e5 ea       	ldi	r30, 0xA5	; 165
    1f44:	ff e0       	ldi	r31, 0x0F	; 15
    1f46:	0c 94 17 11 	jmp	0x222e	; 0x222e <__prologue_saves__+0xc>
    1f4a:	ec 01       	movw	r28, r24
    1f4c:	6b 01       	movw	r12, r22
    1f4e:	61 15       	cp	r22, r1
    1f50:	71 05       	cpc	r23, r1
    1f52:	19 f0       	breq	.+6      	; 0x1f5a <strtod+0x1c>
    1f54:	fb 01       	movw	r30, r22
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	7e 01       	movw	r14, r28
    1f5c:	ff ef       	ldi	r31, 0xFF	; 255
    1f5e:	ef 1a       	sub	r14, r31
    1f60:	ff 0a       	sbc	r15, r31
    1f62:	08 81       	ld	r16, Y
    1f64:	80 2f       	mov	r24, r16
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 ed 10 	call	0x21da	; 0x21da <isspace>
    1f6c:	89 2b       	or	r24, r25
    1f6e:	11 f0       	breq	.+4      	; 0x1f74 <strtod+0x36>
    1f70:	e7 01       	movw	r28, r14
    1f72:	f3 cf       	rjmp	.-26     	; 0x1f5a <strtod+0x1c>
    1f74:	0d 32       	cpi	r16, 0x2D	; 45
    1f76:	39 f4       	brne	.+14     	; 0x1f86 <strtod+0x48>
    1f78:	7e 01       	movw	r14, r28
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	e8 0e       	add	r14, r24
    1f7e:	f1 1c       	adc	r15, r1
    1f80:	09 81       	ldd	r16, Y+1	; 0x01
    1f82:	11 e0       	ldi	r17, 0x01	; 1
    1f84:	08 c0       	rjmp	.+16     	; 0x1f96 <strtod+0x58>
    1f86:	0b 32       	cpi	r16, 0x2B	; 43
    1f88:	29 f4       	brne	.+10     	; 0x1f94 <strtod+0x56>
    1f8a:	7e 01       	movw	r14, r28
    1f8c:	92 e0       	ldi	r25, 0x02	; 2
    1f8e:	e9 0e       	add	r14, r25
    1f90:	f1 1c       	adc	r15, r1
    1f92:	09 81       	ldd	r16, Y+1	; 0x01
    1f94:	10 e0       	ldi	r17, 0x00	; 0
    1f96:	e7 01       	movw	r28, r14
    1f98:	21 97       	sbiw	r28, 0x01	; 1
    1f9a:	43 e0       	ldi	r20, 0x03	; 3
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	6c e5       	ldi	r22, 0x5C	; 92
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	0e 94 f6 10 	call	0x21ec	; 0x21ec <strncasecmp_P>
    1fa8:	89 2b       	or	r24, r25
    1faa:	c1 f4       	brne	.+48     	; 0x1fdc <strtod+0x9e>
    1fac:	23 96       	adiw	r28, 0x03	; 3
    1fae:	45 e0       	ldi	r20, 0x05	; 5
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	67 e5       	ldi	r22, 0x57	; 87
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <strncasecmp_P>
    1fbc:	89 2b       	or	r24, r25
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <strtod+0x84>
    1fc0:	25 96       	adiw	r28, 0x05	; 5
    1fc2:	c1 14       	cp	r12, r1
    1fc4:	d1 04       	cpc	r13, r1
    1fc6:	19 f0       	breq	.+6      	; 0x1fce <strtod+0x90>
    1fc8:	f6 01       	movw	r30, r12
    1fca:	d1 83       	std	Z+1, r29	; 0x01
    1fcc:	c0 83       	st	Z, r28
    1fce:	11 11       	cpse	r17, r1
    1fd0:	f6 c0       	rjmp	.+492    	; 0x21be <strtod+0x280>
    1fd2:	60 e0       	ldi	r22, 0x00	; 0
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	80 e8       	ldi	r24, 0x80	; 128
    1fd8:	9f e7       	ldi	r25, 0x7F	; 127
    1fda:	fa c0       	rjmp	.+500    	; 0x21d0 <strtod+0x292>
    1fdc:	43 e0       	ldi	r20, 0x03	; 3
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	64 e5       	ldi	r22, 0x54	; 84
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <strncasecmp_P>
    1fea:	89 2b       	or	r24, r25
    1fec:	59 f4       	brne	.+22     	; 0x2004 <strtod+0xc6>
    1fee:	c1 14       	cp	r12, r1
    1ff0:	d1 04       	cpc	r13, r1
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <strtod+0xb8>
    1ff4:	e9 c0       	rjmp	.+466    	; 0x21c8 <strtod+0x28a>
    1ff6:	f2 e0       	ldi	r31, 0x02	; 2
    1ff8:	ef 0e       	add	r14, r31
    1ffa:	f1 1c       	adc	r15, r1
    1ffc:	f6 01       	movw	r30, r12
    1ffe:	f1 82       	std	Z+1, r15	; 0x01
    2000:	e0 82       	st	Z, r14
    2002:	e2 c0       	rjmp	.+452    	; 0x21c8 <strtod+0x28a>
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	c0 e0       	ldi	r28, 0x00	; 0
    200c:	d0 e0       	ldi	r29, 0x00	; 0
    200e:	f7 01       	movw	r30, r14
    2010:	80 ed       	ldi	r24, 0xD0	; 208
    2012:	a8 2e       	mov	r10, r24
    2014:	a0 0e       	add	r10, r16
    2016:	89 e0       	ldi	r24, 0x09	; 9
    2018:	8a 15       	cp	r24, r10
    201a:	30 f1       	brcs	.+76     	; 0x2068 <strtod+0x12a>
    201c:	91 2f       	mov	r25, r17
    201e:	92 60       	ori	r25, 0x02	; 2
    2020:	b9 2e       	mov	r11, r25
    2022:	81 2f       	mov	r24, r17
    2024:	88 70       	andi	r24, 0x08	; 8
    2026:	12 ff       	sbrs	r17, 2
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <strtod+0xf4>
    202a:	81 11       	cpse	r24, r1
    202c:	24 c0       	rjmp	.+72     	; 0x2076 <strtod+0x138>
    202e:	21 96       	adiw	r28, 0x01	; 1
    2030:	22 c0       	rjmp	.+68     	; 0x2076 <strtod+0x138>
    2032:	81 11       	cpse	r24, r1
    2034:	21 97       	sbiw	r28, 0x01	; 1
    2036:	a5 e0       	ldi	r26, 0x05	; 5
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <__muluhisi3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	aa 1f       	adc	r26, r26
    2048:	bb 1f       	adc	r27, r27
    204a:	9c 01       	movw	r18, r24
    204c:	ad 01       	movw	r20, r26
    204e:	2a 0d       	add	r18, r10
    2050:	31 1d       	adc	r19, r1
    2052:	41 1d       	adc	r20, r1
    2054:	51 1d       	adc	r21, r1
    2056:	28 39       	cpi	r18, 0x98	; 152
    2058:	89 e9       	ldi	r24, 0x99	; 153
    205a:	38 07       	cpc	r19, r24
    205c:	48 07       	cpc	r20, r24
    205e:	89 e1       	ldi	r24, 0x19	; 25
    2060:	58 07       	cpc	r21, r24
    2062:	48 f0       	brcs	.+18     	; 0x2076 <strtod+0x138>
    2064:	16 60       	ori	r17, 0x06	; 6
    2066:	06 c0       	rjmp	.+12     	; 0x2074 <strtod+0x136>
    2068:	9e ef       	ldi	r25, 0xFE	; 254
    206a:	a9 12       	cpse	r10, r25
    206c:	0a c0       	rjmp	.+20     	; 0x2082 <strtod+0x144>
    206e:	13 fd       	sbrc	r17, 3
    2070:	40 c0       	rjmp	.+128    	; 0x20f2 <strtod+0x1b4>
    2072:	18 60       	ori	r17, 0x08	; 8
    2074:	b1 2e       	mov	r11, r17
    2076:	8f ef       	ldi	r24, 0xFF	; 255
    2078:	e8 1a       	sub	r14, r24
    207a:	f8 0a       	sbc	r15, r24
    207c:	00 81       	ld	r16, Z
    207e:	1b 2d       	mov	r17, r11
    2080:	c6 cf       	rjmp	.-116    	; 0x200e <strtod+0xd0>
    2082:	80 2f       	mov	r24, r16
    2084:	8f 7d       	andi	r24, 0xDF	; 223
    2086:	85 34       	cpi	r24, 0x45	; 69
    2088:	a1 f5       	brne	.+104    	; 0x20f2 <strtod+0x1b4>
    208a:	80 81       	ld	r24, Z
    208c:	8d 32       	cpi	r24, 0x2D	; 45
    208e:	11 f4       	brne	.+4      	; 0x2094 <strtod+0x156>
    2090:	10 61       	ori	r17, 0x10	; 16
    2092:	06 c0       	rjmp	.+12     	; 0x20a0 <strtod+0x162>
    2094:	8b 32       	cpi	r24, 0x2B	; 43
    2096:	21 f0       	breq	.+8      	; 0x20a0 <strtod+0x162>
    2098:	31 96       	adiw	r30, 0x01	; 1
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	70 e0       	ldi	r23, 0x00	; 0
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <strtod+0x16a>
    20a0:	81 81       	ldd	r24, Z+1	; 0x01
    20a2:	32 96       	adiw	r30, 0x02	; 2
    20a4:	62 e0       	ldi	r22, 0x02	; 2
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	80 53       	subi	r24, 0x30	; 48
    20aa:	8a 30       	cpi	r24, 0x0A	; 10
    20ac:	18 f0       	brcs	.+6      	; 0x20b4 <strtod+0x176>
    20ae:	e6 1b       	sub	r30, r22
    20b0:	f7 0b       	sbc	r31, r23
    20b2:	1f c0       	rjmp	.+62     	; 0x20f2 <strtod+0x1b4>
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	60 38       	cpi	r22, 0x80	; 128
    20ba:	9c e0       	ldi	r25, 0x0C	; 12
    20bc:	79 07       	cpc	r23, r25
    20be:	5c f4       	brge	.+22     	; 0x20d6 <strtod+0x198>
    20c0:	db 01       	movw	r26, r22
    20c2:	aa 0f       	add	r26, r26
    20c4:	bb 1f       	adc	r27, r27
    20c6:	aa 0f       	add	r26, r26
    20c8:	bb 1f       	adc	r27, r27
    20ca:	6a 0f       	add	r22, r26
    20cc:	7b 1f       	adc	r23, r27
    20ce:	66 0f       	add	r22, r22
    20d0:	77 1f       	adc	r23, r23
    20d2:	68 0f       	add	r22, r24
    20d4:	71 1d       	adc	r23, r1
    20d6:	31 96       	adiw	r30, 0x01	; 1
    20d8:	df 01       	movw	r26, r30
    20da:	11 97       	sbiw	r26, 0x01	; 1
    20dc:	8c 91       	ld	r24, X
    20de:	80 53       	subi	r24, 0x30	; 48
    20e0:	8a 30       	cpi	r24, 0x0A	; 10
    20e2:	50 f3       	brcs	.-44     	; 0x20b8 <strtod+0x17a>
    20e4:	14 ff       	sbrs	r17, 4
    20e6:	03 c0       	rjmp	.+6      	; 0x20ee <strtod+0x1b0>
    20e8:	71 95       	neg	r23
    20ea:	61 95       	neg	r22
    20ec:	71 09       	sbc	r23, r1
    20ee:	c6 0f       	add	r28, r22
    20f0:	d7 1f       	adc	r29, r23
    20f2:	11 ff       	sbrs	r17, 1
    20f4:	08 c0       	rjmp	.+16     	; 0x2106 <strtod+0x1c8>
    20f6:	c1 14       	cp	r12, r1
    20f8:	d1 04       	cpc	r13, r1
    20fa:	29 f0       	breq	.+10     	; 0x2106 <strtod+0x1c8>
    20fc:	cf 01       	movw	r24, r30
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	f6 01       	movw	r30, r12
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
    2106:	ca 01       	movw	r24, r20
    2108:	b9 01       	movw	r22, r18
    210a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__floatunsisf>
    210e:	21 2f       	mov	r18, r17
    2110:	23 70       	andi	r18, 0x03	; 3
    2112:	23 30       	cpi	r18, 0x03	; 3
    2114:	19 f0       	breq	.+6      	; 0x211c <strtod+0x1de>
    2116:	4b 01       	movw	r8, r22
    2118:	5c 01       	movw	r10, r24
    211a:	06 c0       	rjmp	.+12     	; 0x2128 <strtod+0x1ea>
    211c:	4b 01       	movw	r8, r22
    211e:	5c 01       	movw	r10, r24
    2120:	b7 fa       	bst	r11, 7
    2122:	b0 94       	com	r11
    2124:	b7 f8       	bld	r11, 7
    2126:	b0 94       	com	r11
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	a9 01       	movw	r20, r18
    212e:	c5 01       	movw	r24, r10
    2130:	b4 01       	movw	r22, r8
    2132:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__cmpsf2>
    2136:	88 23       	and	r24, r24
    2138:	09 f4       	brne	.+2      	; 0x213c <strtod+0x1fe>
    213a:	3e c0       	rjmp	.+124    	; 0x21b8 <strtod+0x27a>
    213c:	d7 ff       	sbrs	r29, 7
    213e:	06 c0       	rjmp	.+12     	; 0x214c <strtod+0x20e>
    2140:	d1 95       	neg	r29
    2142:	c1 95       	neg	r28
    2144:	d1 09       	sbc	r29, r1
    2146:	03 e7       	ldi	r16, 0x73	; 115
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <strtod+0x212>
    214c:	0b e8       	ldi	r16, 0x8B	; 139
    214e:	10 e0       	ldi	r17, 0x00	; 0
    2150:	68 01       	movw	r12, r16
    2152:	f8 e1       	ldi	r31, 0x18	; 24
    2154:	cf 1a       	sub	r12, r31
    2156:	d1 08       	sbc	r13, r1
    2158:	90 e2       	ldi	r25, 0x20	; 32
    215a:	e9 2e       	mov	r14, r25
    215c:	f1 2c       	mov	r15, r1
    215e:	ce 15       	cp	r28, r14
    2160:	df 05       	cpc	r29, r15
    2162:	74 f0       	brlt	.+28     	; 0x2180 <strtod+0x242>
    2164:	f8 01       	movw	r30, r16
    2166:	25 91       	lpm	r18, Z+
    2168:	35 91       	lpm	r19, Z+
    216a:	45 91       	lpm	r20, Z+
    216c:	54 91       	lpm	r21, Z
    216e:	c5 01       	movw	r24, r10
    2170:	b4 01       	movw	r22, r8
    2172:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <__mulsf3>
    2176:	4b 01       	movw	r8, r22
    2178:	5c 01       	movw	r10, r24
    217a:	ce 19       	sub	r28, r14
    217c:	df 09       	sbc	r29, r15
    217e:	ef cf       	rjmp	.-34     	; 0x215e <strtod+0x220>
    2180:	04 50       	subi	r16, 0x04	; 4
    2182:	11 09       	sbc	r17, r1
    2184:	f5 94       	asr	r15
    2186:	e7 94       	ror	r14
    2188:	0c 15       	cp	r16, r12
    218a:	1d 05       	cpc	r17, r13
    218c:	41 f7       	brne	.-48     	; 0x215e <strtod+0x220>
    218e:	8a 2d       	mov	r24, r10
    2190:	88 0f       	add	r24, r24
    2192:	8b 2d       	mov	r24, r11
    2194:	88 1f       	adc	r24, r24
    2196:	8f 3f       	cpi	r24, 0xFF	; 255
    2198:	49 f0       	breq	.+18     	; 0x21ac <strtod+0x26e>
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	a9 01       	movw	r20, r18
    21a0:	c5 01       	movw	r24, r10
    21a2:	b4 01       	movw	r22, r8
    21a4:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__cmpsf2>
    21a8:	81 11       	cpse	r24, r1
    21aa:	06 c0       	rjmp	.+12     	; 0x21b8 <strtod+0x27a>
    21ac:	82 e2       	ldi	r24, 0x22	; 34
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <errno+0x1>
    21b4:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <errno>
    21b8:	c5 01       	movw	r24, r10
    21ba:	b4 01       	movw	r22, r8
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <strtod+0x292>
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	80 e8       	ldi	r24, 0x80	; 128
    21c4:	9f ef       	ldi	r25, 0xFF	; 255
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <strtod+0x292>
    21c8:	60 e0       	ldi	r22, 0x00	; 0
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	80 ec       	ldi	r24, 0xC0	; 192
    21ce:	9f e7       	ldi	r25, 0x7F	; 127
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	ec e0       	ldi	r30, 0x0C	; 12
    21d6:	0c 94 33 11 	jmp	0x2266	; 0x2266 <__epilogue_restores__+0xc>

000021da <isspace>:
    21da:	91 11       	cpse	r25, r1
    21dc:	0c 94 0e 11 	jmp	0x221c	; 0x221c <__ctype_isfalse>
    21e0:	80 32       	cpi	r24, 0x20	; 32
    21e2:	19 f0       	breq	.+6      	; 0x21ea <isspace+0x10>
    21e4:	89 50       	subi	r24, 0x09	; 9
    21e6:	85 50       	subi	r24, 0x05	; 5
    21e8:	c8 f7       	brcc	.-14     	; 0x21dc <isspace+0x2>
    21ea:	08 95       	ret

000021ec <strncasecmp_P>:
    21ec:	fb 01       	movw	r30, r22
    21ee:	dc 01       	movw	r26, r24
    21f0:	41 50       	subi	r20, 0x01	; 1
    21f2:	50 40       	sbci	r21, 0x00	; 0
    21f4:	88 f0       	brcs	.+34     	; 0x2218 <strncasecmp_P+0x2c>
    21f6:	8d 91       	ld	r24, X+
    21f8:	81 34       	cpi	r24, 0x41	; 65
    21fa:	1c f0       	brlt	.+6      	; 0x2202 <strncasecmp_P+0x16>
    21fc:	8b 35       	cpi	r24, 0x5B	; 91
    21fe:	0c f4       	brge	.+2      	; 0x2202 <strncasecmp_P+0x16>
    2200:	80 5e       	subi	r24, 0xE0	; 224
    2202:	65 91       	lpm	r22, Z+
    2204:	61 34       	cpi	r22, 0x41	; 65
    2206:	1c f0       	brlt	.+6      	; 0x220e <strncasecmp_P+0x22>
    2208:	6b 35       	cpi	r22, 0x5B	; 91
    220a:	0c f4       	brge	.+2      	; 0x220e <strncasecmp_P+0x22>
    220c:	60 5e       	subi	r22, 0xE0	; 224
    220e:	86 1b       	sub	r24, r22
    2210:	61 11       	cpse	r22, r1
    2212:	71 f3       	breq	.-36     	; 0x21f0 <strncasecmp_P+0x4>
    2214:	99 0b       	sbc	r25, r25
    2216:	08 95       	ret
    2218:	88 1b       	sub	r24, r24
    221a:	fc cf       	rjmp	.-8      	; 0x2214 <strncasecmp_P+0x28>

0000221c <__ctype_isfalse>:
    221c:	99 27       	eor	r25, r25
    221e:	88 27       	eor	r24, r24

00002220 <__ctype_istrue>:
    2220:	08 95       	ret

00002222 <__prologue_saves__>:
    2222:	2f 92       	push	r2
    2224:	3f 92       	push	r3
    2226:	4f 92       	push	r4
    2228:	5f 92       	push	r5
    222a:	6f 92       	push	r6
    222c:	7f 92       	push	r7
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	af 92       	push	r10
    2234:	bf 92       	push	r11
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	ca 1b       	sub	r28, r26
    224c:	db 0b       	sbc	r29, r27
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	09 94       	ijmp

0000225a <__epilogue_restores__>:
    225a:	2a 88       	ldd	r2, Y+18	; 0x12
    225c:	39 88       	ldd	r3, Y+17	; 0x11
    225e:	48 88       	ldd	r4, Y+16	; 0x10
    2260:	5f 84       	ldd	r5, Y+15	; 0x0f
    2262:	6e 84       	ldd	r6, Y+14	; 0x0e
    2264:	7d 84       	ldd	r7, Y+13	; 0x0d
    2266:	8c 84       	ldd	r8, Y+12	; 0x0c
    2268:	9b 84       	ldd	r9, Y+11	; 0x0b
    226a:	aa 84       	ldd	r10, Y+10	; 0x0a
    226c:	b9 84       	ldd	r11, Y+9	; 0x09
    226e:	c8 84       	ldd	r12, Y+8	; 0x08
    2270:	df 80       	ldd	r13, Y+7	; 0x07
    2272:	ee 80       	ldd	r14, Y+6	; 0x06
    2274:	fd 80       	ldd	r15, Y+5	; 0x05
    2276:	0c 81       	ldd	r16, Y+4	; 0x04
    2278:	1b 81       	ldd	r17, Y+3	; 0x03
    227a:	aa 81       	ldd	r26, Y+2	; 0x02
    227c:	b9 81       	ldd	r27, Y+1	; 0x01
    227e:	ce 0f       	add	r28, r30
    2280:	d1 1d       	adc	r29, r1
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	ed 01       	movw	r28, r26
    228e:	08 95       	ret

00002290 <_exit>:
    2290:	f8 94       	cli

00002292 <__stop_program>:
    2292:	ff cf       	rjmp	.-2      	; 0x2292 <__stop_program>
